
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_Option", "kU_Options", 
      "kU_DetachDatabase", "kU_UseDatabase", "kU_StandaloneCall", "kU_CommentOn", 
      "kU_CreateMacro", "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", 
      "kU_ParsingOptions", "kU_CreateNodeTable", "kU_CreateRelTable", "kU_CreateRelTableGroup", 
      "kU_RelTableConnection", "kU_CreateRdfGraph", "kU_CreateSequence", 
      "kU_SequenceOptions", "kU_IncrementBy", "kU_MinValue", "kU_MaxValue", 
      "kU_StartWith", "kU_Cycle", "kU_Drop", "kU_AlterTable", "kU_AlterOptions", 
      "kU_AddProperty", "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", 
      "kU_PropertyDefinitions", "kU_PropertyDefinition", "kU_PropertyDefinitionsDDL", 
      "kU_PropertyDefinitionDDL", "kU_CreateNodeConstraint", "kU_DataType", 
      "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", "oC_Explain", 
      "oC_Profile", "kU_Transaction", "kU_Extension", "kU_LoadExtension", 
      "kU_InstallExtension", "oC_Query", "oC_RegularQuery", "oC_Union", 
      "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "kU_QueryPart", 
      "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", "kU_InQueryCall", 
      "oC_Match", "oC_Hint", "oC_Hint_Part", "oC_Unwind", "oC_Create", "oC_Merge", 
      "oC_MergeAction", "oC_Set", "oC_SetItem", "oC_Delete", "oC_With", 
      "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", "oC_ProjectionItem", 
      "oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
      "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", 
      "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", 
      "oC_RelationshipDetail", "kU_Properties", "oC_RelationshipTypes", 
      "oC_NodeLabels", "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", 
      "kU_IntermediateNodeProjectionItems", "kU_IntermediateRelProjectionItems", 
      "oC_LowerBound", "oC_UpperBound", "oC_LabelName", "oC_RelTypeName", 
      "oC_Expression", "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
      "oC_NotExpression", "oC_ComparisonExpression", "kU_ComparisonOperator", 
      "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "oC_PathPatterns", "oC_ExistSubquery", "kU_CountSubquery", 
      "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", "oC_Variable", 
      "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
      "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", 
      "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "','", "')'", "'.'", "'='", "'['", "']'", "'#'", 
      "'{'", "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", 
      "'!='", "'&'", "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", 
      "'$'", "'\\u27E8'", "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", 
      "'\\u3009'", "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", 
      "'\\u2012'", "'\\u2013'", "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", 
      "'\\uFE63'", "'\\uFF0D'", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "'*'", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "'-'", "'!'", "':'", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "ATTACH", 
      "DBTYPE", "USE", "CALL", "COMMENT_", "MACRO", "GLOB", "COPY", "FROM", 
      "COLUMN", "EXPORT", "IMPORT", "DATABASE", "NODE", "TABLE", "GROUP", 
      "RDFGRAPH", "SEQUENCE", "INCREMENT", "MINVALUE", "MAXVALUE", "START", 
      "NO", "CYCLE", "DROP", "ALTER", "DEFAULT", "RENAME", "ADD", "PRIMARY", 
      "KEY", "REL", "TO", "DECIMAL", "EXPLAIN", "PROFILE", "BEGIN", "TRANSACTION", 
      "READ", "ONLY", "WRITE", "COMMIT", "COMMIT_SKIP_CHECKPOINT", "ROLLBACK", 
      "ROLLBACK_SKIP_CHECKPOINT", "INSTALL", "EXTENSION", "UNION", "ALL", 
      "LOAD", "HEADERS", "OPTIONAL", "MATCH", "UNWIND", "CREATE", "MERGE", 
      "ON", "SET", "DETACH", "DELETE", "WITH", "RETURN", "DISTINCT", "STAR", 
      "AS", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", 
      "DESC", "WHERE", "SHORTEST", "OR", "XOR", "AND", "NOT", "MINUS", "FACTORIAL", 
      "COLON", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL_", "TRUE", 
      "FALSE", "COUNT", "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", 
      "StringLiteral", "EscapedChar", "DecimalInteger", "HexLetter", "HexDigit", 
      "Digit", "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", "RegularDecimalReal", 
      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
      "SP", "WHITESPACE", "Comment", "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,162,2551,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,1,0,1,0,3,0,321,8,0,1,0,1,0,3,0,325,8,0,1,0,5,0,328,8,0,10,0,12,
  	0,331,9,0,1,0,3,0,334,8,0,1,0,1,0,1,1,3,1,339,8,1,1,1,3,1,342,8,1,1,1,
  	1,1,3,1,346,8,1,1,1,3,1,349,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,372,8,2,1,3,1,3,1,3,
  	1,3,3,3,378,8,3,1,3,1,3,3,3,382,8,3,1,3,3,3,385,8,3,1,3,1,3,1,3,1,3,3,
  	3,391,8,3,1,3,3,3,394,8,3,1,4,1,4,3,4,398,8,4,1,4,1,4,3,4,402,8,4,1,4,
  	1,4,3,4,406,8,4,1,4,5,4,409,8,4,10,4,12,4,412,9,4,1,4,3,4,415,8,4,1,4,
  	1,4,1,5,1,5,1,5,3,5,422,8,5,1,5,1,5,3,5,426,8,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,3,5,434,8,5,1,5,1,5,3,5,438,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
  	448,8,6,1,6,1,6,3,6,452,8,6,1,6,1,6,3,6,456,8,6,1,6,5,6,459,8,6,10,6,
  	12,6,462,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,474,8,7,1,7,
  	1,7,3,7,478,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,486,8,7,1,7,3,7,489,8,7,1,
  	8,1,8,1,8,1,8,1,8,1,8,3,8,497,8,8,1,8,3,8,500,8,8,1,9,1,9,1,9,1,9,1,9,
  	1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,515,8,10,1,10,1,10,1,10,3,
  	10,520,8,10,1,10,1,10,1,10,1,10,3,10,526,8,10,1,10,1,10,3,10,530,8,10,
  	1,10,3,10,533,8,10,1,10,3,10,536,8,10,1,10,1,10,1,11,1,11,3,11,542,8,
  	11,1,11,1,11,3,11,546,8,11,1,11,1,11,1,12,1,12,3,12,552,8,12,1,12,1,12,
  	3,12,556,8,12,1,12,5,12,559,8,12,10,12,12,12,562,9,12,1,13,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,576,8,15,1,15,1,15,
  	3,15,580,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,602,8,17,1,17,1,17,
  	3,17,606,8,17,1,17,3,17,609,8,17,1,17,3,17,612,8,17,1,17,3,17,615,8,17,
  	1,17,3,17,618,8,17,1,17,1,17,3,17,622,8,17,1,17,5,17,625,8,17,10,17,12,
  	17,628,9,17,1,17,3,17,631,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
  	3,18,641,8,18,1,18,1,18,3,18,645,8,18,1,18,5,18,648,8,18,10,18,12,18,
  	651,9,18,1,19,1,19,3,19,655,8,19,1,19,1,19,1,19,3,19,660,8,19,1,19,1,
  	19,1,20,1,20,3,20,666,8,20,1,20,1,20,3,20,670,8,20,1,20,1,20,3,20,674,
  	8,20,1,20,5,20,677,8,20,10,20,12,20,680,9,20,1,20,1,20,1,20,1,20,3,20,
  	686,8,20,1,20,1,20,3,20,690,8,20,1,20,1,20,3,20,694,8,20,1,20,3,20,697,
  	8,20,1,21,1,21,3,21,701,8,21,1,21,1,21,3,21,705,8,21,1,21,1,21,1,22,1,
  	22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,717,8,22,1,22,1,22,3,22,721,8,22,
  	1,22,1,22,3,22,725,8,22,1,22,1,22,3,22,729,8,22,1,22,1,22,1,22,3,22,734,
  	8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,746,8,23,
  	1,23,1,23,3,23,750,8,23,1,23,1,23,3,23,754,8,23,1,23,1,23,3,23,758,8,
  	23,1,23,1,23,3,23,762,8,23,3,23,764,8,23,1,23,1,23,3,23,768,8,23,1,23,
  	1,23,3,23,772,8,23,3,23,774,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
  	24,1,24,1,24,1,24,1,24,3,24,788,8,24,1,24,1,24,3,24,792,8,24,1,24,1,24,
  	3,24,796,8,24,1,24,1,24,3,24,800,8,24,1,24,4,24,803,8,24,11,24,12,24,
  	804,1,24,3,24,808,8,24,1,24,1,24,3,24,812,8,24,1,24,1,24,3,24,816,8,24,
  	3,24,818,8,24,1,24,1,24,3,24,822,8,24,1,24,1,24,3,24,826,8,24,3,24,828,
  	8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,853,8,27,10,27,
  	12,27,856,9,27,1,28,1,28,1,28,1,28,1,28,3,28,863,8,28,1,29,1,29,1,29,
  	1,29,3,29,869,8,29,1,29,3,29,872,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
  	30,1,30,3,30,882,8,30,1,30,3,30,885,8,30,1,31,1,31,1,31,1,31,1,31,1,31,
  	3,31,893,8,31,1,31,3,31,896,8,31,1,32,1,32,1,32,1,32,3,32,902,8,32,1,
  	32,3,32,905,8,32,1,32,1,32,1,33,1,33,3,33,911,8,33,1,33,1,33,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,
  	1,36,1,36,3,36,933,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	3,37,944,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,3,41,966,8,41,1,41,1,41,
  	3,41,970,8,41,1,41,5,41,973,8,41,10,41,12,41,976,9,41,1,42,1,42,1,42,
  	1,42,1,43,1,43,3,43,984,8,43,1,43,1,43,3,43,988,8,43,1,43,5,43,991,8,
  	43,10,43,12,43,994,9,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1003,
  	8,44,1,45,1,45,1,45,1,45,3,45,1009,8,45,1,45,1,45,3,45,1013,8,45,1,45,
  	1,45,3,45,1017,8,45,1,45,1,45,1,46,1,46,1,46,1,46,3,46,1025,8,46,1,46,
  	1,46,3,46,1029,8,46,1,46,1,46,3,46,1033,8,46,1,46,1,46,1,46,1,46,3,46,
  	1039,8,46,1,46,1,46,3,46,1043,8,46,1,46,1,46,3,46,1047,8,46,1,46,1,46,
  	1,46,1,46,3,46,1053,8,46,1,46,1,46,3,46,1057,8,46,1,46,1,46,3,46,1061,
  	8,46,1,46,1,46,3,46,1065,8,46,1,46,1,46,3,46,1069,8,46,1,46,1,46,1,46,
  	1,46,3,46,1075,8,46,1,46,1,46,3,46,1079,8,46,1,46,1,46,3,46,1083,8,46,
  	1,46,1,46,3,46,1087,8,46,1,46,1,46,3,46,1091,8,46,1,46,1,46,3,46,1095,
  	8,46,1,46,1,46,5,46,1099,8,46,10,46,12,46,1102,9,46,1,47,1,47,5,47,1106,
  	8,47,10,47,12,47,1109,9,47,1,48,1,48,3,48,1113,8,48,1,48,1,48,1,49,1,
  	49,3,49,1119,8,49,1,50,5,50,1122,8,50,10,50,12,50,1125,9,50,1,50,1,50,
  	1,51,5,51,1130,8,51,10,51,12,51,1133,9,51,1,51,1,51,1,52,1,52,1,52,1,
  	52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1151,8,52,1,
  	53,1,53,3,53,1155,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1163,8,54,1,
  	55,1,55,1,55,1,55,1,56,1,56,1,57,1,57,3,57,1173,8,57,1,57,5,57,1176,8,
  	57,10,57,12,57,1179,9,57,1,57,1,57,3,57,1183,8,57,4,57,1185,8,57,11,57,
  	12,57,1186,1,57,1,57,1,57,3,57,1192,8,57,1,58,1,58,1,58,1,58,3,58,1198,
  	8,58,1,58,1,58,1,58,3,58,1203,8,58,1,58,3,58,1206,8,58,1,59,1,59,3,59,
  	1210,8,59,1,60,1,60,3,60,1214,8,60,5,60,1216,8,60,10,60,12,60,1219,9,
  	60,1,60,1,60,1,60,3,60,1224,8,60,5,60,1226,8,60,10,60,12,60,1229,9,60,
  	1,60,1,60,3,60,1233,8,60,1,60,5,60,1236,8,60,10,60,12,60,1239,9,60,1,
  	60,3,60,1242,8,60,1,60,3,60,1245,8,60,1,60,1,60,3,60,1249,8,60,4,60,1251,
  	8,60,11,60,12,60,1252,1,60,1,60,3,60,1257,8,60,1,61,1,61,3,61,1261,8,
  	61,4,61,1263,8,61,11,61,12,61,1264,1,61,1,61,1,62,1,62,3,62,1271,8,62,
  	5,62,1273,8,62,10,62,12,62,1276,9,62,1,62,1,62,3,62,1280,8,62,5,62,1282,
  	8,62,10,62,12,62,1285,9,62,1,62,1,62,1,63,1,63,1,63,1,63,3,63,1293,8,
  	63,1,64,1,64,1,64,1,64,3,64,1299,8,64,1,65,1,65,1,65,1,65,1,65,1,65,3,
  	65,1307,8,65,1,65,1,65,3,65,1311,8,65,1,65,1,65,3,65,1315,8,65,1,65,1,
  	65,3,65,1319,8,65,1,65,1,65,1,65,1,65,1,65,3,65,1326,8,65,1,65,3,65,1329,
  	8,65,1,65,3,65,1332,8,65,1,65,3,65,1335,8,65,1,66,1,66,1,66,1,66,3,66,
  	1341,8,66,1,66,3,66,1344,8,66,1,67,1,67,3,67,1348,8,67,1,67,1,67,3,67,
  	1352,8,67,1,67,1,67,3,67,1356,8,67,1,67,3,67,1359,8,67,1,67,3,67,1362,
  	8,67,1,67,3,67,1365,8,67,1,67,3,67,1368,8,67,1,68,1,68,3,68,1372,8,68,
  	1,68,1,68,3,68,1376,8,68,1,68,1,68,3,68,1380,8,68,1,68,5,68,1383,8,68,
  	10,68,12,68,1386,9,68,1,68,3,68,1389,8,68,1,68,1,68,1,69,1,69,3,69,1395,
  	8,69,1,69,1,69,3,69,1399,8,69,1,69,1,69,3,69,1403,8,69,1,69,5,69,1406,
  	8,69,10,69,12,69,1409,9,69,1,69,3,69,1412,8,69,1,69,1,69,1,69,3,69,1417,
  	8,69,1,70,1,70,3,70,1421,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,
  	3,71,1431,8,71,1,71,1,71,1,72,1,72,3,72,1437,8,72,1,72,1,72,1,72,5,72,
  	1442,8,72,10,72,12,72,1445,9,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
  	73,1,73,1,73,3,73,1457,8,73,1,74,1,74,3,74,1461,8,74,1,74,1,74,3,74,1465,
  	8,74,1,74,1,74,3,74,1469,8,74,1,74,5,74,1472,8,74,10,74,12,74,1475,9,
  	74,1,75,1,75,3,75,1479,8,75,1,75,1,75,3,75,1483,8,75,1,75,1,75,1,76,1,
  	76,3,76,1489,8,76,1,76,1,76,3,76,1493,8,76,1,76,1,76,3,76,1497,8,76,1,
  	76,1,76,3,76,1501,8,76,1,76,5,76,1504,8,76,10,76,12,76,1507,9,76,1,77,
  	1,77,1,77,3,77,1512,8,77,1,77,3,77,1515,8,77,1,78,1,78,1,78,1,79,3,79,
  	1521,8,79,1,79,3,79,1524,8,79,1,79,1,79,1,79,1,79,3,79,1530,8,79,1,79,
  	1,79,3,79,1534,8,79,1,79,1,79,3,79,1538,8,79,1,80,1,80,3,80,1542,8,80,
  	1,80,1,80,3,80,1546,8,80,1,80,5,80,1549,8,80,10,80,12,80,1552,9,80,1,
  	80,1,80,3,80,1556,8,80,1,80,1,80,3,80,1560,8,80,1,80,5,80,1563,8,80,10,
  	80,12,80,1566,9,80,3,80,1568,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
  	3,81,1577,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1586,8,82,1,82,
  	5,82,1589,8,82,10,82,12,82,1592,9,82,1,83,1,83,1,83,1,83,1,84,1,84,1,
  	84,1,84,1,85,1,85,3,85,1604,8,85,1,85,3,85,1607,8,85,1,86,1,86,1,86,1,
  	86,1,87,1,87,3,87,1615,8,87,1,87,1,87,3,87,1619,8,87,1,87,5,87,1622,8,
  	87,10,87,12,87,1625,9,87,1,88,1,88,3,88,1629,8,88,1,88,1,88,3,88,1633,
  	8,88,1,88,1,88,1,88,3,88,1638,8,88,1,89,1,89,1,90,1,90,3,90,1644,8,90,
  	1,90,5,90,1647,8,90,10,90,12,90,1650,9,90,1,90,1,90,1,90,1,90,3,90,1656,
  	8,90,1,91,1,91,3,91,1660,8,91,1,91,1,91,3,91,1664,8,91,3,91,1666,8,91,
  	1,91,1,91,3,91,1670,8,91,3,91,1672,8,91,1,91,1,91,3,91,1676,8,91,3,91,
  	1678,8,91,1,91,1,91,1,92,1,92,3,92,1684,8,92,1,92,1,92,1,93,1,93,3,93,
  	1690,8,93,1,93,1,93,3,93,1694,8,93,1,93,3,93,1697,8,93,1,93,3,93,1700,
  	8,93,1,93,1,93,1,93,1,93,3,93,1706,8,93,1,93,3,93,1709,8,93,1,93,3,93,
  	1712,8,93,1,93,1,93,3,93,1716,8,93,1,93,1,93,1,93,1,93,3,93,1722,8,93,
  	1,93,3,93,1725,8,93,1,93,3,93,1728,8,93,1,93,1,93,3,93,1732,8,93,1,94,
  	1,94,3,94,1736,8,94,1,94,1,94,3,94,1740,8,94,3,94,1742,8,94,1,94,1,94,
  	3,94,1746,8,94,3,94,1748,8,94,1,94,1,94,3,94,1752,8,94,3,94,1754,8,94,
  	1,94,1,94,3,94,1758,8,94,3,94,1760,8,94,1,94,1,94,1,95,1,95,3,95,1766,
  	8,95,1,95,1,95,3,95,1770,8,95,1,95,1,95,3,95,1774,8,95,1,95,1,95,3,95,
  	1778,8,95,1,95,1,95,3,95,1782,8,95,1,95,1,95,3,95,1786,8,95,1,95,1,95,
  	3,95,1790,8,95,1,95,1,95,3,95,1794,8,95,5,95,1796,8,95,10,95,12,95,1799,
  	9,95,3,95,1801,8,95,1,95,1,95,1,96,1,96,3,96,1807,8,96,1,96,1,96,3,96,
  	1811,8,96,1,96,1,96,3,96,1815,8,96,1,96,3,96,1818,8,96,1,96,5,96,1821,
  	8,96,10,96,12,96,1824,9,96,1,97,1,97,3,97,1828,8,97,1,97,1,97,3,97,1832,
  	8,97,1,97,3,97,1835,8,97,1,97,3,97,1838,8,97,1,97,3,97,1841,8,97,1,97,
  	5,97,1844,8,97,10,97,12,97,1847,9,97,1,98,1,98,3,98,1851,8,98,1,98,1,
  	98,1,98,1,98,3,98,1857,8,98,1,98,3,98,1860,8,98,1,98,3,98,1863,8,98,1,
  	98,3,98,1866,8,98,1,98,1,98,3,98,1870,8,98,1,98,3,98,1873,8,98,1,98,3,
  	98,1876,8,98,1,98,3,98,1879,8,98,1,98,3,98,1882,8,98,1,99,1,99,3,99,1886,
  	8,99,1,99,1,99,3,99,1890,8,99,1,99,1,99,3,99,1894,8,99,1,99,1,99,3,99,
  	1898,8,99,1,99,1,99,3,99,1902,8,99,1,99,3,99,1905,8,99,1,99,3,99,1908,
  	8,99,1,99,1,99,3,99,1912,8,99,1,99,1,99,3,99,1916,8,99,1,99,1,99,3,99,
  	1920,8,99,1,99,1,99,3,99,1924,8,99,3,99,1926,8,99,1,99,1,99,1,100,1,100,
  	3,100,1932,8,100,1,100,3,100,1935,8,100,1,100,3,100,1938,8,100,1,100,
  	1,100,1,101,1,101,3,101,1944,8,101,1,101,3,101,1947,8,101,1,101,3,101,
  	1950,8,101,1,101,1,101,1,102,1,102,1,103,1,103,1,104,1,104,1,105,1,105,
  	1,106,1,106,1,107,1,107,1,107,1,107,1,107,5,107,1969,8,107,10,107,12,
  	107,1972,9,107,1,108,1,108,1,108,1,108,1,108,5,108,1979,8,108,10,108,
  	12,108,1982,9,108,1,109,1,109,1,109,1,109,1,109,5,109,1989,8,109,10,109,
  	12,109,1992,9,109,1,110,1,110,3,110,1996,8,110,5,110,1998,8,110,10,110,
  	12,110,2001,9,110,1,110,1,110,1,111,1,111,3,111,2007,8,111,1,111,1,111,
  	3,111,2011,8,111,1,111,1,111,5,111,2015,8,111,10,111,12,111,2018,9,111,
  	1,111,1,111,3,111,2022,8,111,1,111,1,111,3,111,2026,8,111,1,111,1,111,
  	3,111,2030,8,111,1,111,1,111,3,111,2034,8,111,1,111,1,111,4,111,2038,
  	8,111,11,111,12,111,2039,1,111,1,111,3,111,2044,8,111,1,112,1,112,1,113,
  	1,113,3,113,2050,8,113,1,113,1,113,3,113,2054,8,113,1,113,5,113,2057,
  	8,113,10,113,12,113,2060,9,113,1,114,1,114,3,114,2064,8,114,1,114,1,114,
  	3,114,2068,8,114,1,114,5,114,2071,8,114,10,114,12,114,2074,9,114,1,115,
  	1,115,3,115,2078,8,115,1,115,1,115,3,115,2082,8,115,1,115,1,115,5,115,
  	2086,8,115,10,115,12,115,2089,9,115,1,116,1,116,1,117,1,117,3,117,2095,
  	8,117,1,117,1,117,3,117,2099,8,117,1,117,1,117,5,117,2103,8,117,10,117,
  	12,117,2106,9,117,1,118,1,118,1,119,1,119,3,119,2112,8,119,1,119,1,119,
  	3,119,2116,8,119,1,119,1,119,5,119,2120,8,119,10,119,12,119,2123,9,119,
  	1,120,1,120,1,121,1,121,3,121,2129,8,121,1,121,1,121,3,121,2133,8,121,
  	1,121,5,121,2136,8,121,10,121,12,121,2139,9,121,1,122,1,122,3,122,2143,
  	8,122,5,122,2145,8,122,10,122,12,122,2148,9,122,1,122,1,122,3,122,2152,
  	8,122,1,122,3,122,2155,8,122,1,123,1,123,1,123,4,123,2160,8,123,11,123,
  	12,123,2161,1,123,3,123,2165,8,123,1,124,1,124,1,124,3,124,2170,8,124,
  	1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,2179,8,124,1,124,1,124,
  	3,124,2183,8,124,1,124,3,124,2186,8,124,1,125,1,125,1,125,1,125,1,125,
  	1,125,1,125,1,125,1,125,1,125,1,125,3,125,2199,8,125,1,125,3,125,2202,
  	8,125,1,125,1,125,1,126,3,126,2207,8,126,1,126,1,126,1,127,1,127,1,127,
  	1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,2221,8,127,1,128,1,128,
  	3,128,2225,8,128,1,128,5,128,2228,8,128,10,128,12,128,2231,9,128,1,129,
  	1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,2242,8,129,1,130,
  	1,130,1,130,1,130,1,130,1,130,3,130,2250,8,130,1,131,1,131,1,132,1,132,
  	3,132,2256,8,132,1,132,1,132,3,132,2260,8,132,1,132,1,132,3,132,2264,
  	8,132,5,132,2266,8,132,10,132,12,132,2269,9,132,3,132,2271,8,132,1,132,
  	1,132,1,133,1,133,3,133,2277,8,133,1,133,3,133,2280,8,133,1,134,1,134,
  	3,134,2284,8,134,1,134,1,134,3,134,2288,8,134,1,134,1,134,3,134,2292,
  	8,134,1,134,1,134,3,134,2296,8,134,5,134,2298,8,134,10,134,12,134,2301,
  	9,134,1,134,1,134,1,135,1,135,3,135,2307,8,135,1,135,3,135,2310,8,135,
  	1,135,1,135,3,135,2314,8,135,1,135,1,135,1,136,1,136,3,136,2320,8,136,
  	1,136,1,136,3,136,2324,8,136,1,136,1,136,1,137,1,137,3,137,2330,8,137,
  	1,137,1,137,3,137,2334,8,137,1,137,1,137,3,137,2338,8,137,1,137,1,137,
  	1,137,3,137,2343,8,137,1,137,1,137,3,137,2347,8,137,1,137,1,137,3,137,
  	2351,8,137,3,137,2353,8,137,1,137,1,137,3,137,2357,8,137,1,137,1,137,
  	3,137,2361,8,137,1,137,1,137,3,137,2365,8,137,5,137,2367,8,137,10,137,
  	12,137,2370,9,137,3,137,2372,8,137,1,137,1,137,3,137,2376,8,137,1,138,
  	1,138,1,139,1,139,3,139,2382,8,139,1,139,1,139,1,139,3,139,2387,8,139,
  	3,139,2389,8,139,1,139,1,139,1,140,1,140,3,140,2395,8,140,1,140,4,140,
  	2398,8,140,11,140,12,140,2399,1,141,1,141,3,141,2404,8,141,1,141,1,141,
  	3,141,2408,8,141,1,141,1,141,3,141,2412,8,141,1,141,1,141,3,141,2416,
  	8,141,1,141,3,141,2419,8,141,1,141,3,141,2422,8,141,1,141,1,141,1,142,
  	1,142,3,142,2428,8,142,1,142,1,142,3,142,2432,8,142,1,142,1,142,3,142,
  	2436,8,142,1,142,1,142,3,142,2440,8,142,1,142,3,142,2443,8,142,1,142,
  	3,142,2446,8,142,1,142,1,142,1,143,1,143,3,143,2452,8,143,1,143,1,143,
  	3,143,2456,8,143,1,144,1,144,3,144,2460,8,144,1,144,4,144,2463,8,144,
  	11,144,12,144,2464,1,144,1,144,3,144,2469,8,144,1,144,1,144,3,144,2473,
  	8,144,1,144,4,144,2476,8,144,11,144,12,144,2477,3,144,2480,8,144,1,144,
  	3,144,2483,8,144,1,144,1,144,3,144,2487,8,144,1,144,3,144,2490,8,144,
  	1,144,3,144,2493,8,144,1,144,1,144,1,145,1,145,3,145,2499,8,145,1,145,
  	1,145,3,145,2503,8,145,1,145,1,145,3,145,2507,8,145,1,145,1,145,1,146,
  	1,146,1,147,1,147,3,147,2515,8,147,1,148,1,148,1,148,3,148,2520,8,148,
  	1,149,1,149,3,149,2524,8,149,1,149,1,149,1,150,1,150,1,151,1,151,1,152,
  	1,152,1,153,1,153,1,154,1,154,1,154,1,154,1,154,3,154,2541,8,154,1,155,
  	1,155,1,156,1,156,1,157,1,157,1,158,1,158,1,158,0,1,92,159,0,2,4,6,8,
  	10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
  	56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
  	102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
  	138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
  	174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
  	210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
  	246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
  	282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
  	0,11,2,0,62,62,64,65,1,0,117,120,2,0,6,6,14,19,1,0,21,22,2,0,23,23,127,
  	127,2,0,24,25,111,111,1,0,136,137,11,0,50,50,52,52,58,61,65,71,79,79,
  	81,81,84,84,130,130,133,133,138,138,142,142,2,0,15,15,29,32,2,0,17,17,
  	33,36,2,0,37,47,127,127,2890,0,318,1,0,0,0,2,338,1,0,0,0,4,371,1,0,0,
  	0,6,373,1,0,0,0,8,395,1,0,0,0,10,437,1,0,0,0,12,439,1,0,0,0,14,469,1,
  	0,0,0,16,490,1,0,0,0,18,501,1,0,0,0,20,507,1,0,0,0,22,539,1,0,0,0,24,
  	549,1,0,0,0,26,563,1,0,0,0,28,567,1,0,0,0,30,571,1,0,0,0,32,583,1,0,0,
  	0,34,595,1,0,0,0,36,638,1,0,0,0,38,652,1,0,0,0,40,696,1,0,0,0,42,698,
  	1,0,0,0,44,708,1,0,0,0,46,737,1,0,0,0,48,777,1,0,0,0,50,831,1,0,0,0,52,
  	839,1,0,0,0,54,845,1,0,0,0,56,862,1,0,0,0,58,864,1,0,0,0,60,884,1,0,0,
  	0,62,895,1,0,0,0,64,897,1,0,0,0,66,910,1,0,0,0,68,914,1,0,0,0,70,920,
  	1,0,0,0,72,932,1,0,0,0,74,934,1,0,0,0,76,945,1,0,0,0,78,949,1,0,0,0,80,
  	955,1,0,0,0,82,963,1,0,0,0,84,977,1,0,0,0,86,981,1,0,0,0,88,995,1,0,0,
  	0,90,1004,1,0,0,0,92,1094,1,0,0,0,94,1103,1,0,0,0,96,1110,1,0,0,0,98,
  	1118,1,0,0,0,100,1123,1,0,0,0,102,1131,1,0,0,0,104,1150,1,0,0,0,106,1154,
  	1,0,0,0,108,1156,1,0,0,0,110,1164,1,0,0,0,112,1168,1,0,0,0,114,1191,1,
  	0,0,0,116,1205,1,0,0,0,118,1209,1,0,0,0,120,1256,1,0,0,0,122,1262,1,0,
  	0,0,124,1274,1,0,0,0,126,1292,1,0,0,0,128,1298,1,0,0,0,130,1300,1,0,0,
  	0,132,1336,1,0,0,0,134,1347,1,0,0,0,136,1369,1,0,0,0,138,1416,1,0,0,0,
  	140,1418,1,0,0,0,142,1428,1,0,0,0,144,1434,1,0,0,0,146,1456,1,0,0,0,148,
  	1458,1,0,0,0,150,1476,1,0,0,0,152,1488,1,0,0,0,154,1508,1,0,0,0,156,1516,
  	1,0,0,0,158,1523,1,0,0,0,160,1567,1,0,0,0,162,1576,1,0,0,0,164,1578,1,
  	0,0,0,166,1593,1,0,0,0,168,1597,1,0,0,0,170,1601,1,0,0,0,172,1608,1,0,
  	0,0,174,1612,1,0,0,0,176,1637,1,0,0,0,178,1639,1,0,0,0,180,1655,1,0,0,
  	0,182,1657,1,0,0,0,184,1681,1,0,0,0,186,1731,1,0,0,0,188,1733,1,0,0,0,
  	190,1763,1,0,0,0,192,1804,1,0,0,0,194,1825,1,0,0,0,196,1848,1,0,0,0,198,
  	1883,1,0,0,0,200,1929,1,0,0,0,202,1941,1,0,0,0,204,1953,1,0,0,0,206,1955,
  	1,0,0,0,208,1957,1,0,0,0,210,1959,1,0,0,0,212,1961,1,0,0,0,214,1963,1,
  	0,0,0,216,1973,1,0,0,0,218,1983,1,0,0,0,220,1999,1,0,0,0,222,2043,1,0,
  	0,0,224,2045,1,0,0,0,226,2047,1,0,0,0,228,2061,1,0,0,0,230,2075,1,0,0,
  	0,232,2090,1,0,0,0,234,2092,1,0,0,0,236,2107,1,0,0,0,238,2109,1,0,0,0,
  	240,2124,1,0,0,0,242,2126,1,0,0,0,244,2146,1,0,0,0,246,2156,1,0,0,0,248,
  	2185,1,0,0,0,250,2198,1,0,0,0,252,2206,1,0,0,0,254,2220,1,0,0,0,256,2222,
  	1,0,0,0,258,2241,1,0,0,0,260,2249,1,0,0,0,262,2251,1,0,0,0,264,2253,1,
  	0,0,0,266,2274,1,0,0,0,268,2281,1,0,0,0,270,2306,1,0,0,0,272,2317,1,0,
  	0,0,274,2375,1,0,0,0,276,2377,1,0,0,0,278,2388,1,0,0,0,280,2392,1,0,0,
  	0,282,2401,1,0,0,0,284,2425,1,0,0,0,286,2449,1,0,0,0,288,2479,1,0,0,0,
  	290,2496,1,0,0,0,292,2510,1,0,0,0,294,2514,1,0,0,0,296,2516,1,0,0,0,298,
  	2521,1,0,0,0,300,2527,1,0,0,0,302,2529,1,0,0,0,304,2531,1,0,0,0,306,2533,
  	1,0,0,0,308,2540,1,0,0,0,310,2542,1,0,0,0,312,2544,1,0,0,0,314,2546,1,
  	0,0,0,316,2548,1,0,0,0,318,329,3,2,1,0,319,321,5,159,0,0,320,319,1,0,
  	0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,324,5,1,0,0,323,325,5,159,0,0,
  	324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,328,3,2,1,0,327,320,
  	1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,333,1,0,0,
  	0,331,329,1,0,0,0,332,334,5,159,0,0,333,332,1,0,0,0,333,334,1,0,0,0,334,
  	335,1,0,0,0,335,336,5,0,0,1,336,1,1,0,0,0,337,339,3,98,49,0,338,337,1,
  	0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,342,5,159,0,0,341,340,1,0,0,
  	0,341,342,1,0,0,0,342,343,1,0,0,0,343,348,3,4,2,0,344,346,5,159,0,0,345,
  	344,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,349,5,1,0,0,348,345,1,
  	0,0,0,348,349,1,0,0,0,349,3,1,0,0,0,350,372,3,112,56,0,351,372,3,44,22,
  	0,352,372,3,46,23,0,353,372,3,48,24,0,354,372,3,52,26,0,355,372,3,54,
  	27,0,356,372,3,68,34,0,357,372,3,70,35,0,358,372,3,6,3,0,359,372,3,12,
  	6,0,360,372,3,14,7,0,361,372,3,30,15,0,362,372,3,34,17,0,363,372,3,32,
  	16,0,364,372,3,104,52,0,365,372,3,106,53,0,366,372,3,16,8,0,367,372,3,
  	18,9,0,368,372,3,20,10,0,369,372,3,26,13,0,370,372,3,28,14,0,371,350,
  	1,0,0,0,371,351,1,0,0,0,371,352,1,0,0,0,371,353,1,0,0,0,371,354,1,0,0,
  	0,371,355,1,0,0,0,371,356,1,0,0,0,371,357,1,0,0,0,371,358,1,0,0,0,371,
  	359,1,0,0,0,371,360,1,0,0,0,371,361,1,0,0,0,371,362,1,0,0,0,371,363,1,
  	0,0,0,371,364,1,0,0,0,371,365,1,0,0,0,371,366,1,0,0,0,371,367,1,0,0,0,
  	371,368,1,0,0,0,371,369,1,0,0,0,371,370,1,0,0,0,372,5,1,0,0,0,373,374,
  	5,55,0,0,374,375,5,159,0,0,375,384,3,306,153,0,376,378,5,159,0,0,377,
  	376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,381,3,8,4,0,380,382,5,
  	159,0,0,381,380,1,0,0,0,381,382,1,0,0,0,382,385,1,0,0,0,383,385,5,159,
  	0,0,384,377,1,0,0,0,384,383,1,0,0,0,385,386,1,0,0,0,386,387,5,56,0,0,
  	387,388,5,159,0,0,388,393,3,10,5,0,389,391,5,159,0,0,390,389,1,0,0,0,
  	390,391,1,0,0,0,391,392,1,0,0,0,392,394,3,42,21,0,393,390,1,0,0,0,393,
  	394,1,0,0,0,394,7,1,0,0,0,395,397,5,2,0,0,396,398,5,159,0,0,397,396,1,
  	0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,410,3,306,153,0,400,402,5,159,
  	0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,405,5,3,0,0,404,
  	406,5,159,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,0,407,409,
  	3,306,153,0,408,401,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,
  	0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,413,415,5,159,0,0,414,413,1,0,0,
  	0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,5,4,0,0,417,9,1,0,0,0,418,438,
  	3,40,20,0,419,421,5,2,0,0,420,422,5,159,0,0,421,420,1,0,0,0,421,422,1,
  	0,0,0,422,423,1,0,0,0,423,425,3,112,56,0,424,426,5,159,0,0,425,424,1,
  	0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,428,5,4,0,0,428,438,1,0,0,0,
  	429,438,3,292,146,0,430,431,3,292,146,0,431,433,5,5,0,0,432,434,5,159,
  	0,0,433,432,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,436,3,306,153,
  	0,436,438,1,0,0,0,437,418,1,0,0,0,437,419,1,0,0,0,437,429,1,0,0,0,437,
  	430,1,0,0,0,438,11,1,0,0,0,439,440,5,55,0,0,440,441,5,159,0,0,441,442,
  	3,306,153,0,442,443,5,159,0,0,443,444,5,56,0,0,444,445,5,159,0,0,445,
  	447,5,2,0,0,446,448,5,159,0,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,
  	1,0,0,0,449,460,5,145,0,0,450,452,5,159,0,0,451,450,1,0,0,0,451,452,1,
  	0,0,0,452,453,1,0,0,0,453,455,5,3,0,0,454,456,5,159,0,0,455,454,1,0,0,
  	0,455,456,1,0,0,0,456,457,1,0,0,0,457,459,5,145,0,0,458,451,1,0,0,0,459,
  	462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,460,1,
  	0,0,0,463,464,5,4,0,0,464,465,5,159,0,0,465,466,5,114,0,0,466,467,5,159,
  	0,0,467,468,5,57,0,0,468,13,1,0,0,0,469,470,5,55,0,0,470,471,5,159,0,
  	0,471,473,5,2,0,0,472,474,5,159,0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,
  	475,1,0,0,0,475,477,3,112,56,0,476,478,5,159,0,0,477,476,1,0,0,0,477,
  	478,1,0,0,0,478,479,1,0,0,0,479,480,5,4,0,0,480,481,5,159,0,0,481,482,
  	5,80,0,0,482,483,5,159,0,0,483,488,5,145,0,0,484,486,5,159,0,0,485,484,
  	1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,489,3,42,21,0,488,485,1,0,
  	0,0,488,489,1,0,0,0,489,15,1,0,0,0,490,491,5,58,0,0,491,492,5,159,0,0,
  	492,493,5,60,0,0,493,494,5,159,0,0,494,499,5,145,0,0,495,497,5,159,0,
  	0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,500,3,42,21,0,499,
  	496,1,0,0,0,499,500,1,0,0,0,500,17,1,0,0,0,501,502,5,59,0,0,502,503,5,
  	159,0,0,503,504,5,60,0,0,504,505,5,159,0,0,505,506,5,145,0,0,506,19,1,
  	0,0,0,507,508,5,48,0,0,508,509,5,159,0,0,509,514,5,145,0,0,510,511,5,
  	159,0,0,511,512,5,112,0,0,512,513,5,159,0,0,513,515,3,306,153,0,514,510,
  	1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,517,5,159,0,0,517,519,5,2,
  	0,0,518,520,5,159,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,
  	521,522,5,49,0,0,522,523,5,159,0,0,523,532,3,308,154,0,524,526,5,159,
  	0,0,525,524,1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,529,5,3,0,0,528,
  	530,5,159,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,533,
  	3,24,12,0,532,525,1,0,0,0,532,533,1,0,0,0,533,535,1,0,0,0,534,536,5,159,
  	0,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,538,5,4,0,0,538,
  	21,1,0,0,0,539,541,3,308,154,0,540,542,5,159,0,0,541,540,1,0,0,0,541,
  	542,1,0,0,0,542,543,1,0,0,0,543,545,5,6,0,0,544,546,5,159,0,0,545,544,
  	1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,548,3,260,130,0,548,23,1,
  	0,0,0,549,560,3,22,11,0,550,552,5,159,0,0,551,550,1,0,0,0,551,552,1,0,
  	0,0,552,553,1,0,0,0,553,555,5,3,0,0,554,556,5,159,0,0,555,554,1,0,0,0,
  	555,556,1,0,0,0,556,557,1,0,0,0,557,559,3,22,11,0,558,551,1,0,0,0,559,
  	562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,25,1,0,0,0,562,560,1,
  	0,0,0,563,564,5,106,0,0,564,565,5,159,0,0,565,566,3,306,153,0,566,27,
  	1,0,0,0,567,568,5,50,0,0,568,569,5,159,0,0,569,570,3,306,153,0,570,29,
  	1,0,0,0,571,572,5,51,0,0,572,573,5,159,0,0,573,575,3,308,154,0,574,576,
  	5,159,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,579,5,6,
  	0,0,578,580,5,159,0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,
  	581,582,3,212,106,0,582,31,1,0,0,0,583,584,5,52,0,0,584,585,5,159,0,0,
  	585,586,5,104,0,0,586,587,5,159,0,0,587,588,5,62,0,0,588,589,5,159,0,
  	0,589,590,3,306,153,0,590,591,5,159,0,0,591,592,5,134,0,0,592,593,5,159,
  	0,0,593,594,5,145,0,0,594,33,1,0,0,0,595,596,5,102,0,0,596,597,5,159,
  	0,0,597,598,5,53,0,0,598,599,5,159,0,0,599,601,3,276,138,0,600,602,5,
  	159,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,605,5,2,0,
  	0,604,606,5,159,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,
  	609,3,36,18,0,608,607,1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,612,
  	5,159,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,0,613,615,3,38,
  	19,0,614,613,1,0,0,0,614,615,1,0,0,0,615,626,1,0,0,0,616,618,5,159,0,
  	0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,621,5,3,0,0,620,
  	622,5,159,0,0,621,620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,625,
  	3,38,19,0,624,617,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,
  	0,0,627,630,1,0,0,0,628,626,1,0,0,0,629,631,5,159,0,0,630,629,1,0,0,0,
  	630,631,1,0,0,0,631,632,1,0,0,0,632,633,5,4,0,0,633,634,5,159,0,0,634,
  	635,5,112,0,0,635,636,5,159,0,0,636,637,3,212,106,0,637,35,1,0,0,0,638,
  	649,3,308,154,0,639,641,5,159,0,0,640,639,1,0,0,0,640,641,1,0,0,0,641,
  	642,1,0,0,0,642,644,5,3,0,0,643,645,5,159,0,0,644,643,1,0,0,0,644,645,
  	1,0,0,0,645,646,1,0,0,0,646,648,3,308,154,0,647,640,1,0,0,0,648,651,1,
  	0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,37,1,0,0,0,651,649,1,0,0,0,
  	652,654,3,308,154,0,653,655,5,159,0,0,654,653,1,0,0,0,654,655,1,0,0,0,
  	655,656,1,0,0,0,656,657,5,129,0,0,657,659,5,6,0,0,658,660,5,159,0,0,659,
  	658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,662,3,260,130,0,662,39,
  	1,0,0,0,663,665,5,7,0,0,664,666,5,159,0,0,665,664,1,0,0,0,665,666,1,0,
  	0,0,666,667,1,0,0,0,667,678,5,145,0,0,668,670,5,159,0,0,669,668,1,0,0,
  	0,669,670,1,0,0,0,670,671,1,0,0,0,671,673,5,3,0,0,672,674,5,159,0,0,673,
  	672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,677,5,145,0,0,676,669,
  	1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,
  	0,680,678,1,0,0,0,681,697,5,8,0,0,682,697,5,145,0,0,683,685,5,54,0,0,
  	684,686,5,159,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,
  	689,5,2,0,0,688,690,5,159,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,691,
  	1,0,0,0,691,693,5,145,0,0,692,694,5,159,0,0,693,692,1,0,0,0,693,694,1,
  	0,0,0,694,695,1,0,0,0,695,697,5,4,0,0,696,663,1,0,0,0,696,682,1,0,0,0,
  	696,683,1,0,0,0,697,41,1,0,0,0,698,700,5,2,0,0,699,701,5,159,0,0,700,
  	699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,704,3,24,12,0,703,705,
  	5,159,0,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,707,5,4,
  	0,0,707,43,1,0,0,0,708,709,5,102,0,0,709,710,5,159,0,0,710,711,5,61,0,
  	0,711,712,5,159,0,0,712,713,5,62,0,0,713,714,5,159,0,0,714,716,3,306,
  	153,0,715,717,5,159,0,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,
  	0,718,720,5,2,0,0,719,721,5,159,0,0,720,719,1,0,0,0,720,721,1,0,0,0,721,
  	722,1,0,0,0,722,724,3,86,43,0,723,725,5,159,0,0,724,723,1,0,0,0,724,725,
  	1,0,0,0,725,726,1,0,0,0,726,728,5,3,0,0,727,729,5,159,0,0,728,727,1,0,
  	0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,731,3,90,45,0,731,733,1,0,0,0,
  	732,734,5,159,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,
  	736,5,4,0,0,736,45,1,0,0,0,737,738,5,102,0,0,738,739,5,159,0,0,739,740,
  	5,79,0,0,740,741,5,159,0,0,741,742,5,62,0,0,742,743,5,159,0,0,743,745,
  	3,306,153,0,744,746,5,159,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,
  	1,0,0,0,747,749,5,2,0,0,748,750,5,159,0,0,749,748,1,0,0,0,749,750,1,0,
  	0,0,750,751,1,0,0,0,751,753,3,50,25,0,752,754,5,159,0,0,753,752,1,0,0,
  	0,753,754,1,0,0,0,754,763,1,0,0,0,755,757,5,3,0,0,756,758,5,159,0,0,757,
  	756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,761,3,86,43,0,760,762,
  	5,159,0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,764,1,0,0,0,763,755,1,0,
  	0,0,763,764,1,0,0,0,764,773,1,0,0,0,765,767,5,3,0,0,766,768,5,159,0,0,
  	767,766,1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,771,3,308,154,0,770,
  	772,5,159,0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,765,
  	1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,776,5,4,0,0,776,47,1,0,0,
  	0,777,778,5,102,0,0,778,779,5,159,0,0,779,780,5,79,0,0,780,781,5,159,
  	0,0,781,782,5,62,0,0,782,783,5,159,0,0,783,784,5,63,0,0,784,785,5,159,
  	0,0,785,787,3,306,153,0,786,788,5,159,0,0,787,786,1,0,0,0,787,788,1,0,
  	0,0,788,789,1,0,0,0,789,791,5,2,0,0,790,792,5,159,0,0,791,790,1,0,0,0,
  	791,792,1,0,0,0,792,793,1,0,0,0,793,802,3,50,25,0,794,796,5,159,0,0,795,
  	794,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,799,5,3,0,0,798,800,5,
  	159,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,803,3,50,
  	25,0,802,795,1,0,0,0,803,804,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,
  	805,807,1,0,0,0,806,808,5,159,0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,
  	817,1,0,0,0,809,811,5,3,0,0,810,812,5,159,0,0,811,810,1,0,0,0,811,812,
  	1,0,0,0,812,813,1,0,0,0,813,815,3,86,43,0,814,816,5,159,0,0,815,814,1,
  	0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,809,1,0,0,0,817,818,1,0,0,0,
  	818,827,1,0,0,0,819,821,5,3,0,0,820,822,5,159,0,0,821,820,1,0,0,0,821,
  	822,1,0,0,0,822,823,1,0,0,0,823,825,3,308,154,0,824,826,5,159,0,0,825,
  	824,1,0,0,0,825,826,1,0,0,0,826,828,1,0,0,0,827,819,1,0,0,0,827,828,1,
  	0,0,0,828,829,1,0,0,0,829,830,5,4,0,0,830,49,1,0,0,0,831,832,5,56,0,0,
  	832,833,5,159,0,0,833,834,3,306,153,0,834,835,5,159,0,0,835,836,5,80,
  	0,0,836,837,5,159,0,0,837,838,3,306,153,0,838,51,1,0,0,0,839,840,5,102,
  	0,0,840,841,5,159,0,0,841,842,5,64,0,0,842,843,5,159,0,0,843,844,3,306,
  	153,0,844,53,1,0,0,0,845,846,5,102,0,0,846,847,5,159,0,0,847,848,5,65,
  	0,0,848,849,5,159,0,0,849,854,3,306,153,0,850,851,5,159,0,0,851,853,3,
  	56,28,0,852,850,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,
  	0,855,55,1,0,0,0,856,854,1,0,0,0,857,863,3,58,29,0,858,863,3,60,30,0,
  	859,863,3,62,31,0,860,863,3,64,32,0,861,863,3,66,33,0,862,857,1,0,0,0,
  	862,858,1,0,0,0,862,859,1,0,0,0,862,860,1,0,0,0,862,861,1,0,0,0,863,57,
  	1,0,0,0,864,865,5,66,0,0,865,868,5,159,0,0,866,867,5,114,0,0,867,869,
  	5,159,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,871,1,0,0,0,870,872,5,127,
  	0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,873,1,0,0,0,873,874,3,302,151,
  	0,874,59,1,0,0,0,875,876,5,70,0,0,876,877,5,159,0,0,877,885,5,67,0,0,
  	878,879,5,67,0,0,879,881,5,159,0,0,880,882,5,127,0,0,881,880,1,0,0,0,
  	881,882,1,0,0,0,882,883,1,0,0,0,883,885,3,302,151,0,884,875,1,0,0,0,884,
  	878,1,0,0,0,885,61,1,0,0,0,886,887,5,70,0,0,887,888,5,159,0,0,888,896,
  	5,68,0,0,889,890,5,68,0,0,890,892,5,159,0,0,891,893,5,127,0,0,892,891,
  	1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,896,3,302,151,0,895,886,1,
  	0,0,0,895,889,1,0,0,0,896,63,1,0,0,0,897,898,5,69,0,0,898,901,5,159,0,
  	0,899,900,5,108,0,0,900,902,5,159,0,0,901,899,1,0,0,0,901,902,1,0,0,0,
  	902,904,1,0,0,0,903,905,5,127,0,0,904,903,1,0,0,0,904,905,1,0,0,0,905,
  	906,1,0,0,0,906,907,3,302,151,0,907,65,1,0,0,0,908,909,5,70,0,0,909,911,
  	5,159,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,913,5,71,
  	0,0,913,67,1,0,0,0,914,915,5,72,0,0,915,916,5,159,0,0,916,917,7,0,0,0,
  	917,918,5,159,0,0,918,919,3,306,153,0,919,69,1,0,0,0,920,921,5,73,0,0,
  	921,922,5,159,0,0,922,923,5,62,0,0,923,924,5,159,0,0,924,925,3,306,153,
  	0,925,926,5,159,0,0,926,927,3,72,36,0,927,71,1,0,0,0,928,933,3,74,37,
  	0,929,933,3,76,38,0,930,933,3,78,39,0,931,933,3,80,40,0,932,928,1,0,0,
  	0,932,929,1,0,0,0,932,930,1,0,0,0,932,931,1,0,0,0,933,73,1,0,0,0,934,
  	935,5,76,0,0,935,936,5,159,0,0,936,937,3,300,150,0,937,938,5,159,0,0,
  	938,943,3,92,46,0,939,940,5,159,0,0,940,941,5,74,0,0,941,942,5,159,0,
  	0,942,944,3,212,106,0,943,939,1,0,0,0,943,944,1,0,0,0,944,75,1,0,0,0,
  	945,946,5,72,0,0,946,947,5,159,0,0,947,948,3,300,150,0,948,77,1,0,0,0,
  	949,950,5,75,0,0,950,951,5,159,0,0,951,952,5,80,0,0,952,953,5,159,0,0,
  	953,954,3,306,153,0,954,79,1,0,0,0,955,956,5,75,0,0,956,957,5,159,0,0,
  	957,958,3,300,150,0,958,959,5,159,0,0,959,960,5,80,0,0,960,961,5,159,
  	0,0,961,962,3,300,150,0,962,81,1,0,0,0,963,974,3,84,42,0,964,966,5,159,
  	0,0,965,964,1,0,0,0,965,966,1,0,0,0,966,967,1,0,0,0,967,969,5,3,0,0,968,
  	970,5,159,0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,971,973,
  	3,84,42,0,972,965,1,0,0,0,973,976,1,0,0,0,974,972,1,0,0,0,974,975,1,0,
  	0,0,975,83,1,0,0,0,976,974,1,0,0,0,977,978,3,300,150,0,978,979,5,159,
  	0,0,979,980,3,92,46,0,980,85,1,0,0,0,981,992,3,88,44,0,982,984,5,159,
  	0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,987,5,3,0,0,986,
  	988,5,159,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,991,
  	3,88,44,0,990,983,1,0,0,0,991,994,1,0,0,0,992,990,1,0,0,0,992,993,1,0,
  	0,0,993,87,1,0,0,0,994,992,1,0,0,0,995,996,3,300,150,0,996,997,5,159,
  	0,0,997,1002,3,92,46,0,998,999,5,159,0,0,999,1000,5,74,0,0,1000,1001,
  	5,159,0,0,1001,1003,3,212,106,0,1002,998,1,0,0,0,1002,1003,1,0,0,0,1003,
  	89,1,0,0,0,1004,1005,5,77,0,0,1005,1006,5,159,0,0,1006,1008,5,78,0,0,
  	1007,1009,5,159,0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1010,1,0,
  	0,0,1010,1012,5,2,0,0,1011,1013,5,159,0,0,1012,1011,1,0,0,0,1012,1013,
  	1,0,0,0,1013,1014,1,0,0,0,1014,1016,3,300,150,0,1015,1017,5,159,0,0,1016,
  	1015,1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1019,5,4,0,0,1019,
  	91,1,0,0,0,1020,1021,6,46,-1,0,1021,1095,3,308,154,0,1022,1024,5,95,0,
  	0,1023,1025,5,159,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,
  	0,0,0,1026,1028,5,2,0,0,1027,1029,5,159,0,0,1028,1027,1,0,0,0,1028,1029,
  	1,0,0,0,1029,1030,1,0,0,0,1030,1032,3,82,41,0,1031,1033,5,159,0,0,1032,
  	1031,1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1035,5,4,0,0,1035,
  	1095,1,0,0,0,1036,1038,3,308,154,0,1037,1039,5,159,0,0,1038,1037,1,0,
  	0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,5,2,0,0,1041,1043,5,
  	159,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,1046,
  	3,82,41,0,1045,1047,5,159,0,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,
  	1048,1,0,0,0,1048,1049,5,4,0,0,1049,1095,1,0,0,0,1050,1052,3,308,154,
  	0,1051,1053,5,159,0,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,
  	0,0,0,1054,1056,5,2,0,0,1055,1057,5,159,0,0,1056,1055,1,0,0,0,1056,1057,
  	1,0,0,0,1057,1058,1,0,0,0,1058,1060,3,92,46,0,1059,1061,5,159,0,0,1060,
  	1059,1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,1064,5,3,0,0,1063,
  	1065,5,159,0,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,0,0,0,
  	1066,1068,3,92,46,0,1067,1069,5,159,0,0,1068,1067,1,0,0,0,1068,1069,1,
  	0,0,0,1069,1070,1,0,0,0,1070,1071,5,4,0,0,1071,1095,1,0,0,0,1072,1074,
  	5,81,0,0,1073,1075,5,159,0,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,
  	1076,1,0,0,0,1076,1078,5,2,0,0,1077,1079,5,159,0,0,1078,1077,1,0,0,0,
  	1078,1079,1,0,0,0,1079,1080,1,0,0,0,1080,1082,3,302,151,0,1081,1083,5,
  	159,0,0,1082,1081,1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1086,
  	5,3,0,0,1085,1087,5,159,0,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,
  	1088,1,0,0,0,1088,1090,3,302,151,0,1089,1091,5,159,0,0,1090,1089,1,0,
  	0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1093,5,4,0,0,1093,1095,1,
  	0,0,0,1094,1020,1,0,0,0,1094,1022,1,0,0,0,1094,1036,1,0,0,0,1094,1050,
  	1,0,0,0,1094,1072,1,0,0,0,1095,1100,1,0,0,0,1096,1097,10,5,0,0,1097,1099,
  	3,94,47,0,1098,1096,1,0,0,0,1099,1102,1,0,0,0,1100,1098,1,0,0,0,1100,
  	1101,1,0,0,0,1101,93,1,0,0,0,1102,1100,1,0,0,0,1103,1107,3,96,48,0,1104,
  	1106,3,96,48,0,1105,1104,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,
  	1107,1108,1,0,0,0,1108,95,1,0,0,0,1109,1107,1,0,0,0,1110,1112,5,7,0,0,
  	1111,1113,3,302,151,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,
  	0,0,0,1114,1115,5,8,0,0,1115,97,1,0,0,0,1116,1119,3,100,50,0,1117,1119,
  	3,102,51,0,1118,1116,1,0,0,0,1118,1117,1,0,0,0,1119,99,1,0,0,0,1120,1122,
  	5,159,0,0,1121,1120,1,0,0,0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,1123,
  	1124,1,0,0,0,1124,1126,1,0,0,0,1125,1123,1,0,0,0,1126,1127,5,82,0,0,1127,
  	101,1,0,0,0,1128,1130,5,159,0,0,1129,1128,1,0,0,0,1130,1133,1,0,0,0,1131,
  	1129,1,0,0,0,1131,1132,1,0,0,0,1132,1134,1,0,0,0,1133,1131,1,0,0,0,1134,
  	1135,5,83,0,0,1135,103,1,0,0,0,1136,1137,5,84,0,0,1137,1138,5,159,0,0,
  	1138,1151,5,85,0,0,1139,1140,5,84,0,0,1140,1141,5,159,0,0,1141,1142,5,
  	85,0,0,1142,1143,5,159,0,0,1143,1144,5,86,0,0,1144,1145,5,159,0,0,1145,
  	1151,5,87,0,0,1146,1151,5,89,0,0,1147,1151,5,90,0,0,1148,1151,5,91,0,
  	0,1149,1151,5,92,0,0,1150,1136,1,0,0,0,1150,1139,1,0,0,0,1150,1146,1,
  	0,0,0,1150,1147,1,0,0,0,1150,1148,1,0,0,0,1150,1149,1,0,0,0,1151,105,
  	1,0,0,0,1152,1155,3,108,54,0,1153,1155,3,110,55,0,1154,1152,1,0,0,0,1154,
  	1153,1,0,0,0,1155,107,1,0,0,0,1156,1157,5,97,0,0,1157,1158,5,159,0,0,
  	1158,1159,5,94,0,0,1159,1162,5,159,0,0,1160,1163,5,145,0,0,1161,1163,
  	3,292,146,0,1162,1160,1,0,0,0,1162,1161,1,0,0,0,1163,109,1,0,0,0,1164,
  	1165,5,93,0,0,1165,1166,5,159,0,0,1166,1167,3,292,146,0,1167,111,1,0,
  	0,0,1168,1169,3,114,57,0,1169,113,1,0,0,0,1170,1177,3,118,59,0,1171,1173,
  	5,159,0,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,1174,1,0,0,0,1174,
  	1176,3,116,58,0,1175,1172,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,0,0,
  	1177,1178,1,0,0,0,1178,1192,1,0,0,0,1179,1177,1,0,0,0,1180,1182,3,156,
  	78,0,1181,1183,5,159,0,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1185,
  	1,0,0,0,1184,1180,1,0,0,0,1185,1186,1,0,0,0,1186,1184,1,0,0,0,1186,1187,
  	1,0,0,0,1187,1188,1,0,0,0,1188,1189,3,118,59,0,1189,1190,6,57,-1,0,1190,
  	1192,1,0,0,0,1191,1170,1,0,0,0,1191,1184,1,0,0,0,1192,115,1,0,0,0,1193,
  	1194,5,95,0,0,1194,1195,5,159,0,0,1195,1197,5,96,0,0,1196,1198,5,159,
  	0,0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,1199,1,0,0,0,1199,1206,3,
  	118,59,0,1200,1202,5,95,0,0,1201,1203,5,159,0,0,1202,1201,1,0,0,0,1202,
  	1203,1,0,0,0,1203,1204,1,0,0,0,1204,1206,3,118,59,0,1205,1193,1,0,0,0,
  	1205,1200,1,0,0,0,1206,117,1,0,0,0,1207,1210,3,120,60,0,1208,1210,3,122,
  	61,0,1209,1207,1,0,0,0,1209,1208,1,0,0,0,1210,119,1,0,0,0,1211,1213,3,
  	128,64,0,1212,1214,5,159,0,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,
  	1216,1,0,0,0,1215,1211,1,0,0,0,1216,1219,1,0,0,0,1217,1215,1,0,0,0,1217,
  	1218,1,0,0,0,1218,1220,1,0,0,0,1219,1217,1,0,0,0,1220,1257,3,156,78,0,
  	1221,1223,3,128,64,0,1222,1224,5,159,0,0,1223,1222,1,0,0,0,1223,1224,
  	1,0,0,0,1224,1226,1,0,0,0,1225,1221,1,0,0,0,1226,1229,1,0,0,0,1227,1225,
  	1,0,0,0,1227,1228,1,0,0,0,1228,1230,1,0,0,0,1229,1227,1,0,0,0,1230,1237,
  	3,126,63,0,1231,1233,5,159,0,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,
  	1234,1,0,0,0,1234,1236,3,126,63,0,1235,1232,1,0,0,0,1236,1239,1,0,0,0,
  	1237,1235,1,0,0,0,1237,1238,1,0,0,0,1238,1244,1,0,0,0,1239,1237,1,0,0,
  	0,1240,1242,5,159,0,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,
  	0,0,0,1243,1245,3,156,78,0,1244,1241,1,0,0,0,1244,1245,1,0,0,0,1245,1257,
  	1,0,0,0,1246,1248,3,128,64,0,1247,1249,5,159,0,0,1248,1247,1,0,0,0,1248,
  	1249,1,0,0,0,1249,1251,1,0,0,0,1250,1246,1,0,0,0,1251,1252,1,0,0,0,1252,
  	1250,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,1255,6,60,-1,0,
  	1255,1257,1,0,0,0,1256,1217,1,0,0,0,1256,1227,1,0,0,0,1256,1250,1,0,0,
  	0,1257,121,1,0,0,0,1258,1260,3,124,62,0,1259,1261,5,159,0,0,1260,1259,
  	1,0,0,0,1260,1261,1,0,0,0,1261,1263,1,0,0,0,1262,1258,1,0,0,0,1263,1264,
  	1,0,0,0,1264,1262,1,0,0,0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,1267,
  	3,120,60,0,1267,123,1,0,0,0,1268,1270,3,128,64,0,1269,1271,5,159,0,0,
  	1270,1269,1,0,0,0,1270,1271,1,0,0,0,1271,1273,1,0,0,0,1272,1268,1,0,0,
  	0,1273,1276,1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,1283,1,0,
  	0,0,1276,1274,1,0,0,0,1277,1279,3,126,63,0,1278,1280,5,159,0,0,1279,1278,
  	1,0,0,0,1279,1280,1,0,0,0,1280,1282,1,0,0,0,1281,1277,1,0,0,0,1282,1285,
  	1,0,0,0,1283,1281,1,0,0,0,1283,1284,1,0,0,0,1284,1286,1,0,0,0,1285,1283,
  	1,0,0,0,1286,1287,3,154,77,0,1287,125,1,0,0,0,1288,1293,3,142,71,0,1289,
  	1293,3,144,72,0,1290,1293,3,148,74,0,1291,1293,3,152,76,0,1292,1288,1,
  	0,0,0,1292,1289,1,0,0,0,1292,1290,1,0,0,0,1292,1291,1,0,0,0,1293,127,
  	1,0,0,0,1294,1299,3,134,67,0,1295,1299,3,140,70,0,1296,1299,3,132,66,
  	0,1297,1299,3,130,65,0,1298,1294,1,0,0,0,1298,1295,1,0,0,0,1298,1296,
  	1,0,0,0,1298,1297,1,0,0,0,1299,129,1,0,0,0,1300,1318,5,97,0,0,1301,1302,
  	5,159,0,0,1302,1303,5,108,0,0,1303,1304,5,159,0,0,1304,1306,5,98,0,0,
  	1305,1307,5,159,0,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,
  	0,0,1308,1310,5,2,0,0,1309,1311,5,159,0,0,1310,1309,1,0,0,0,1310,1311,
  	1,0,0,0,1311,1312,1,0,0,0,1312,1314,3,82,41,0,1313,1315,5,159,0,0,1314,
  	1313,1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1317,5,4,0,0,1317,
  	1319,1,0,0,0,1318,1301,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,
  	1321,5,159,0,0,1321,1322,5,56,0,0,1322,1323,5,159,0,0,1323,1328,3,10,
  	5,0,1324,1326,5,159,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1327,
  	1,0,0,0,1327,1329,3,42,21,0,1328,1325,1,0,0,0,1328,1329,1,0,0,0,1329,
  	1334,1,0,0,0,1330,1332,5,159,0,0,1331,1330,1,0,0,0,1331,1332,1,0,0,0,
  	1332,1333,1,0,0,0,1333,1335,3,172,86,0,1334,1331,1,0,0,0,1334,1335,1,
  	0,0,0,1335,131,1,0,0,0,1336,1337,5,51,0,0,1337,1338,5,159,0,0,1338,1343,
  	3,274,137,0,1339,1341,5,159,0,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,
  	1342,1,0,0,0,1342,1344,3,172,86,0,1343,1340,1,0,0,0,1343,1344,1,0,0,0,
  	1344,133,1,0,0,0,1345,1346,5,99,0,0,1346,1348,5,159,0,0,1347,1345,1,0,
  	0,0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1351,5,100,0,0,1350,1352,
  	5,159,0,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,1353,1,0,0,0,1353,
  	1358,3,174,87,0,1354,1356,5,159,0,0,1355,1354,1,0,0,0,1355,1356,1,0,0,
  	0,1356,1357,1,0,0,0,1357,1359,3,136,68,0,1358,1355,1,0,0,0,1358,1359,
  	1,0,0,0,1359,1361,1,0,0,0,1360,1362,5,159,0,0,1361,1360,1,0,0,0,1361,
  	1362,1,0,0,0,1362,1367,1,0,0,0,1363,1365,5,159,0,0,1364,1363,1,0,0,0,
  	1364,1365,1,0,0,0,1365,1366,1,0,0,0,1366,1368,3,172,86,0,1367,1364,1,
  	0,0,0,1367,1368,1,0,0,0,1368,135,1,0,0,0,1369,1371,5,9,0,0,1370,1372,
  	5,159,0,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,1373,1,0,0,0,1373,
  	1384,3,138,69,0,1374,1376,5,159,0,0,1375,1374,1,0,0,0,1375,1376,1,0,0,
  	0,1376,1377,1,0,0,0,1377,1379,5,3,0,0,1378,1380,5,159,0,0,1379,1378,1,
  	0,0,0,1379,1380,1,0,0,0,1380,1381,1,0,0,0,1381,1383,3,138,69,0,1382,1375,
  	1,0,0,0,1383,1386,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,0,0,0,1385,1388,
  	1,0,0,0,1386,1384,1,0,0,0,1387,1389,5,159,0,0,1388,1387,1,0,0,0,1388,
  	1389,1,0,0,0,1389,1390,1,0,0,0,1390,1391,5,9,0,0,1391,137,1,0,0,0,1392,
  	1394,5,2,0,0,1393,1395,5,159,0,0,1394,1393,1,0,0,0,1394,1395,1,0,0,0,
  	1395,1396,1,0,0,0,1396,1407,3,308,154,0,1397,1399,5,159,0,0,1398,1397,
  	1,0,0,0,1398,1399,1,0,0,0,1399,1400,1,0,0,0,1400,1402,5,3,0,0,1401,1403,
  	5,159,0,0,1402,1401,1,0,0,0,1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,
  	1406,3,308,154,0,1405,1398,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,
  	0,1407,1408,1,0,0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1410,1412,5,159,
  	0,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,1413,1,0,0,0,1413,1414,5,
  	4,0,0,1414,1417,1,0,0,0,1415,1417,3,308,154,0,1416,1392,1,0,0,0,1416,
  	1415,1,0,0,0,1417,139,1,0,0,0,1418,1420,5,101,0,0,1419,1421,5,159,0,0,
  	1420,1419,1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,0,0,1422,1423,3,212,
  	106,0,1423,1424,5,159,0,0,1424,1425,5,112,0,0,1425,1426,5,159,0,0,1426,
  	1427,3,292,146,0,1427,141,1,0,0,0,1428,1430,5,102,0,0,1429,1431,5,159,
  	0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,1433,3,
  	174,87,0,1433,143,1,0,0,0,1434,1436,5,103,0,0,1435,1437,5,159,0,0,1436,
  	1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,1,0,0,0,1438,1443,3,174,87,0,
  	1439,1440,5,159,0,0,1440,1442,3,146,73,0,1441,1439,1,0,0,0,1442,1445,
  	1,0,0,0,1443,1441,1,0,0,0,1443,1444,1,0,0,0,1444,145,1,0,0,0,1445,1443,
  	1,0,0,0,1446,1447,5,104,0,0,1447,1448,5,159,0,0,1448,1449,5,100,0,0,1449,
  	1450,5,159,0,0,1450,1457,3,148,74,0,1451,1452,5,104,0,0,1452,1453,5,159,
  	0,0,1453,1454,5,102,0,0,1454,1455,5,159,0,0,1455,1457,3,148,74,0,1456,
  	1446,1,0,0,0,1456,1451,1,0,0,0,1457,147,1,0,0,0,1458,1460,5,105,0,0,1459,
  	1461,5,159,0,0,1460,1459,1,0,0,0,1460,1461,1,0,0,0,1461,1462,1,0,0,0,
  	1462,1473,3,150,75,0,1463,1465,5,159,0,0,1464,1463,1,0,0,0,1464,1465,
  	1,0,0,0,1465,1466,1,0,0,0,1466,1468,5,3,0,0,1467,1469,5,159,0,0,1468,
  	1467,1,0,0,0,1468,1469,1,0,0,0,1469,1470,1,0,0,0,1470,1472,3,150,75,0,
  	1471,1464,1,0,0,0,1472,1475,1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,
  	0,1474,149,1,0,0,0,1475,1473,1,0,0,0,1476,1478,3,298,149,0,1477,1479,
  	5,159,0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,1480,
  	1482,5,6,0,0,1481,1483,5,159,0,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,
  	1483,1484,1,0,0,0,1484,1485,3,212,106,0,1485,151,1,0,0,0,1486,1487,5,
  	106,0,0,1487,1489,5,159,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,
  	1490,1,0,0,0,1490,1492,5,107,0,0,1491,1493,5,159,0,0,1492,1491,1,0,0,
  	0,1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1505,3,212,106,0,1495,1497,
  	5,159,0,0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,
  	1500,5,3,0,0,1499,1501,5,159,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,
  	1501,1502,1,0,0,0,1502,1504,3,212,106,0,1503,1496,1,0,0,0,1504,1507,1,
  	0,0,0,1505,1503,1,0,0,0,1505,1506,1,0,0,0,1506,153,1,0,0,0,1507,1505,
  	1,0,0,0,1508,1509,5,108,0,0,1509,1514,3,158,79,0,1510,1512,5,159,0,0,
  	1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,1513,1515,3,172,
  	86,0,1514,1511,1,0,0,0,1514,1515,1,0,0,0,1515,155,1,0,0,0,1516,1517,5,
  	109,0,0,1517,1518,3,158,79,0,1518,157,1,0,0,0,1519,1521,5,159,0,0,1520,
  	1519,1,0,0,0,1520,1521,1,0,0,0,1521,1522,1,0,0,0,1522,1524,5,110,0,0,
  	1523,1520,1,0,0,0,1523,1524,1,0,0,0,1524,1525,1,0,0,0,1525,1526,5,159,
  	0,0,1526,1529,3,160,80,0,1527,1528,5,159,0,0,1528,1530,3,164,82,0,1529,
  	1527,1,0,0,0,1529,1530,1,0,0,0,1530,1533,1,0,0,0,1531,1532,5,159,0,0,
  	1532,1534,3,166,83,0,1533,1531,1,0,0,0,1533,1534,1,0,0,0,1534,1537,1,
  	0,0,0,1535,1536,5,159,0,0,1536,1538,3,168,84,0,1537,1535,1,0,0,0,1537,
  	1538,1,0,0,0,1538,159,1,0,0,0,1539,1550,5,111,0,0,1540,1542,5,159,0,0,
  	1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,1545,5,3,0,
  	0,1544,1546,5,159,0,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,1547,1,
  	0,0,0,1547,1549,3,162,81,0,1548,1541,1,0,0,0,1549,1552,1,0,0,0,1550,1548,
  	1,0,0,0,1550,1551,1,0,0,0,1551,1568,1,0,0,0,1552,1550,1,0,0,0,1553,1564,
  	3,162,81,0,1554,1556,5,159,0,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,
  	1557,1,0,0,0,1557,1559,5,3,0,0,1558,1560,5,159,0,0,1559,1558,1,0,0,0,
  	1559,1560,1,0,0,0,1560,1561,1,0,0,0,1561,1563,3,162,81,0,1562,1555,1,
  	0,0,0,1563,1566,1,0,0,0,1564,1562,1,0,0,0,1564,1565,1,0,0,0,1565,1568,
  	1,0,0,0,1566,1564,1,0,0,0,1567,1539,1,0,0,0,1567,1553,1,0,0,0,1568,161,
  	1,0,0,0,1569,1570,3,212,106,0,1570,1571,5,159,0,0,1571,1572,5,112,0,0,
  	1572,1573,5,159,0,0,1573,1574,3,292,146,0,1574,1577,1,0,0,0,1575,1577,
  	3,212,106,0,1576,1569,1,0,0,0,1576,1575,1,0,0,0,1577,163,1,0,0,0,1578,
  	1579,5,113,0,0,1579,1580,5,159,0,0,1580,1581,5,114,0,0,1581,1582,5,159,
  	0,0,1582,1590,3,170,85,0,1583,1585,5,3,0,0,1584,1586,5,159,0,0,1585,1584,
  	1,0,0,0,1585,1586,1,0,0,0,1586,1587,1,0,0,0,1587,1589,3,170,85,0,1588,
  	1583,1,0,0,0,1589,1592,1,0,0,0,1590,1588,1,0,0,0,1590,1591,1,0,0,0,1591,
  	165,1,0,0,0,1592,1590,1,0,0,0,1593,1594,5,115,0,0,1594,1595,5,159,0,0,
  	1595,1596,3,212,106,0,1596,167,1,0,0,0,1597,1598,5,116,0,0,1598,1599,
  	5,159,0,0,1599,1600,3,212,106,0,1600,169,1,0,0,0,1601,1606,3,212,106,
  	0,1602,1604,5,159,0,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1605,1,
  	0,0,0,1605,1607,7,1,0,0,1606,1603,1,0,0,0,1606,1607,1,0,0,0,1607,171,
  	1,0,0,0,1608,1609,5,121,0,0,1609,1610,5,159,0,0,1610,1611,3,212,106,0,
  	1611,173,1,0,0,0,1612,1623,3,176,88,0,1613,1615,5,159,0,0,1614,1613,1,
  	0,0,0,1614,1615,1,0,0,0,1615,1616,1,0,0,0,1616,1618,5,3,0,0,1617,1619,
  	5,159,0,0,1618,1617,1,0,0,0,1618,1619,1,0,0,0,1619,1620,1,0,0,0,1620,
  	1622,3,176,88,0,1621,1614,1,0,0,0,1622,1625,1,0,0,0,1623,1621,1,0,0,0,
  	1623,1624,1,0,0,0,1624,175,1,0,0,0,1625,1623,1,0,0,0,1626,1628,3,292,
  	146,0,1627,1629,5,159,0,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1630,
  	1,0,0,0,1630,1632,5,6,0,0,1631,1633,5,159,0,0,1632,1631,1,0,0,0,1632,
  	1633,1,0,0,0,1633,1634,1,0,0,0,1634,1635,3,178,89,0,1635,1638,1,0,0,0,
  	1636,1638,3,178,89,0,1637,1626,1,0,0,0,1637,1636,1,0,0,0,1638,177,1,0,
  	0,0,1639,1640,3,180,90,0,1640,179,1,0,0,0,1641,1648,3,182,91,0,1642,1644,
  	5,159,0,0,1643,1642,1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,
  	1647,3,184,92,0,1646,1643,1,0,0,0,1647,1650,1,0,0,0,1648,1646,1,0,0,0,
  	1648,1649,1,0,0,0,1649,1656,1,0,0,0,1650,1648,1,0,0,0,1651,1652,5,2,0,
  	0,1652,1653,3,180,90,0,1653,1654,5,4,0,0,1654,1656,1,0,0,0,1655,1641,
  	1,0,0,0,1655,1651,1,0,0,0,1656,181,1,0,0,0,1657,1659,5,2,0,0,1658,1660,
  	5,159,0,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,1665,1,0,0,0,1661,
  	1663,3,292,146,0,1662,1664,5,159,0,0,1663,1662,1,0,0,0,1663,1664,1,0,
  	0,0,1664,1666,1,0,0,0,1665,1661,1,0,0,0,1665,1666,1,0,0,0,1666,1671,1,
  	0,0,0,1667,1669,3,194,97,0,1668,1670,5,159,0,0,1669,1668,1,0,0,0,1669,
  	1670,1,0,0,0,1670,1672,1,0,0,0,1671,1667,1,0,0,0,1671,1672,1,0,0,0,1672,
  	1677,1,0,0,0,1673,1675,3,190,95,0,1674,1676,5,159,0,0,1675,1674,1,0,0,
  	0,1675,1676,1,0,0,0,1676,1678,1,0,0,0,1677,1673,1,0,0,0,1677,1678,1,0,
  	0,0,1678,1679,1,0,0,0,1679,1680,5,4,0,0,1680,183,1,0,0,0,1681,1683,3,
  	186,93,0,1682,1684,5,159,0,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,
  	1685,1,0,0,0,1685,1686,3,182,91,0,1686,185,1,0,0,0,1687,1689,3,312,156,
  	0,1688,1690,5,159,0,0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,1691,1,
  	0,0,0,1691,1693,3,316,158,0,1692,1694,5,159,0,0,1693,1692,1,0,0,0,1693,
  	1694,1,0,0,0,1694,1696,1,0,0,0,1695,1697,3,188,94,0,1696,1695,1,0,0,0,
  	1696,1697,1,0,0,0,1697,1699,1,0,0,0,1698,1700,5,159,0,0,1699,1698,1,0,
  	0,0,1699,1700,1,0,0,0,1700,1701,1,0,0,0,1701,1702,3,316,158,0,1702,1732,
  	1,0,0,0,1703,1705,3,316,158,0,1704,1706,5,159,0,0,1705,1704,1,0,0,0,1705,
  	1706,1,0,0,0,1706,1708,1,0,0,0,1707,1709,3,188,94,0,1708,1707,1,0,0,0,
  	1708,1709,1,0,0,0,1709,1711,1,0,0,0,1710,1712,5,159,0,0,1711,1710,1,0,
  	0,0,1711,1712,1,0,0,0,1712,1713,1,0,0,0,1713,1715,3,316,158,0,1714,1716,
  	5,159,0,0,1715,1714,1,0,0,0,1715,1716,1,0,0,0,1716,1717,1,0,0,0,1717,
  	1718,3,314,157,0,1718,1732,1,0,0,0,1719,1721,3,316,158,0,1720,1722,5,
  	159,0,0,1721,1720,1,0,0,0,1721,1722,1,0,0,0,1722,1724,1,0,0,0,1723,1725,
  	3,188,94,0,1724,1723,1,0,0,0,1724,1725,1,0,0,0,1725,1727,1,0,0,0,1726,
  	1728,5,159,0,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,1729,1,0,0,0,
  	1729,1730,3,316,158,0,1730,1732,1,0,0,0,1731,1687,1,0,0,0,1731,1703,1,
  	0,0,0,1731,1719,1,0,0,0,1732,187,1,0,0,0,1733,1735,5,7,0,0,1734,1736,
  	5,159,0,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1741,1,0,0,0,1737,
  	1739,3,292,146,0,1738,1740,5,159,0,0,1739,1738,1,0,0,0,1739,1740,1,0,
  	0,0,1740,1742,1,0,0,0,1741,1737,1,0,0,0,1741,1742,1,0,0,0,1742,1747,1,
  	0,0,0,1743,1745,3,192,96,0,1744,1746,5,159,0,0,1745,1744,1,0,0,0,1745,
  	1746,1,0,0,0,1746,1748,1,0,0,0,1747,1743,1,0,0,0,1747,1748,1,0,0,0,1748,
  	1753,1,0,0,0,1749,1751,3,196,98,0,1750,1752,5,159,0,0,1751,1750,1,0,0,
  	0,1751,1752,1,0,0,0,1752,1754,1,0,0,0,1753,1749,1,0,0,0,1753,1754,1,0,
  	0,0,1754,1759,1,0,0,0,1755,1757,3,190,95,0,1756,1758,5,159,0,0,1757,1756,
  	1,0,0,0,1757,1758,1,0,0,0,1758,1760,1,0,0,0,1759,1755,1,0,0,0,1759,1760,
  	1,0,0,0,1760,1761,1,0,0,0,1761,1762,5,8,0,0,1762,189,1,0,0,0,1763,1765,
  	5,10,0,0,1764,1766,5,159,0,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,1766,
  	1800,1,0,0,0,1767,1769,3,300,150,0,1768,1770,5,159,0,0,1769,1768,1,0,
  	0,0,1769,1770,1,0,0,0,1770,1771,1,0,0,0,1771,1773,5,129,0,0,1772,1774,
  	5,159,0,0,1773,1772,1,0,0,0,1773,1774,1,0,0,0,1774,1775,1,0,0,0,1775,
  	1777,3,212,106,0,1776,1778,5,159,0,0,1777,1776,1,0,0,0,1777,1778,1,0,
  	0,0,1778,1797,1,0,0,0,1779,1781,5,3,0,0,1780,1782,5,159,0,0,1781,1780,
  	1,0,0,0,1781,1782,1,0,0,0,1782,1783,1,0,0,0,1783,1785,3,300,150,0,1784,
  	1786,5,159,0,0,1785,1784,1,0,0,0,1785,1786,1,0,0,0,1786,1787,1,0,0,0,
  	1787,1789,5,129,0,0,1788,1790,5,159,0,0,1789,1788,1,0,0,0,1789,1790,1,
  	0,0,0,1790,1791,1,0,0,0,1791,1793,3,212,106,0,1792,1794,5,159,0,0,1793,
  	1792,1,0,0,0,1793,1794,1,0,0,0,1794,1796,1,0,0,0,1795,1779,1,0,0,0,1796,
  	1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,1,0,0,0,1798,1801,1,0,0,0,1799,
  	1797,1,0,0,0,1800,1767,1,0,0,0,1800,1801,1,0,0,0,1801,1802,1,0,0,0,1802,
  	1803,5,11,0,0,1803,191,1,0,0,0,1804,1806,5,129,0,0,1805,1807,5,159,0,
  	0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,1822,3,210,
  	105,0,1809,1811,5,159,0,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1812,
  	1,0,0,0,1812,1814,5,12,0,0,1813,1815,5,129,0,0,1814,1813,1,0,0,0,1814,
  	1815,1,0,0,0,1815,1817,1,0,0,0,1816,1818,5,159,0,0,1817,1816,1,0,0,0,
  	1817,1818,1,0,0,0,1818,1819,1,0,0,0,1819,1821,3,210,105,0,1820,1810,1,
  	0,0,0,1821,1824,1,0,0,0,1822,1820,1,0,0,0,1822,1823,1,0,0,0,1823,193,
  	1,0,0,0,1824,1822,1,0,0,0,1825,1827,5,129,0,0,1826,1828,5,159,0,0,1827,
  	1826,1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,0,1829,1845,3,208,104,
  	0,1830,1832,5,159,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,
  	0,0,0,1833,1835,5,12,0,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1837,
  	1,0,0,0,1836,1838,5,129,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,
  	1840,1,0,0,0,1839,1841,5,159,0,0,1840,1839,1,0,0,0,1840,1841,1,0,0,0,
  	1841,1842,1,0,0,0,1842,1844,3,208,104,0,1843,1831,1,0,0,0,1844,1847,1,
  	0,0,0,1845,1843,1,0,0,0,1845,1846,1,0,0,0,1846,195,1,0,0,0,1847,1845,
  	1,0,0,0,1848,1850,5,111,0,0,1849,1851,5,159,0,0,1850,1849,1,0,0,0,1850,
  	1851,1,0,0,0,1851,1856,1,0,0,0,1852,1857,5,122,0,0,1853,1854,5,96,0,0,
  	1854,1855,5,159,0,0,1855,1857,5,122,0,0,1856,1852,1,0,0,0,1856,1853,1,
  	0,0,0,1856,1857,1,0,0,0,1857,1859,1,0,0,0,1858,1860,5,159,0,0,1859,1858,
  	1,0,0,0,1859,1860,1,0,0,0,1860,1875,1,0,0,0,1861,1863,3,204,102,0,1862,
  	1861,1,0,0,0,1862,1863,1,0,0,0,1863,1865,1,0,0,0,1864,1866,5,159,0,0,
  	1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,1867,1,0,0,0,1867,1869,5,13,
  	0,0,1868,1870,5,159,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,1872,
  	1,0,0,0,1871,1873,3,206,103,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,
  	1876,1,0,0,0,1874,1876,3,302,151,0,1875,1862,1,0,0,0,1875,1874,1,0,0,
  	0,1875,1876,1,0,0,0,1876,1881,1,0,0,0,1877,1879,5,159,0,0,1878,1877,1,
  	0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,1882,3,198,99,0,1881,1878,
  	1,0,0,0,1881,1882,1,0,0,0,1882,197,1,0,0,0,1883,1885,5,2,0,0,1884,1886,
  	5,159,0,0,1885,1884,1,0,0,0,1885,1886,1,0,0,0,1886,1887,1,0,0,0,1887,
  	1889,3,292,146,0,1888,1890,5,159,0,0,1889,1888,1,0,0,0,1889,1890,1,0,
  	0,0,1890,1891,1,0,0,0,1891,1893,5,3,0,0,1892,1894,5,159,0,0,1893,1892,
  	1,0,0,0,1893,1894,1,0,0,0,1894,1895,1,0,0,0,1895,1904,3,292,146,0,1896,
  	1898,5,159,0,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,
  	1899,1901,5,12,0,0,1900,1902,5,159,0,0,1901,1900,1,0,0,0,1901,1902,1,
  	0,0,0,1902,1903,1,0,0,0,1903,1905,3,172,86,0,1904,1897,1,0,0,0,1904,1905,
  	1,0,0,0,1905,1925,1,0,0,0,1906,1908,5,159,0,0,1907,1906,1,0,0,0,1907,
  	1908,1,0,0,0,1908,1909,1,0,0,0,1909,1911,5,12,0,0,1910,1912,5,159,0,0,
  	1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1913,1,0,0,0,1913,1915,3,202,
  	101,0,1914,1916,5,159,0,0,1915,1914,1,0,0,0,1915,1916,1,0,0,0,1916,1917,
  	1,0,0,0,1917,1919,5,3,0,0,1918,1920,5,159,0,0,1919,1918,1,0,0,0,1919,
  	1920,1,0,0,0,1920,1921,1,0,0,0,1921,1923,3,200,100,0,1922,1924,5,159,
  	0,0,1923,1922,1,0,0,0,1923,1924,1,0,0,0,1924,1926,1,0,0,0,1925,1907,1,
  	0,0,0,1925,1926,1,0,0,0,1926,1927,1,0,0,0,1927,1928,5,4,0,0,1928,199,
  	1,0,0,0,1929,1931,5,10,0,0,1930,1932,5,159,0,0,1931,1930,1,0,0,0,1931,
  	1932,1,0,0,0,1932,1934,1,0,0,0,1933,1935,3,160,80,0,1934,1933,1,0,0,0,
  	1934,1935,1,0,0,0,1935,1937,1,0,0,0,1936,1938,5,159,0,0,1937,1936,1,0,
  	0,0,1937,1938,1,0,0,0,1938,1939,1,0,0,0,1939,1940,5,11,0,0,1940,201,1,
  	0,0,0,1941,1943,5,10,0,0,1942,1944,5,159,0,0,1943,1942,1,0,0,0,1943,1944,
  	1,0,0,0,1944,1946,1,0,0,0,1945,1947,3,160,80,0,1946,1945,1,0,0,0,1946,
  	1947,1,0,0,0,1947,1949,1,0,0,0,1948,1950,5,159,0,0,1949,1948,1,0,0,0,
  	1949,1950,1,0,0,0,1950,1951,1,0,0,0,1951,1952,5,11,0,0,1952,203,1,0,0,
  	0,1953,1954,5,147,0,0,1954,205,1,0,0,0,1955,1956,5,147,0,0,1956,207,1,
  	0,0,0,1957,1958,3,306,153,0,1958,209,1,0,0,0,1959,1960,3,306,153,0,1960,
  	211,1,0,0,0,1961,1962,3,214,107,0,1962,213,1,0,0,0,1963,1970,3,216,108,
  	0,1964,1965,5,159,0,0,1965,1966,5,123,0,0,1966,1967,5,159,0,0,1967,1969,
  	3,216,108,0,1968,1964,1,0,0,0,1969,1972,1,0,0,0,1970,1968,1,0,0,0,1970,
  	1971,1,0,0,0,1971,215,1,0,0,0,1972,1970,1,0,0,0,1973,1980,3,218,109,0,
  	1974,1975,5,159,0,0,1975,1976,5,124,0,0,1976,1977,5,159,0,0,1977,1979,
  	3,218,109,0,1978,1974,1,0,0,0,1979,1982,1,0,0,0,1980,1978,1,0,0,0,1980,
  	1981,1,0,0,0,1981,217,1,0,0,0,1982,1980,1,0,0,0,1983,1990,3,220,110,0,
  	1984,1985,5,159,0,0,1985,1986,5,125,0,0,1986,1987,5,159,0,0,1987,1989,
  	3,220,110,0,1988,1984,1,0,0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,1990,
  	1991,1,0,0,0,1991,219,1,0,0,0,1992,1990,1,0,0,0,1993,1995,5,126,0,0,1994,
  	1996,5,159,0,0,1995,1994,1,0,0,0,1995,1996,1,0,0,0,1996,1998,1,0,0,0,
  	1997,1993,1,0,0,0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,1999,2000,1,0,0,
  	0,2000,2002,1,0,0,0,2001,1999,1,0,0,0,2002,2003,3,222,111,0,2003,221,
  	1,0,0,0,2004,2016,3,226,113,0,2005,2007,5,159,0,0,2006,2005,1,0,0,0,2006,
  	2007,1,0,0,0,2007,2008,1,0,0,0,2008,2010,3,224,112,0,2009,2011,5,159,
  	0,0,2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,2012,1,0,0,0,2012,2013,3,
  	226,113,0,2013,2015,1,0,0,0,2014,2006,1,0,0,0,2015,2018,1,0,0,0,2016,
  	2014,1,0,0,0,2016,2017,1,0,0,0,2017,2044,1,0,0,0,2018,2016,1,0,0,0,2019,
  	2021,3,226,113,0,2020,2022,5,159,0,0,2021,2020,1,0,0,0,2021,2022,1,0,
  	0,0,2022,2023,1,0,0,0,2023,2025,3,224,112,0,2024,2026,5,159,0,0,2025,
  	2024,1,0,0,0,2025,2026,1,0,0,0,2026,2027,1,0,0,0,2027,2037,3,226,113,
  	0,2028,2030,5,159,0,0,2029,2028,1,0,0,0,2029,2030,1,0,0,0,2030,2031,1,
  	0,0,0,2031,2033,3,224,112,0,2032,2034,5,159,0,0,2033,2032,1,0,0,0,2033,
  	2034,1,0,0,0,2034,2035,1,0,0,0,2035,2036,3,226,113,0,2036,2038,1,0,0,
  	0,2037,2029,1,0,0,0,2038,2039,1,0,0,0,2039,2037,1,0,0,0,2039,2040,1,0,
  	0,0,2040,2041,1,0,0,0,2041,2042,6,111,-1,0,2042,2044,1,0,0,0,2043,2004,
  	1,0,0,0,2043,2019,1,0,0,0,2044,223,1,0,0,0,2045,2046,7,2,0,0,2046,225,
  	1,0,0,0,2047,2058,3,228,114,0,2048,2050,5,159,0,0,2049,2048,1,0,0,0,2049,
  	2050,1,0,0,0,2050,2051,1,0,0,0,2051,2053,5,12,0,0,2052,2054,5,159,0,0,
  	2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,1,0,0,0,2055,2057,3,228,
  	114,0,2056,2049,1,0,0,0,2057,2060,1,0,0,0,2058,2056,1,0,0,0,2058,2059,
  	1,0,0,0,2059,227,1,0,0,0,2060,2058,1,0,0,0,2061,2072,3,230,115,0,2062,
  	2064,5,159,0,0,2063,2062,1,0,0,0,2063,2064,1,0,0,0,2064,2065,1,0,0,0,
  	2065,2067,5,20,0,0,2066,2068,5,159,0,0,2067,2066,1,0,0,0,2067,2068,1,
  	0,0,0,2068,2069,1,0,0,0,2069,2071,3,230,115,0,2070,2063,1,0,0,0,2071,
  	2074,1,0,0,0,2072,2070,1,0,0,0,2072,2073,1,0,0,0,2073,229,1,0,0,0,2074,
  	2072,1,0,0,0,2075,2087,3,234,117,0,2076,2078,5,159,0,0,2077,2076,1,0,
  	0,0,2077,2078,1,0,0,0,2078,2079,1,0,0,0,2079,2081,3,232,116,0,2080,2082,
  	5,159,0,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2083,1,0,0,0,2083,
  	2084,3,234,117,0,2084,2086,1,0,0,0,2085,2077,1,0,0,0,2086,2089,1,0,0,
  	0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,231,1,0,0,0,2089,2087,1,0,
  	0,0,2090,2091,7,3,0,0,2091,233,1,0,0,0,2092,2104,3,238,119,0,2093,2095,
  	5,159,0,0,2094,2093,1,0,0,0,2094,2095,1,0,0,0,2095,2096,1,0,0,0,2096,
  	2098,3,236,118,0,2097,2099,5,159,0,0,2098,2097,1,0,0,0,2098,2099,1,0,
  	0,0,2099,2100,1,0,0,0,2100,2101,3,238,119,0,2101,2103,1,0,0,0,2102,2094,
  	1,0,0,0,2103,2106,1,0,0,0,2104,2102,1,0,0,0,2104,2105,1,0,0,0,2105,235,
  	1,0,0,0,2106,2104,1,0,0,0,2107,2108,7,4,0,0,2108,237,1,0,0,0,2109,2121,
  	3,242,121,0,2110,2112,5,159,0,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,
  	2113,1,0,0,0,2113,2115,3,240,120,0,2114,2116,5,159,0,0,2115,2114,1,0,
  	0,0,2115,2116,1,0,0,0,2116,2117,1,0,0,0,2117,2118,3,242,121,0,2118,2120,
  	1,0,0,0,2119,2111,1,0,0,0,2120,2123,1,0,0,0,2121,2119,1,0,0,0,2121,2122,
  	1,0,0,0,2122,239,1,0,0,0,2123,2121,1,0,0,0,2124,2125,7,5,0,0,2125,241,
  	1,0,0,0,2126,2137,3,244,122,0,2127,2129,5,159,0,0,2128,2127,1,0,0,0,2128,
  	2129,1,0,0,0,2129,2130,1,0,0,0,2130,2132,5,26,0,0,2131,2133,5,159,0,0,
  	2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,2134,1,0,0,0,2134,2136,3,244,
  	122,0,2135,2128,1,0,0,0,2136,2139,1,0,0,0,2137,2135,1,0,0,0,2137,2138,
  	1,0,0,0,2138,243,1,0,0,0,2139,2137,1,0,0,0,2140,2142,5,127,0,0,2141,2143,
  	5,159,0,0,2142,2141,1,0,0,0,2142,2143,1,0,0,0,2143,2145,1,0,0,0,2144,
  	2140,1,0,0,0,2145,2148,1,0,0,0,2146,2144,1,0,0,0,2146,2147,1,0,0,0,2147,
  	2149,1,0,0,0,2148,2146,1,0,0,0,2149,2154,3,246,123,0,2150,2152,5,159,
  	0,0,2151,2150,1,0,0,0,2151,2152,1,0,0,0,2152,2153,1,0,0,0,2153,2155,5,
  	128,0,0,2154,2151,1,0,0,0,2154,2155,1,0,0,0,2155,245,1,0,0,0,2156,2164,
  	3,256,128,0,2157,2165,3,250,125,0,2158,2160,3,248,124,0,2159,2158,1,0,
  	0,0,2160,2161,1,0,0,0,2161,2159,1,0,0,0,2161,2162,1,0,0,0,2162,2165,1,
  	0,0,0,2163,2165,3,254,127,0,2164,2157,1,0,0,0,2164,2159,1,0,0,0,2164,
  	2163,1,0,0,0,2164,2165,1,0,0,0,2165,247,1,0,0,0,2166,2167,5,159,0,0,2167,
  	2169,5,130,0,0,2168,2170,5,159,0,0,2169,2168,1,0,0,0,2169,2170,1,0,0,
  	0,2170,2171,1,0,0,0,2171,2186,3,256,128,0,2172,2173,5,7,0,0,2173,2174,
  	3,212,106,0,2174,2175,5,8,0,0,2175,2186,1,0,0,0,2176,2178,5,7,0,0,2177,
  	2179,3,212,106,0,2178,2177,1,0,0,0,2178,2179,1,0,0,0,2179,2180,1,0,0,
  	0,2180,2182,5,129,0,0,2181,2183,3,212,106,0,2182,2181,1,0,0,0,2182,2183,
  	1,0,0,0,2183,2184,1,0,0,0,2184,2186,5,8,0,0,2185,2166,1,0,0,0,2185,2172,
  	1,0,0,0,2185,2176,1,0,0,0,2186,249,1,0,0,0,2187,2199,3,252,126,0,2188,
  	2189,5,159,0,0,2189,2190,5,131,0,0,2190,2191,5,159,0,0,2191,2199,5,108,
  	0,0,2192,2193,5,159,0,0,2193,2194,5,132,0,0,2194,2195,5,159,0,0,2195,
  	2199,5,108,0,0,2196,2197,5,159,0,0,2197,2199,5,133,0,0,2198,2187,1,0,
  	0,0,2198,2188,1,0,0,0,2198,2192,1,0,0,0,2198,2196,1,0,0,0,2199,2201,1,
  	0,0,0,2200,2202,5,159,0,0,2201,2200,1,0,0,0,2201,2202,1,0,0,0,2202,2203,
  	1,0,0,0,2203,2204,3,256,128,0,2204,251,1,0,0,0,2205,2207,5,159,0,0,2206,
  	2205,1,0,0,0,2206,2207,1,0,0,0,2207,2208,1,0,0,0,2208,2209,5,27,0,0,2209,
  	253,1,0,0,0,2210,2211,5,159,0,0,2211,2212,5,134,0,0,2212,2213,5,159,0,
  	0,2213,2221,5,135,0,0,2214,2215,5,159,0,0,2215,2216,5,134,0,0,2216,2217,
  	5,159,0,0,2217,2218,5,126,0,0,2218,2219,5,159,0,0,2219,2221,5,135,0,0,
  	2220,2210,1,0,0,0,2220,2214,1,0,0,0,2221,255,1,0,0,0,2222,2229,3,258,
  	129,0,2223,2225,5,159,0,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2226,
  	1,0,0,0,2226,2228,3,286,143,0,2227,2224,1,0,0,0,2228,2231,1,0,0,0,2229,
  	2227,1,0,0,0,2229,2230,1,0,0,0,2230,257,1,0,0,0,2231,2229,1,0,0,0,2232,
  	2242,3,260,130,0,2233,2242,3,296,148,0,2234,2242,3,288,144,0,2235,2242,
  	3,272,136,0,2236,2242,3,274,137,0,2237,2242,3,280,140,0,2238,2242,3,282,
  	141,0,2239,2242,3,284,142,0,2240,2242,3,292,146,0,2241,2232,1,0,0,0,2241,
  	2233,1,0,0,0,2241,2234,1,0,0,0,2241,2235,1,0,0,0,2241,2236,1,0,0,0,2241,
  	2237,1,0,0,0,2241,2238,1,0,0,0,2241,2239,1,0,0,0,2241,2240,1,0,0,0,2242,
  	259,1,0,0,0,2243,2250,3,294,147,0,2244,2250,5,145,0,0,2245,2250,3,262,
  	131,0,2246,2250,5,135,0,0,2247,2250,3,264,132,0,2248,2250,3,268,134,0,
  	2249,2243,1,0,0,0,2249,2244,1,0,0,0,2249,2245,1,0,0,0,2249,2246,1,0,0,
  	0,2249,2247,1,0,0,0,2249,2248,1,0,0,0,2250,261,1,0,0,0,2251,2252,7,6,
  	0,0,2252,263,1,0,0,0,2253,2255,5,7,0,0,2254,2256,5,159,0,0,2255,2254,
  	1,0,0,0,2255,2256,1,0,0,0,2256,2270,1,0,0,0,2257,2259,3,212,106,0,2258,
  	2260,5,159,0,0,2259,2258,1,0,0,0,2259,2260,1,0,0,0,2260,2267,1,0,0,0,
  	2261,2263,3,266,133,0,2262,2264,5,159,0,0,2263,2262,1,0,0,0,2263,2264,
  	1,0,0,0,2264,2266,1,0,0,0,2265,2261,1,0,0,0,2266,2269,1,0,0,0,2267,2265,
  	1,0,0,0,2267,2268,1,0,0,0,2268,2271,1,0,0,0,2269,2267,1,0,0,0,2270,2257,
  	1,0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,2273,5,8,0,0,2273,265,
  	1,0,0,0,2274,2276,5,3,0,0,2275,2277,5,159,0,0,2276,2275,1,0,0,0,2276,
  	2277,1,0,0,0,2277,2279,1,0,0,0,2278,2280,3,212,106,0,2279,2278,1,0,0,
  	0,2279,2280,1,0,0,0,2280,267,1,0,0,0,2281,2283,5,10,0,0,2282,2284,5,159,
  	0,0,2283,2282,1,0,0,0,2283,2284,1,0,0,0,2284,2285,1,0,0,0,2285,2287,3,
  	270,135,0,2286,2288,5,159,0,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,2288,
  	2299,1,0,0,0,2289,2291,5,3,0,0,2290,2292,5,159,0,0,2291,2290,1,0,0,0,
  	2291,2292,1,0,0,0,2292,2293,1,0,0,0,2293,2295,3,270,135,0,2294,2296,5,
  	159,0,0,2295,2294,1,0,0,0,2295,2296,1,0,0,0,2296,2298,1,0,0,0,2297,2289,
  	1,0,0,0,2298,2301,1,0,0,0,2299,2297,1,0,0,0,2299,2300,1,0,0,0,2300,2302,
  	1,0,0,0,2301,2299,1,0,0,0,2302,2303,5,11,0,0,2303,269,1,0,0,0,2304,2307,
  	3,308,154,0,2305,2307,5,145,0,0,2306,2304,1,0,0,0,2306,2305,1,0,0,0,2307,
  	2309,1,0,0,0,2308,2310,5,159,0,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,
  	2310,2311,1,0,0,0,2311,2313,5,129,0,0,2312,2314,5,159,0,0,2313,2312,1,
  	0,0,0,2313,2314,1,0,0,0,2314,2315,1,0,0,0,2315,2316,3,212,106,0,2316,
  	271,1,0,0,0,2317,2319,5,2,0,0,2318,2320,5,159,0,0,2319,2318,1,0,0,0,2319,
  	2320,1,0,0,0,2320,2321,1,0,0,0,2321,2323,3,212,106,0,2322,2324,5,159,
  	0,0,2323,2322,1,0,0,0,2323,2324,1,0,0,0,2324,2325,1,0,0,0,2325,2326,5,
  	4,0,0,2326,273,1,0,0,0,2327,2329,5,138,0,0,2328,2330,5,159,0,0,2329,2328,
  	1,0,0,0,2329,2330,1,0,0,0,2330,2331,1,0,0,0,2331,2333,5,2,0,0,2332,2334,
  	5,159,0,0,2333,2332,1,0,0,0,2333,2334,1,0,0,0,2334,2335,1,0,0,0,2335,
  	2337,5,111,0,0,2336,2338,5,159,0,0,2337,2336,1,0,0,0,2337,2338,1,0,0,
  	0,2338,2339,1,0,0,0,2339,2376,5,4,0,0,2340,2342,3,276,138,0,2341,2343,
  	5,159,0,0,2342,2341,1,0,0,0,2342,2343,1,0,0,0,2343,2344,1,0,0,0,2344,
  	2346,5,2,0,0,2345,2347,5,159,0,0,2346,2345,1,0,0,0,2346,2347,1,0,0,0,
  	2347,2352,1,0,0,0,2348,2350,5,110,0,0,2349,2351,5,159,0,0,2350,2349,1,
  	0,0,0,2350,2351,1,0,0,0,2351,2353,1,0,0,0,2352,2348,1,0,0,0,2352,2353,
  	1,0,0,0,2353,2371,1,0,0,0,2354,2356,3,278,139,0,2355,2357,5,159,0,0,2356,
  	2355,1,0,0,0,2356,2357,1,0,0,0,2357,2368,1,0,0,0,2358,2360,5,3,0,0,2359,
  	2361,5,159,0,0,2360,2359,1,0,0,0,2360,2361,1,0,0,0,2361,2362,1,0,0,0,
  	2362,2364,3,278,139,0,2363,2365,5,159,0,0,2364,2363,1,0,0,0,2364,2365,
  	1,0,0,0,2365,2367,1,0,0,0,2366,2358,1,0,0,0,2367,2370,1,0,0,0,2368,2366,
  	1,0,0,0,2368,2369,1,0,0,0,2369,2372,1,0,0,0,2370,2368,1,0,0,0,2371,2354,
  	1,0,0,0,2371,2372,1,0,0,0,2372,2373,1,0,0,0,2373,2374,5,4,0,0,2374,2376,
  	1,0,0,0,2375,2327,1,0,0,0,2375,2340,1,0,0,0,2376,275,1,0,0,0,2377,2378,
  	3,308,154,0,2378,277,1,0,0,0,2379,2381,3,308,154,0,2380,2382,5,159,0,
  	0,2381,2380,1,0,0,0,2381,2382,1,0,0,0,2382,2383,1,0,0,0,2383,2384,5,129,
  	0,0,2384,2386,5,6,0,0,2385,2387,5,159,0,0,2386,2385,1,0,0,0,2386,2387,
  	1,0,0,0,2387,2389,1,0,0,0,2388,2379,1,0,0,0,2388,2389,1,0,0,0,2389,2390,
  	1,0,0,0,2390,2391,3,212,106,0,2391,279,1,0,0,0,2392,2397,3,182,91,0,2393,
  	2395,5,159,0,0,2394,2393,1,0,0,0,2394,2395,1,0,0,0,2395,2396,1,0,0,0,
  	2396,2398,3,184,92,0,2397,2394,1,0,0,0,2398,2399,1,0,0,0,2399,2397,1,
  	0,0,0,2399,2400,1,0,0,0,2400,281,1,0,0,0,2401,2403,5,139,0,0,2402,2404,
  	5,159,0,0,2403,2402,1,0,0,0,2403,2404,1,0,0,0,2404,2405,1,0,0,0,2405,
  	2407,5,10,0,0,2406,2408,5,159,0,0,2407,2406,1,0,0,0,2407,2408,1,0,0,0,
  	2408,2409,1,0,0,0,2409,2411,5,100,0,0,2410,2412,5,159,0,0,2411,2410,1,
  	0,0,0,2411,2412,1,0,0,0,2412,2413,1,0,0,0,2413,2418,3,174,87,0,2414,2416,
  	5,159,0,0,2415,2414,1,0,0,0,2415,2416,1,0,0,0,2416,2417,1,0,0,0,2417,
  	2419,3,172,86,0,2418,2415,1,0,0,0,2418,2419,1,0,0,0,2419,2421,1,0,0,0,
  	2420,2422,5,159,0,0,2421,2420,1,0,0,0,2421,2422,1,0,0,0,2422,2423,1,0,
  	0,0,2423,2424,5,11,0,0,2424,283,1,0,0,0,2425,2427,5,138,0,0,2426,2428,
  	5,159,0,0,2427,2426,1,0,0,0,2427,2428,1,0,0,0,2428,2429,1,0,0,0,2429,
  	2431,5,10,0,0,2430,2432,5,159,0,0,2431,2430,1,0,0,0,2431,2432,1,0,0,0,
  	2432,2433,1,0,0,0,2433,2435,5,100,0,0,2434,2436,5,159,0,0,2435,2434,1,
  	0,0,0,2435,2436,1,0,0,0,2436,2437,1,0,0,0,2437,2442,3,174,87,0,2438,2440,
  	5,159,0,0,2439,2438,1,0,0,0,2439,2440,1,0,0,0,2440,2441,1,0,0,0,2441,
  	2443,3,172,86,0,2442,2439,1,0,0,0,2442,2443,1,0,0,0,2443,2445,1,0,0,0,
  	2444,2446,5,159,0,0,2445,2444,1,0,0,0,2445,2446,1,0,0,0,2446,2447,1,0,
  	0,0,2447,2448,5,11,0,0,2448,285,1,0,0,0,2449,2451,5,5,0,0,2450,2452,5,
  	159,0,0,2451,2450,1,0,0,0,2451,2452,1,0,0,0,2452,2455,1,0,0,0,2453,2456,
  	3,300,150,0,2454,2456,5,111,0,0,2455,2453,1,0,0,0,2455,2454,1,0,0,0,2456,
  	287,1,0,0,0,2457,2462,5,140,0,0,2458,2460,5,159,0,0,2459,2458,1,0,0,0,
  	2459,2460,1,0,0,0,2460,2461,1,0,0,0,2461,2463,3,290,145,0,2462,2459,1,
  	0,0,0,2463,2464,1,0,0,0,2464,2462,1,0,0,0,2464,2465,1,0,0,0,2465,2480,
  	1,0,0,0,2466,2468,5,140,0,0,2467,2469,5,159,0,0,2468,2467,1,0,0,0,2468,
  	2469,1,0,0,0,2469,2470,1,0,0,0,2470,2475,3,212,106,0,2471,2473,5,159,
  	0,0,2472,2471,1,0,0,0,2472,2473,1,0,0,0,2473,2474,1,0,0,0,2474,2476,3,
  	290,145,0,2475,2472,1,0,0,0,2476,2477,1,0,0,0,2477,2475,1,0,0,0,2477,
  	2478,1,0,0,0,2478,2480,1,0,0,0,2479,2457,1,0,0,0,2479,2466,1,0,0,0,2480,
  	2489,1,0,0,0,2481,2483,5,159,0,0,2482,2481,1,0,0,0,2482,2483,1,0,0,0,
  	2483,2484,1,0,0,0,2484,2486,5,141,0,0,2485,2487,5,159,0,0,2486,2485,1,
  	0,0,0,2486,2487,1,0,0,0,2487,2488,1,0,0,0,2488,2490,3,212,106,0,2489,
  	2482,1,0,0,0,2489,2490,1,0,0,0,2490,2492,1,0,0,0,2491,2493,5,159,0,0,
  	2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2494,1,0,0,0,2494,2495,5,142,
  	0,0,2495,289,1,0,0,0,2496,2498,5,143,0,0,2497,2499,5,159,0,0,2498,2497,
  	1,0,0,0,2498,2499,1,0,0,0,2499,2500,1,0,0,0,2500,2502,3,212,106,0,2501,
  	2503,5,159,0,0,2502,2501,1,0,0,0,2502,2503,1,0,0,0,2503,2504,1,0,0,0,
  	2504,2506,5,144,0,0,2505,2507,5,159,0,0,2506,2505,1,0,0,0,2506,2507,1,
  	0,0,0,2507,2508,1,0,0,0,2508,2509,3,212,106,0,2509,291,1,0,0,0,2510,2511,
  	3,308,154,0,2511,293,1,0,0,0,2512,2515,3,304,152,0,2513,2515,3,302,151,
  	0,2514,2512,1,0,0,0,2514,2513,1,0,0,0,2515,295,1,0,0,0,2516,2519,5,28,
  	0,0,2517,2520,3,308,154,0,2518,2520,5,147,0,0,2519,2517,1,0,0,0,2519,
  	2518,1,0,0,0,2520,297,1,0,0,0,2521,2523,3,258,129,0,2522,2524,5,159,0,
  	0,2523,2522,1,0,0,0,2523,2524,1,0,0,0,2524,2525,1,0,0,0,2525,2526,3,286,
  	143,0,2526,299,1,0,0,0,2527,2528,3,306,153,0,2528,301,1,0,0,0,2529,2530,
  	5,147,0,0,2530,303,1,0,0,0,2531,2532,5,154,0,0,2532,305,1,0,0,0,2533,
  	2534,3,308,154,0,2534,307,1,0,0,0,2535,2541,5,155,0,0,2536,2537,5,158,
  	0,0,2537,2541,6,154,-1,0,2538,2541,5,148,0,0,2539,2541,3,310,155,0,2540,
  	2535,1,0,0,0,2540,2536,1,0,0,0,2540,2538,1,0,0,0,2540,2539,1,0,0,0,2541,
  	309,1,0,0,0,2542,2543,7,7,0,0,2543,311,1,0,0,0,2544,2545,7,8,0,0,2545,
  	313,1,0,0,0,2546,2547,7,9,0,0,2547,315,1,0,0,0,2548,2549,7,10,0,0,2549,
  	317,1,0,0,0,439,320,324,329,333,338,341,345,348,371,377,381,384,390,393,
  	397,401,405,410,414,421,425,433,437,447,451,455,460,473,477,485,488,496,
  	499,514,519,525,529,532,535,541,545,551,555,560,575,579,601,605,608,611,
  	614,617,621,626,630,640,644,649,654,659,665,669,673,678,685,689,693,696,
  	700,704,716,720,724,728,733,745,749,753,757,761,763,767,771,773,787,791,
  	795,799,804,807,811,815,817,821,825,827,854,862,868,871,881,884,892,895,
  	901,904,910,932,943,965,969,974,983,987,992,1002,1008,1012,1016,1024,
  	1028,1032,1038,1042,1046,1052,1056,1060,1064,1068,1074,1078,1082,1086,
  	1090,1094,1100,1107,1112,1118,1123,1131,1150,1154,1162,1172,1177,1182,
  	1186,1191,1197,1202,1205,1209,1213,1217,1223,1227,1232,1237,1241,1244,
  	1248,1252,1256,1260,1264,1270,1274,1279,1283,1292,1298,1306,1310,1314,
  	1318,1325,1328,1331,1334,1340,1343,1347,1351,1355,1358,1361,1364,1367,
  	1371,1375,1379,1384,1388,1394,1398,1402,1407,1411,1416,1420,1430,1436,
  	1443,1456,1460,1464,1468,1473,1478,1482,1488,1492,1496,1500,1505,1511,
  	1514,1520,1523,1529,1533,1537,1541,1545,1550,1555,1559,1564,1567,1576,
  	1585,1590,1603,1606,1614,1618,1623,1628,1632,1637,1643,1648,1655,1659,
  	1663,1665,1669,1671,1675,1677,1683,1689,1693,1696,1699,1705,1708,1711,
  	1715,1721,1724,1727,1731,1735,1739,1741,1745,1747,1751,1753,1757,1759,
  	1765,1769,1773,1777,1781,1785,1789,1793,1797,1800,1806,1810,1814,1817,
  	1822,1827,1831,1834,1837,1840,1845,1850,1856,1859,1862,1865,1869,1872,
  	1875,1878,1881,1885,1889,1893,1897,1901,1904,1907,1911,1915,1919,1923,
  	1925,1931,1934,1937,1943,1946,1949,1970,1980,1990,1995,1999,2006,2010,
  	2016,2021,2025,2029,2033,2039,2043,2049,2053,2058,2063,2067,2072,2077,
  	2081,2087,2094,2098,2104,2111,2115,2121,2128,2132,2137,2142,2146,2151,
  	2154,2161,2164,2169,2178,2182,2185,2198,2201,2206,2220,2224,2229,2241,
  	2249,2255,2259,2263,2267,2270,2276,2279,2283,2287,2291,2295,2299,2306,
  	2309,2313,2319,2323,2329,2333,2337,2342,2346,2350,2352,2356,2360,2364,
  	2368,2371,2375,2381,2386,2388,2394,2399,2403,2407,2411,2415,2418,2421,
  	2427,2431,2435,2439,2442,2445,2451,2455,2459,2464,2468,2472,2477,2479,
  	2482,2486,2489,2492,2498,2502,2506,2514,2519,2523,2540
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(318);
    oC_Cypher();
    setState(329);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(320);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(319);
          match(CypherParser::SP);
        }
        setState(322);
        match(CypherParser::T__0);
        setState(324);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(323);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(326);
        oC_Cypher(); 
      }
      setState(331);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(333);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(332);
      match(CypherParser::SP);
    }
    setState(335);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(338);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(337);
      oC_AnyCypherOption();
      break;
    }

    default:
      break;
    }
    setState(341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(340);
      match(CypherParser::SP);
    }

    setState(343);
    oC_Statement();
    setState(348);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(345);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(344);
        match(CypherParser::SP);
      }
      setState(347);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::OC_StatementContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::OC_StatementContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_CreateSequenceContext* CypherParser::OC_StatementContext::kU_CreateSequence() {
  return getRuleContext<CypherParser::KU_CreateSequenceContext>(0);
}

CypherParser::KU_DropContext* CypherParser::OC_StatementContext::kU_Drop() {
  return getRuleContext<CypherParser::KU_DropContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(371);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(350);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(351);
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(352);
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(353);
      kU_CreateRelTableGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(354);
      kU_CreateRdfGraph();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(355);
      kU_CreateSequence();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(356);
      kU_Drop();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(357);
      kU_AlterTable();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(358);
      kU_CopyFrom();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(359);
      kU_CopyFromByColumn();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(360);
      kU_CopyTO();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(361);
      kU_StandaloneCall();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(362);
      kU_CreateMacro();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(363);
      kU_CommentOn();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(364);
      kU_Transaction();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(365);
      kU_Extension();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(366);
      kU_ExportDatabase();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(367);
      kU_ImportDatabase();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(368);
      kU_AttachDatabase();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(369);
      kU_DetachDatabase();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(370);
      kU_UseDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(373);
    match(CypherParser::COPY);
    setState(374);
    match(CypherParser::SP);
    setState(375);
    oC_SchemaName();
    setState(384);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(377);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(376);
        match(CypherParser::SP);
      }
      setState(379);
      kU_ColumnNames();
      setState(381);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(380);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(383);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(386);
    match(CypherParser::FROM);
    setState(387);
    match(CypherParser::SP);
    setState(388);
    kU_ScanSource();
    setState(393);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(390);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(389);
        match(CypherParser::SP);
      }
      setState(392);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(395);
    match(CypherParser::T__1);
    setState(397);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(396);
      match(CypherParser::SP);
    }
    setState(399);
    oC_SchemaName();
    setState(410);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(401);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(400);
          match(CypherParser::SP);
        }
        setState(403);
        match(CypherParser::T__2);
        setState(405);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(404);
          match(CypherParser::SP);
        }
        setState(407);
        oC_SchemaName(); 
      }
      setState(412);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(413);
      match(CypherParser::SP);
    }
    setState(416);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(437);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(418);
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(419);
      match(CypherParser::T__1);
      setState(421);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(420);
        match(CypherParser::SP);
      }
      setState(423);
      oC_Query();
      setState(425);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(424);
        match(CypherParser::SP);
      }
      setState(427);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(429);
      oC_Variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(430);
      oC_Variable();
      setState(431);
      match(CypherParser::T__4);
      setState(433);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(432);
        match(CypherParser::SP);
      }
      setState(435);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(439);
    match(CypherParser::COPY);
    setState(440);
    match(CypherParser::SP);
    setState(441);
    oC_SchemaName();
    setState(442);
    match(CypherParser::SP);
    setState(443);
    match(CypherParser::FROM);
    setState(444);
    match(CypherParser::SP);
    setState(445);
    match(CypherParser::T__1);
    setState(447);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(446);
      match(CypherParser::SP);
    }
    setState(449);
    match(CypherParser::StringLiteral);
    setState(460);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(451);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(450);
        match(CypherParser::SP);
      }
      setState(453);
      match(CypherParser::T__2);
      setState(455);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(454);
        match(CypherParser::SP);
      }
      setState(457);
      match(CypherParser::StringLiteral);
      setState(462);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(463);
    match(CypherParser::T__3);
    setState(464);
    match(CypherParser::SP);
    setState(465);
    match(CypherParser::BY);
    setState(466);
    match(CypherParser::SP);
    setState(467);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(469);
    match(CypherParser::COPY);
    setState(470);
    match(CypherParser::SP);
    setState(471);
    match(CypherParser::T__1);
    setState(473);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(472);
      match(CypherParser::SP);
    }
    setState(475);
    oC_Query();
    setState(477);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(476);
      match(CypherParser::SP);
    }
    setState(479);
    match(CypherParser::T__3);
    setState(480);
    match(CypherParser::SP);
    setState(481);
    match(CypherParser::TO);
    setState(482);
    match(CypherParser::SP);
    setState(483);
    match(CypherParser::StringLiteral);
    setState(488);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(485);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(484);
        match(CypherParser::SP);
      }
      setState(487);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_ExportDatabaseContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(490);
    match(CypherParser::EXPORT);
    setState(491);
    match(CypherParser::SP);
    setState(492);
    match(CypherParser::DATABASE);
    setState(493);
    match(CypherParser::SP);
    setState(494);
    match(CypherParser::StringLiteral);
    setState(499);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(496);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(495);
        match(CypherParser::SP);
      }
      setState(498);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(501);
    match(CypherParser::IMPORT);
    setState(502);
    match(CypherParser::SP);
    setState(503);
    match(CypherParser::DATABASE);
    setState(504);
    match(CypherParser::SP);
    setState(505);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_AttachDatabaseContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_AttachDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(507);
    match(CypherParser::ATTACH);
    setState(508);
    match(CypherParser::SP);
    setState(509);
    match(CypherParser::StringLiteral);
    setState(514);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(510);
      match(CypherParser::SP);
      setState(511);
      match(CypherParser::AS);
      setState(512);
      match(CypherParser::SP);
      setState(513);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
    setState(516);
    match(CypherParser::SP);
    setState(517);
    match(CypherParser::T__1);
    setState(519);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(518);
      match(CypherParser::SP);
    }
    setState(521);
    match(CypherParser::DBTYPE);
    setState(522);
    match(CypherParser::SP);
    setState(523);
    oC_SymbolicName();
    setState(532);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(525);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(524);
        match(CypherParser::SP);
      }
      setState(527);
      match(CypherParser::T__2);
      setState(529);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(528);
        match(CypherParser::SP);
      }
      setState(531);
      kU_Options();
      break;
    }

    default:
      break;
    }
    setState(535);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(534);
      match(CypherParser::SP);
    }
    setState(537);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionContext ------------------------------------------------------------------

CypherParser::KU_OptionContext::KU_OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_OptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_OptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Option;
}


CypherParser::KU_OptionContext* CypherParser::kU_Option() {
  KU_OptionContext *_localctx = _tracker.createInstance<KU_OptionContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_Option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(539);
    oC_SymbolicName();
    setState(541);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(540);
      match(CypherParser::SP);
    }
    setState(543);
    match(CypherParser::T__5);
    setState(545);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(544);
      match(CypherParser::SP);
    }
    setState(547);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionsContext ------------------------------------------------------------------

CypherParser::KU_OptionsContext::KU_OptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_OptionContext *> CypherParser::KU_OptionsContext::kU_Option() {
  return getRuleContexts<CypherParser::KU_OptionContext>();
}

CypherParser::KU_OptionContext* CypherParser::KU_OptionsContext::kU_Option(size_t i) {
  return getRuleContext<CypherParser::KU_OptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_Options;
}


CypherParser::KU_OptionsContext* CypherParser::kU_Options() {
  KU_OptionsContext *_localctx = _tracker.createInstance<KU_OptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_Options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(549);
    kU_Option();
    setState(560);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(551);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(550);
          match(CypherParser::SP);
        }
        setState(553);
        match(CypherParser::T__2);
        setState(555);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(554);
          match(CypherParser::SP);
        }
        setState(557);
        kU_Option(); 
      }
      setState(562);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(563);
    match(CypherParser::DETACH);
    setState(564);
    match(CypherParser::SP);
    setState(565);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(567);
    match(CypherParser::USE);
    setState(568);
    match(CypherParser::SP);
    setState(569);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(571);
    match(CypherParser::CALL);
    setState(572);
    match(CypherParser::SP);
    setState(573);
    oC_SymbolicName();
    setState(575);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(574);
      match(CypherParser::SP);
    }
    setState(577);
    match(CypherParser::T__5);
    setState(579);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(578);
      match(CypherParser::SP);
    }
    setState(581);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(583);
    match(CypherParser::COMMENT_);
    setState(584);
    match(CypherParser::SP);
    setState(585);
    match(CypherParser::ON);
    setState(586);
    match(CypherParser::SP);
    setState(587);
    match(CypherParser::TABLE);
    setState(588);
    match(CypherParser::SP);
    setState(589);
    oC_SchemaName();
    setState(590);
    match(CypherParser::SP);
    setState(591);
    match(CypherParser::IS);
    setState(592);
    match(CypherParser::SP);
    setState(593);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(595);
    match(CypherParser::CREATE);
    setState(596);
    match(CypherParser::SP);
    setState(597);
    match(CypherParser::MACRO);
    setState(598);
    match(CypherParser::SP);
    setState(599);
    oC_FunctionName();
    setState(601);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(600);
      match(CypherParser::SP);
    }
    setState(603);
    match(CypherParser::T__1);
    setState(605);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      setState(604);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(608);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(607);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(611);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(610);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 19868389125) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 302256393) != 0)) {
      setState(613);
      kU_DefaultArg();
    }
    setState(626);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(617);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(616);
          match(CypherParser::SP);
        }
        setState(619);
        match(CypherParser::T__2);
        setState(621);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(620);
          match(CypherParser::SP);
        }
        setState(623);
        kU_DefaultArg(); 
      }
      setState(628);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
    setState(630);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(629);
      match(CypherParser::SP);
    }
    setState(632);
    match(CypherParser::T__3);
    setState(633);
    match(CypherParser::SP);
    setState(634);
    match(CypherParser::AS);
    setState(635);
    match(CypherParser::SP);
    setState(636);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(638);
    oC_SymbolicName();
    setState(649);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(640);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(639);
          match(CypherParser::SP);
        }
        setState(642);
        match(CypherParser::T__2);
        setState(644);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(643);
          match(CypherParser::SP);
        }
        setState(646);
        oC_SymbolicName(); 
      }
      setState(651);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(652);
    oC_SymbolicName();
    setState(654);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(653);
      match(CypherParser::SP);
    }
    setState(656);
    match(CypherParser::COLON);
    setState(657);
    match(CypherParser::T__5);
    setState(659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(658);
      match(CypherParser::SP);
    }
    setState(661);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(696);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(663);
        match(CypherParser::T__6);
        setState(665);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(664);
          match(CypherParser::SP);
        }
        setState(667);
        match(CypherParser::StringLiteral);
        setState(678);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
          setState(669);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(668);
            match(CypherParser::SP);
          }
          setState(671);
          match(CypherParser::T__2);
          setState(673);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(672);
            match(CypherParser::SP);
          }
          setState(675);
          match(CypherParser::StringLiteral);
          setState(680);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(681);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(682);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(683);
        match(CypherParser::GLOB);
        setState(685);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(684);
          match(CypherParser::SP);
        }
        setState(687);
        match(CypherParser::T__1);
        setState(689);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(688);
          match(CypherParser::SP);
        }
        setState(691);
        match(CypherParser::StringLiteral);
        setState(693);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(692);
          match(CypherParser::SP);
        }
        setState(695);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_OptionsContext* CypherParser::KU_ParsingOptionsContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(698);
    match(CypherParser::T__1);
    setState(700);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(699);
      match(CypherParser::SP);
    }
    setState(702);
    kU_Options();
    setState(704);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(703);
      match(CypherParser::SP);
    }
    setState(706);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(708);
    match(CypherParser::CREATE);
    setState(709);
    match(CypherParser::SP);
    setState(710);
    match(CypherParser::NODE);
    setState(711);
    match(CypherParser::SP);
    setState(712);
    match(CypherParser::TABLE);
    setState(713);
    match(CypherParser::SP);
    setState(714);
    oC_SchemaName();
    setState(716);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(715);
      match(CypherParser::SP);
    }
    setState(718);
    match(CypherParser::T__1);
    setState(720);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(719);
      match(CypherParser::SP);
    }
    setState(722);
    kU_PropertyDefinitionsDDL();
    setState(724);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(723);
      match(CypherParser::SP);
    }

    setState(726);
    match(CypherParser::T__2);
    setState(728);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(727);
      match(CypherParser::SP);
    }
    setState(730);
    kU_CreateNodeConstraint();
    setState(733);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(732);
      match(CypherParser::SP);
    }
    setState(735);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(737);
    match(CypherParser::CREATE);
    setState(738);
    match(CypherParser::SP);
    setState(739);
    match(CypherParser::REL);
    setState(740);
    match(CypherParser::SP);
    setState(741);
    match(CypherParser::TABLE);
    setState(742);
    match(CypherParser::SP);
    setState(743);
    oC_SchemaName();
    setState(745);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(744);
      match(CypherParser::SP);
    }
    setState(747);
    match(CypherParser::T__1);
    setState(749);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(748);
      match(CypherParser::SP);
    }
    setState(751);
    kU_RelTableConnection();
    setState(753);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(752);
      match(CypherParser::SP);
    }
    setState(763);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(755);
      match(CypherParser::T__2);
      setState(757);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(756);
        match(CypherParser::SP);
      }
      setState(759);
      kU_PropertyDefinitionsDDL();
      setState(761);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(760);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(773);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(765);
      match(CypherParser::T__2);
      setState(767);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(766);
        match(CypherParser::SP);
      }
      setState(769);
      oC_SymbolicName();
      setState(771);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(770);
        match(CypherParser::SP);
      }
    }
    setState(775);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(777);
    match(CypherParser::CREATE);
    setState(778);
    match(CypherParser::SP);
    setState(779);
    match(CypherParser::REL);
    setState(780);
    match(CypherParser::SP);
    setState(781);
    match(CypherParser::TABLE);
    setState(782);
    match(CypherParser::SP);
    setState(783);
    match(CypherParser::GROUP);
    setState(784);
    match(CypherParser::SP);
    setState(785);
    oC_SchemaName();
    setState(787);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(786);
      match(CypherParser::SP);
    }
    setState(789);
    match(CypherParser::T__1);
    setState(791);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(790);
      match(CypherParser::SP);
    }
    setState(793);
    kU_RelTableConnection();
    setState(802); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(795);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(794);
                match(CypherParser::SP);
              }
              setState(797);
              match(CypherParser::T__2);
              setState(799);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(798);
                match(CypherParser::SP);
              }
              setState(801);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(804); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(806);
      match(CypherParser::SP);
    }
    setState(817);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      setState(809);
      match(CypherParser::T__2);
      setState(811);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(810);
        match(CypherParser::SP);
      }
      setState(813);
      kU_PropertyDefinitionsDDL();
      setState(815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(814);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(827);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(819);
      match(CypherParser::T__2);
      setState(821);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(820);
        match(CypherParser::SP);
      }
      setState(823);
      oC_SymbolicName();
      setState(825);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(824);
        match(CypherParser::SP);
      }
    }
    setState(829);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(831);
    match(CypherParser::FROM);
    setState(832);
    match(CypherParser::SP);
    setState(833);
    oC_SchemaName();
    setState(834);
    match(CypherParser::SP);
    setState(835);
    match(CypherParser::TO);
    setState(836);
    match(CypherParser::SP);
    setState(837);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(839);
    match(CypherParser::CREATE);
    setState(840);
    match(CypherParser::SP);
    setState(841);
    match(CypherParser::RDFGRAPH);
    setState(842);
    match(CypherParser::SP);
    setState(843);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateSequenceContext ------------------------------------------------------------------

CypherParser::KU_CreateSequenceContext::KU_CreateSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateSequenceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateSequenceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_SequenceOptionsContext *> CypherParser::KU_CreateSequenceContext::kU_SequenceOptions() {
  return getRuleContexts<CypherParser::KU_SequenceOptionsContext>();
}

CypherParser::KU_SequenceOptionsContext* CypherParser::KU_CreateSequenceContext::kU_SequenceOptions(size_t i) {
  return getRuleContext<CypherParser::KU_SequenceOptionsContext>(i);
}


size_t CypherParser::KU_CreateSequenceContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateSequence;
}


CypherParser::KU_CreateSequenceContext* CypherParser::kU_CreateSequence() {
  KU_CreateSequenceContext *_localctx = _tracker.createInstance<KU_CreateSequenceContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_CreateSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(845);
    match(CypherParser::CREATE);
    setState(846);
    match(CypherParser::SP);
    setState(847);
    match(CypherParser::SEQUENCE);
    setState(848);
    match(CypherParser::SP);
    setState(849);
    oC_SchemaName();
    setState(854);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(850);
        match(CypherParser::SP);
        setState(851);
        kU_SequenceOptions(); 
      }
      setState(856);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_SequenceOptionsContext ------------------------------------------------------------------

CypherParser::KU_SequenceOptionsContext::KU_SequenceOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_IncrementByContext* CypherParser::KU_SequenceOptionsContext::kU_IncrementBy() {
  return getRuleContext<CypherParser::KU_IncrementByContext>(0);
}

CypherParser::KU_MinValueContext* CypherParser::KU_SequenceOptionsContext::kU_MinValue() {
  return getRuleContext<CypherParser::KU_MinValueContext>(0);
}

CypherParser::KU_MaxValueContext* CypherParser::KU_SequenceOptionsContext::kU_MaxValue() {
  return getRuleContext<CypherParser::KU_MaxValueContext>(0);
}

CypherParser::KU_StartWithContext* CypherParser::KU_SequenceOptionsContext::kU_StartWith() {
  return getRuleContext<CypherParser::KU_StartWithContext>(0);
}

CypherParser::KU_CycleContext* CypherParser::KU_SequenceOptionsContext::kU_Cycle() {
  return getRuleContext<CypherParser::KU_CycleContext>(0);
}


size_t CypherParser::KU_SequenceOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_SequenceOptions;
}


CypherParser::KU_SequenceOptionsContext* CypherParser::kU_SequenceOptions() {
  KU_SequenceOptionsContext *_localctx = _tracker.createInstance<KU_SequenceOptionsContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_SequenceOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(862);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(857);
      kU_IncrementBy();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(858);
      kU_MinValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(859);
      kU_MaxValue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(860);
      kU_StartWith();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(861);
      kU_Cycle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IncrementByContext ------------------------------------------------------------------

CypherParser::KU_IncrementByContext::KU_IncrementByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IncrementByContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_IncrementByContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_IncrementByContext::getRuleIndex() const {
  return CypherParser::RuleKU_IncrementBy;
}


CypherParser::KU_IncrementByContext* CypherParser::kU_IncrementBy() {
  KU_IncrementByContext *_localctx = _tracker.createInstance<KU_IncrementByContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_IncrementBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(864);
    match(CypherParser::INCREMENT);
    setState(865);
    match(CypherParser::SP);
    setState(868);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::BY) {
      setState(866);
      match(CypherParser::BY);
      setState(867);
      match(CypherParser::SP);
    }
    setState(871);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(870);
      match(CypherParser::MINUS);
    }
    setState(873);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MinValueContext ------------------------------------------------------------------

CypherParser::KU_MinValueContext::KU_MinValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MinValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MinValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MinValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MinValue;
}


CypherParser::KU_MinValueContext* CypherParser::kU_MinValue() {
  KU_MinValueContext *_localctx = _tracker.createInstance<KU_MinValueContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_MinValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(884);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(875);
        match(CypherParser::NO);
        setState(876);
        match(CypherParser::SP);
        setState(877);
        match(CypherParser::MINVALUE);
        break;
      }

      case CypherParser::MINVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(878);
        match(CypherParser::MINVALUE);
        setState(879);
        match(CypherParser::SP);
        setState(881);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(880);
          match(CypherParser::MINUS);
        }
        setState(883);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MaxValueContext ------------------------------------------------------------------

CypherParser::KU_MaxValueContext::KU_MaxValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MaxValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MaxValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MaxValue;
}


CypherParser::KU_MaxValueContext* CypherParser::kU_MaxValue() {
  KU_MaxValueContext *_localctx = _tracker.createInstance<KU_MaxValueContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_MaxValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(895);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(886);
        match(CypherParser::NO);
        setState(887);
        match(CypherParser::SP);
        setState(888);
        match(CypherParser::MAXVALUE);
        break;
      }

      case CypherParser::MAXVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(889);
        match(CypherParser::MAXVALUE);
        setState(890);
        match(CypherParser::SP);
        setState(892);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(891);
          match(CypherParser::MINUS);
        }
        setState(894);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StartWithContext ------------------------------------------------------------------

CypherParser::KU_StartWithContext::KU_StartWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StartWithContext::START() {
  return getToken(CypherParser::START, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StartWithContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_StartWithContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_StartWithContext::getRuleIndex() const {
  return CypherParser::RuleKU_StartWith;
}


CypherParser::KU_StartWithContext* CypherParser::kU_StartWith() {
  KU_StartWithContext *_localctx = _tracker.createInstance<KU_StartWithContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_StartWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(897);
    match(CypherParser::START);
    setState(898);
    match(CypherParser::SP);
    setState(901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WITH) {
      setState(899);
      match(CypherParser::WITH);
      setState(900);
      match(CypherParser::SP);
    }
    setState(904);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(903);
      match(CypherParser::MINUS);
    }
    setState(906);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CycleContext ------------------------------------------------------------------

CypherParser::KU_CycleContext::KU_CycleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CycleContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::KU_CycleContext::getRuleIndex() const {
  return CypherParser::RuleKU_Cycle;
}


CypherParser::KU_CycleContext* CypherParser::kU_Cycle() {
  KU_CycleContext *_localctx = _tracker.createInstance<KU_CycleContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_Cycle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(910);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NO) {
      setState(908);
      match(CypherParser::NO);
      setState(909);
      match(CypherParser::SP);
    }
    setState(912);
    match(CypherParser::CYCLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropContext ------------------------------------------------------------------

CypherParser::KU_DropContext::KU_DropContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}


size_t CypherParser::KU_DropContext::getRuleIndex() const {
  return CypherParser::RuleKU_Drop;
}


CypherParser::KU_DropContext* CypherParser::kU_Drop() {
  KU_DropContext *_localctx = _tracker.createInstance<KU_DropContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleKU_Drop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(914);
    match(CypherParser::DROP);
    setState(915);
    match(CypherParser::SP);
    setState(916);
    _la = _input->LA(1);
    if (!(((((_la - 62) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 62)) & 13) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(917);
    match(CypherParser::SP);
    setState(918);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(920);
    match(CypherParser::ALTER);
    setState(921);
    match(CypherParser::SP);
    setState(922);
    match(CypherParser::TABLE);
    setState(923);
    match(CypherParser::SP);
    setState(924);
    oC_SchemaName();
    setState(925);
    match(CypherParser::SP);
    setState(926);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(932);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(928);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(929);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(930);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(931);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_AddPropertyContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(934);
    match(CypherParser::ADD);
    setState(935);
    match(CypherParser::SP);
    setState(936);
    oC_PropertyKeyName();
    setState(937);
    match(CypherParser::SP);
    setState(938);
    kU_DataType(0);
    setState(943);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      setState(939);
      match(CypherParser::SP);
      setState(940);
      match(CypherParser::DEFAULT);
      setState(941);
      match(CypherParser::SP);
      setState(942);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(945);
    match(CypherParser::DROP);
    setState(946);
    match(CypherParser::SP);
    setState(947);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(949);
    match(CypherParser::RENAME);
    setState(950);
    match(CypherParser::SP);
    setState(951);
    match(CypherParser::TO);
    setState(952);
    match(CypherParser::SP);
    setState(953);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(955);
    match(CypherParser::RENAME);
    setState(956);
    match(CypherParser::SP);
    setState(957);
    oC_PropertyKeyName();
    setState(958);
    match(CypherParser::SP);
    setState(959);
    match(CypherParser::TO);
    setState(960);
    match(CypherParser::SP);
    setState(961);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(963);
    kU_PropertyDefinition();
    setState(974);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(965);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(964);
          match(CypherParser::SP);
        }
        setState(967);
        match(CypherParser::T__2);
        setState(969);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(968);
          match(CypherParser::SP);
        }
        setState(971);
        kU_PropertyDefinition(); 
      }
      setState(976);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(977);
    oC_PropertyKeyName();
    setState(978);
    match(CypherParser::SP);
    setState(979);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsDDLContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsDDLContext::KU_PropertyDefinitionsDDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionDDLContext *> CypherParser::KU_PropertyDefinitionsDDLContext::kU_PropertyDefinitionDDL() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionDDLContext>();
}

CypherParser::KU_PropertyDefinitionDDLContext* CypherParser::KU_PropertyDefinitionsDDLContext::kU_PropertyDefinitionDDL(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionDDLContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsDDLContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsDDLContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsDDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionsDDL;
}


CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::kU_PropertyDefinitionsDDL() {
  KU_PropertyDefinitionsDDLContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsDDLContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_PropertyDefinitionsDDL);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(981);
    kU_PropertyDefinitionDDL();
    setState(992);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(983);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(982);
          match(CypherParser::SP);
        }
        setState(985);
        match(CypherParser::T__2);
        setState(987);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(986);
          match(CypherParser::SP);
        }
        setState(989);
        kU_PropertyDefinitionDDL(); 
      }
      setState(994);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionDDLContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionDDLContext::KU_PropertyDefinitionDDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionDDLContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionDDLContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionDDLContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionDDLContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionDDLContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertyDefinitionDDLContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionDDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionDDL;
}


CypherParser::KU_PropertyDefinitionDDLContext* CypherParser::kU_PropertyDefinitionDDL() {
  KU_PropertyDefinitionDDLContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionDDLContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleKU_PropertyDefinitionDDL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(995);
    oC_PropertyKeyName();
    setState(996);
    match(CypherParser::SP);
    setState(997);
    kU_DataType(0);
    setState(1002);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      setState(998);
      match(CypherParser::SP);
      setState(999);
      match(CypherParser::DEFAULT);
      setState(1000);
      match(CypherParser::SP);
      setState(1001);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1004);
    match(CypherParser::PRIMARY);
    setState(1005);
    match(CypherParser::SP);
    setState(1006);
    match(CypherParser::KEY);
    setState(1008);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1007);
      match(CypherParser::SP);
    }
    setState(1010);
    match(CypherParser::T__1);
    setState(1012);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1011);
      match(CypherParser::SP);
    }
    setState(1014);
    oC_PropertyKeyName();
    setState(1016);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1015);
      match(CypherParser::SP);
    }
    setState(1018);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

std::vector<CypherParser::OC_IntegerLiteralContext *> CypherParser::KU_DataTypeContext::oC_IntegerLiteral() {
  return getRuleContexts<CypherParser::OC_IntegerLiteralContext>();
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_DataTypeContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 92;
  enterRecursionRule(_localctx, 92, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1094);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
    case 1: {
      setState(1021);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(1022);
      match(CypherParser::UNION);
      setState(1024);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1023);
        match(CypherParser::SP);
      }
      setState(1026);
      match(CypherParser::T__1);
      setState(1028);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1027);
        match(CypherParser::SP);
      }
      setState(1030);
      kU_PropertyDefinitions();
      setState(1032);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1031);
        match(CypherParser::SP);
      }
      setState(1034);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      setState(1036);
      oC_SymbolicName();
      setState(1038);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1037);
        match(CypherParser::SP);
      }
      setState(1040);
      match(CypherParser::T__1);
      setState(1042);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1041);
        match(CypherParser::SP);
      }
      setState(1044);
      kU_PropertyDefinitions();
      setState(1046);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1045);
        match(CypherParser::SP);
      }
      setState(1048);
      match(CypherParser::T__3);
      break;
    }

    case 4: {
      setState(1050);
      oC_SymbolicName();
      setState(1052);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1051);
        match(CypherParser::SP);
      }
      setState(1054);
      match(CypherParser::T__1);
      setState(1056);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1055);
        match(CypherParser::SP);
      }
      setState(1058);
      kU_DataType(0);
      setState(1060);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1059);
        match(CypherParser::SP);
      }
      setState(1062);
      match(CypherParser::T__2);
      setState(1064);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1063);
        match(CypherParser::SP);
      }
      setState(1066);
      kU_DataType(0);
      setState(1068);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1067);
        match(CypherParser::SP);
      }
      setState(1070);
      match(CypherParser::T__3);
      break;
    }

    case 5: {
      setState(1072);
      match(CypherParser::DECIMAL);
      setState(1074);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1073);
        match(CypherParser::SP);
      }
      setState(1076);
      match(CypherParser::T__1);
      setState(1078);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1077);
        match(CypherParser::SP);
      }
      setState(1080);
      oC_IntegerLiteral();
      setState(1082);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1081);
        match(CypherParser::SP);
      }
      setState(1084);
      match(CypherParser::T__2);
      setState(1086);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1085);
        match(CypherParser::SP);
      }
      setState(1088);
      oC_IntegerLiteral();
      setState(1090);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1089);
        match(CypherParser::SP);
      }
      setState(1092);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1100);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(1096);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(1097);
        kU_ListIdentifiers(); 
      }
      setState(1102);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1103);
    kU_ListIdentifier();
    setState(1107);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1104);
        kU_ListIdentifier(); 
      }
      setState(1109);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1110);
    match(CypherParser::T__6);
    setState(1112);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(1111);
      oC_IntegerLiteral();
    }
    setState(1114);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1118);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1116);
      oC_Explain();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1117);
      oC_Profile();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExplainContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExplainContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleOC_Explain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1123);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::SP) {
      setState(1120);
      match(CypherParser::SP);
      setState(1125);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1126);
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProfileContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProfileContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleOC_Profile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1131);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::SP) {
      setState(1128);
      match(CypherParser::SP);
      setState(1133);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1134);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1150);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1136);
      match(CypherParser::BEGIN);
      setState(1137);
      match(CypherParser::SP);
      setState(1138);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1139);
      match(CypherParser::BEGIN);
      setState(1140);
      match(CypherParser::SP);
      setState(1141);
      match(CypherParser::TRANSACTION);
      setState(1142);
      match(CypherParser::SP);
      setState(1143);
      match(CypherParser::READ);
      setState(1144);
      match(CypherParser::SP);
      setState(1145);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1146);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1147);
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1148);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1149);
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1154);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(1152);
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(1153);
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1156);
    match(CypherParser::LOAD);
    setState(1157);
    match(CypherParser::SP);
    setState(1158);
    match(CypherParser::EXTENSION);
    setState(1159);
    match(CypherParser::SP);
    setState(1162);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1160);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1161);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1164);
    match(CypherParser::INSTALL);
    setState(1165);
    match(CypherParser::SP);
    setState(1166);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1168);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1191);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1170);
      oC_SingleQuery();
      setState(1177);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1172);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1171);
            match(CypherParser::SP);
          }
          setState(1174);
          oC_Union(); 
        }
        setState(1179);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1184); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1180);
                oC_Return();
                setState(1182);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1181);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1186); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1188);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1205);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1193);
      match(CypherParser::UNION);
      setState(1194);
      match(CypherParser::SP);
      setState(1195);
      match(CypherParser::ALL);
      setState(1197);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1196);
        match(CypherParser::SP);
      }
      setState(1199);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1200);
      match(CypherParser::UNION);
      setState(1202);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1201);
        match(CypherParser::SP);
      }
      setState(1204);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1209);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1207);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1208);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1256);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1217);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 2040693581152257) != 0)) {
        setState(1211);
        oC_ReadingClause();
        setState(1213);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1212);
          match(CypherParser::SP);
        }
        setState(1219);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1220);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1227);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 2040693581152257) != 0)) {
        setState(1221);
        oC_ReadingClause();
        setState(1223);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1222);
          match(CypherParser::SP);
        }
        setState(1229);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1230);
      oC_UpdatingClause();
      setState(1237);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1232);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1231);
            match(CypherParser::SP);
          }
          setState(1234);
          oC_UpdatingClause(); 
        }
        setState(1239);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx);
      }
      setState(1244);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
      case 1: {
        setState(1241);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1240);
          match(CypherParser::SP);
        }
        setState(1243);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1250); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1246);
        oC_ReadingClause();
        setState(1248);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
        case 1: {
          setState(1247);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1252); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 2040693581152257) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1262); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1258);
              kU_QueryPart();
              setState(1260);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1259);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1264); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1266);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1274);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 2040693581152257) != 0)) {
      setState(1268);
      oC_ReadingClause();
      setState(1270);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1269);
        match(CypherParser::SP);
      }
      setState(1276);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1283);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & 59) != 0)) {
      setState(1277);
      oC_UpdatingClause();
      setState(1279);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1278);
        match(CypherParser::SP);
      }
      setState(1285);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1286);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1292);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1288);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1289);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1290);
        oC_Set();
        break;
      }

      case CypherParser::DETACH:
      case CypherParser::DELETE: {
        enterOuterAlt(_localctx, 4);
        setState(1291);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1298);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(1294);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1295);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(1296);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1297);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1300);
    match(CypherParser::LOAD);
    setState(1318);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      setState(1301);
      match(CypherParser::SP);
      setState(1302);
      match(CypherParser::WITH);
      setState(1303);
      match(CypherParser::SP);
      setState(1304);
      match(CypherParser::HEADERS);
      setState(1306);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1305);
        match(CypherParser::SP);
      }
      setState(1308);
      match(CypherParser::T__1);
      setState(1310);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1309);
        match(CypherParser::SP);
      }
      setState(1312);
      kU_PropertyDefinitions();
      setState(1314);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1313);
        match(CypherParser::SP);
      }
      setState(1316);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    setState(1320);
    match(CypherParser::SP);
    setState(1321);
    match(CypherParser::FROM);
    setState(1322);
    match(CypherParser::SP);
    setState(1323);
    kU_ScanSource();
    setState(1328);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      setState(1325);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1324);
        match(CypherParser::SP);
      }
      setState(1327);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
    setState(1334);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      setState(1331);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1330);
        match(CypherParser::SP);
      }
      setState(1333);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1336);
    match(CypherParser::CALL);
    setState(1337);
    match(CypherParser::SP);
    setState(1338);
    oC_FunctionInvocation();
    setState(1343);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
    case 1: {
      setState(1340);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1339);
        match(CypherParser::SP);
      }
      setState(1342);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_HintContext* CypherParser::OC_MatchContext::oC_Hint() {
  return getRuleContext<CypherParser::OC_HintContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1345);
      match(CypherParser::OPTIONAL);
      setState(1346);
      match(CypherParser::SP);
    }
    setState(1349);
    match(CypherParser::MATCH);
    setState(1351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1350);
      match(CypherParser::SP);
    }
    setState(1353);
    oC_Pattern();
    setState(1358);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      setState(1355);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1354);
        match(CypherParser::SP);
      }
      setState(1357);
      oC_Hint();
      break;
    }

    default:
      break;
    }

    setState(1361);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      setState(1360);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1367);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      setState(1364);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1363);
        match(CypherParser::SP);
      }
      setState(1366);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_HintContext ------------------------------------------------------------------

CypherParser::OC_HintContext::OC_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_Hint_PartContext *> CypherParser::OC_HintContext::oC_Hint_Part() {
  return getRuleContexts<CypherParser::OC_Hint_PartContext>();
}

CypherParser::OC_Hint_PartContext* CypherParser::OC_HintContext::oC_Hint_Part(size_t i) {
  return getRuleContext<CypherParser::OC_Hint_PartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_HintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_HintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_HintContext::getRuleIndex() const {
  return CypherParser::RuleOC_Hint;
}


CypherParser::OC_HintContext* CypherParser::oC_Hint() {
  OC_HintContext *_localctx = _tracker.createInstance<OC_HintContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_Hint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1369);
    match(CypherParser::T__8);
    setState(1371);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1370);
      match(CypherParser::SP);
    }
    setState(1373);
    oC_Hint_Part();
    setState(1384);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1375);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1374);
          match(CypherParser::SP);
        }
        setState(1377);
        match(CypherParser::T__2);
        setState(1379);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1378);
          match(CypherParser::SP);
        }
        setState(1381);
        oC_Hint_Part(); 
      }
      setState(1386);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
    }
    setState(1388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1387);
      match(CypherParser::SP);
    }
    setState(1390);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_Hint_PartContext ------------------------------------------------------------------

CypherParser::OC_Hint_PartContext::OC_Hint_PartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::OC_Hint_PartContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_Hint_PartContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_Hint_PartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_Hint_PartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_Hint_PartContext::getRuleIndex() const {
  return CypherParser::RuleOC_Hint_Part;
}


CypherParser::OC_Hint_PartContext* CypherParser::oC_Hint_Part() {
  OC_Hint_PartContext *_localctx = _tracker.createInstance<OC_Hint_PartContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_Hint_Part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1416);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 1);
        setState(1392);
        match(CypherParser::T__1);
        setState(1394);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1393);
          match(CypherParser::SP);
        }
        setState(1396);
        oC_SymbolicName();
        setState(1407);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1398);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1397);
              match(CypherParser::SP);
            }
            setState(1400);
            match(CypherParser::T__2);
            setState(1402);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1401);
              match(CypherParser::SP);
            }
            setState(1404);
            oC_SymbolicName(); 
          }
          setState(1409);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx);
        }
        setState(1411);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1410);
          match(CypherParser::SP);
        }
        setState(1413);
        match(CypherParser::T__3);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1415);
        oC_SymbolicName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1418);
    match(CypherParser::UNWIND);
    setState(1420);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1419);
      match(CypherParser::SP);
    }
    setState(1422);
    oC_Expression();
    setState(1423);
    match(CypherParser::SP);
    setState(1424);
    match(CypherParser::AS);
    setState(1425);
    match(CypherParser::SP);
    setState(1426);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1428);
    match(CypherParser::CREATE);
    setState(1430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1429);
      match(CypherParser::SP);
    }
    setState(1432);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1434);
    match(CypherParser::MERGE);
    setState(1436);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1435);
      match(CypherParser::SP);
    }
    setState(1438);
    oC_Pattern();
    setState(1443);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1439);
        match(CypherParser::SP);
        setState(1440);
        oC_MergeAction(); 
      }
      setState(1445);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1456);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1446);
      match(CypherParser::ON);
      setState(1447);
      match(CypherParser::SP);
      setState(1448);
      match(CypherParser::MATCH);
      setState(1449);
      match(CypherParser::SP);
      setState(1450);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1451);
      match(CypherParser::ON);
      setState(1452);
      match(CypherParser::SP);
      setState(1453);
      match(CypherParser::CREATE);
      setState(1454);
      match(CypherParser::SP);
      setState(1455);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1458);
    match(CypherParser::SET);
    setState(1460);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1459);
      match(CypherParser::SP);
    }
    setState(1462);
    oC_SetItem();
    setState(1473);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1464);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1463);
          match(CypherParser::SP);
        }
        setState(1466);
        match(CypherParser::T__2);
        setState(1468);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1467);
          match(CypherParser::SP);
        }
        setState(1470);
        oC_SetItem(); 
      }
      setState(1475);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1476);
    oC_PropertyExpression();
    setState(1478);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1477);
      match(CypherParser::SP);
    }
    setState(1480);
    match(CypherParser::T__5);
    setState(1482);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1481);
      match(CypherParser::SP);
    }
    setState(1484);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1486);
      match(CypherParser::DETACH);
      setState(1487);
      match(CypherParser::SP);
    }
    setState(1490);
    match(CypherParser::DELETE);
    setState(1492);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1491);
      match(CypherParser::SP);
    }
    setState(1494);
    oC_Expression();
    setState(1505);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1496);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1495);
          match(CypherParser::SP);
        }
        setState(1498);
        match(CypherParser::T__2);
        setState(1500);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1499);
          match(CypherParser::SP);
        }
        setState(1502);
        oC_Expression(); 
      }
      setState(1507);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1508);
    match(CypherParser::WITH);
    setState(1509);
    oC_ProjectionBody();
    setState(1514);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      setState(1511);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1510);
        match(CypherParser::SP);
      }
      setState(1513);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1516);
    match(CypherParser::RETURN);
    setState(1517);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1523);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      setState(1520);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1519);
        match(CypherParser::SP);
      }
      setState(1522);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1525);
    match(CypherParser::SP);
    setState(1526);
    oC_ProjectionItems();
    setState(1529);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      setState(1527);
      match(CypherParser::SP);
      setState(1528);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1533);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      setState(1531);
      match(CypherParser::SP);
      setState(1532);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1537);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      setState(1535);
      match(CypherParser::SP);
      setState(1536);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1567);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1539);
        match(CypherParser::STAR);
        setState(1550);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1541);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1540);
              match(CypherParser::SP);
            }
            setState(1543);
            match(CypherParser::T__2);
            setState(1545);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1544);
              match(CypherParser::SP);
            }
            setState(1547);
            oC_ProjectionItem(); 
          }
          setState(1552);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__9:
      case CypherParser::T__27:
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::NOT:
      case CypherParser::MINUS:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::NULL_:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::COUNT:
      case CypherParser::EXISTS:
      case CypherParser::CASE:
      case CypherParser::END:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1553);
        oC_ProjectionItem();
        setState(1564);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1555);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1554);
              match(CypherParser::SP);
            }
            setState(1557);
            match(CypherParser::T__2);
            setState(1559);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1558);
              match(CypherParser::SP);
            }
            setState(1561);
            oC_ProjectionItem(); 
          }
          setState(1566);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1576);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1569);
      oC_Expression();
      setState(1570);
      match(CypherParser::SP);
      setState(1571);
      match(CypherParser::AS);
      setState(1572);
      match(CypherParser::SP);
      setState(1573);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1575);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1578);
    match(CypherParser::ORDER);
    setState(1579);
    match(CypherParser::SP);
    setState(1580);
    match(CypherParser::BY);
    setState(1581);
    match(CypherParser::SP);
    setState(1582);
    oC_SortItem();
    setState(1590);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1583);
      match(CypherParser::T__2);
      setState(1585);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1584);
        match(CypherParser::SP);
      }
      setState(1587);
      oC_SortItem();
      setState(1592);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1593);
    match(CypherParser::L_SKIP);
    setState(1594);
    match(CypherParser::SP);
    setState(1595);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1597);
    match(CypherParser::LIMIT);
    setState(1598);
    match(CypherParser::SP);
    setState(1599);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1601);
    oC_Expression();
    setState(1606);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
    case 1: {
      setState(1603);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1602);
        match(CypherParser::SP);
      }
      setState(1605);
      _la = _input->LA(1);
      if (!(((((_la - 117) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 117)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1608);
    match(CypherParser::WHERE);
    setState(1609);
    match(CypherParser::SP);
    setState(1610);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1612);
    oC_PatternPart();
    setState(1623);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1614);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1613);
          match(CypherParser::SP);
        }
        setState(1616);
        match(CypherParser::T__2);
        setState(1618);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1617);
          match(CypherParser::SP);
        }
        setState(1620);
        oC_PatternPart(); 
      }
      setState(1625);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1637);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1626);
        oC_Variable();
        setState(1628);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1627);
          match(CypherParser::SP);
        }
        setState(1630);
        match(CypherParser::T__5);
        setState(1632);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1631);
          match(CypherParser::SP);
        }
        setState(1634);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1636);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1639);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1655);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1641);
      oC_NodePattern();
      setState(1648);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1643);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1642);
            match(CypherParser::SP);
          }
          setState(1645);
          oC_PatternElementChain(); 
        }
        setState(1650);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1651);
      match(CypherParser::T__1);
      setState(1652);
      oC_PatternElement();
      setState(1653);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1657);
    match(CypherParser::T__1);
    setState(1659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1658);
      match(CypherParser::SP);
    }
    setState(1665);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 19868389125) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 302256393) != 0)) {
      setState(1661);
      oC_Variable();
      setState(1663);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1662);
        match(CypherParser::SP);
      }
    }
    setState(1671);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1667);
      oC_NodeLabels();
      setState(1669);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1668);
        match(CypherParser::SP);
      }
    }
    setState(1677);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__9) {
      setState(1673);
      kU_Properties();
      setState(1675);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1674);
        match(CypherParser::SP);
      }
    }
    setState(1679);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1681);
    oC_RelationshipPattern();
    setState(1683);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1682);
      match(CypherParser::SP);
    }
    setState(1685);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1731);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1687);
      oC_LeftArrowHead();
      setState(1689);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1688);
        match(CypherParser::SP);
      }
      setState(1691);
      oC_Dash();
      setState(1693);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
      case 1: {
        setState(1692);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1696);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1695);
        oC_RelationshipDetail();
      }
      setState(1699);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1698);
        match(CypherParser::SP);
      }
      setState(1701);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1703);
      oC_Dash();
      setState(1705);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
      case 1: {
        setState(1704);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1708);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1707);
        oC_RelationshipDetail();
      }
      setState(1711);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1710);
        match(CypherParser::SP);
      }
      setState(1713);
      oC_Dash();
      setState(1715);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1714);
        match(CypherParser::SP);
      }
      setState(1717);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1719);
      oC_Dash();
      setState(1721);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
      case 1: {
        setState(1720);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1724);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1723);
        oC_RelationshipDetail();
      }
      setState(1727);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1726);
        match(CypherParser::SP);
      }
      setState(1729);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1733);
    match(CypherParser::T__6);
    setState(1735);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1734);
      match(CypherParser::SP);
    }
    setState(1741);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 19868389125) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 302256393) != 0)) {
      setState(1737);
      oC_Variable();
      setState(1739);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1738);
        match(CypherParser::SP);
      }
    }
    setState(1747);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1743);
      oC_RelationshipTypes();
      setState(1745);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1744);
        match(CypherParser::SP);
      }
    }
    setState(1753);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1749);
      oC_RangeLiteral();
      setState(1751);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1750);
        match(CypherParser::SP);
      }
    }
    setState(1759);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__9) {
      setState(1755);
      kU_Properties();
      setState(1757);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1756);
        match(CypherParser::SP);
      }
    }
    setState(1761);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1763);
    match(CypherParser::T__9);
    setState(1765);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1764);
      match(CypherParser::SP);
    }
    setState(1800);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 19868389125) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 302256393) != 0)) {
      setState(1767);
      oC_PropertyKeyName();
      setState(1769);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1768);
        match(CypherParser::SP);
      }
      setState(1771);
      match(CypherParser::COLON);
      setState(1773);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1772);
        match(CypherParser::SP);
      }
      setState(1775);
      oC_Expression();
      setState(1777);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1776);
        match(CypherParser::SP);
      }
      setState(1797);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1779);
        match(CypherParser::T__2);
        setState(1781);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1780);
          match(CypherParser::SP);
        }
        setState(1783);
        oC_PropertyKeyName();
        setState(1785);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1784);
          match(CypherParser::SP);
        }
        setState(1787);
        match(CypherParser::COLON);
        setState(1789);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1788);
          match(CypherParser::SP);
        }
        setState(1791);
        oC_Expression();
        setState(1793);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1792);
          match(CypherParser::SP);
        }
        setState(1799);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1802);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1804);
    match(CypherParser::COLON);
    setState(1806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1805);
      match(CypherParser::SP);
    }
    setState(1808);
    oC_RelTypeName();
    setState(1822);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1810);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1809);
          match(CypherParser::SP);
        }
        setState(1812);
        match(CypherParser::T__11);
        setState(1814);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(1813);
          match(CypherParser::COLON);
        }
        setState(1817);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1816);
          match(CypherParser::SP);
        }
        setState(1819);
        oC_RelTypeName(); 
      }
      setState(1824);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_LabelNameContext *> CypherParser::OC_NodeLabelsContext::oC_LabelName() {
  return getRuleContexts<CypherParser::OC_LabelNameContext>();
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelsContext::oC_LabelName(size_t i) {
  return getRuleContext<CypherParser::OC_LabelNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1825);
    match(CypherParser::COLON);
    setState(1827);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1826);
      match(CypherParser::SP);
    }
    setState(1829);
    oC_LabelName();
    setState(1845);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1831);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx)) {
        case 1: {
          setState(1830);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1834);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::T__11) {
          setState(1833);
          match(CypherParser::T__11);
        }
        setState(1837);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(1836);
          match(CypherParser::COLON);
        }
        setState(1840);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1839);
          match(CypherParser::SP);
        }
        setState(1842);
        oC_LabelName(); 
      }
      setState(1847);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1848);
    match(CypherParser::STAR);
    setState(1850);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      setState(1849);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1856);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1852);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(1853);
        match(CypherParser::ALL);
        setState(1854);
        match(CypherParser::SP);
        setState(1855);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__9:
      case CypherParser::T__12:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(1859);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx)) {
    case 1: {
      setState(1858);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1875);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      setState(1862);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1861);
        oC_LowerBound();
      }
      setState(1865);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1864);
        match(CypherParser::SP);
      }
      setState(1867);
      match(CypherParser::T__12);
      setState(1869);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx)) {
      case 1: {
        setState(1868);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1872);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1871);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(1874);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(1881);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
    case 1: {
      setState(1878);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1877);
        match(CypherParser::SP);
      }
      setState(1880);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1883);
    match(CypherParser::T__1);
    setState(1885);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1884);
      match(CypherParser::SP);
    }
    setState(1887);
    oC_Variable();
    setState(1889);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1888);
      match(CypherParser::SP);
    }
    setState(1891);
    match(CypherParser::T__2);
    setState(1893);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1892);
      match(CypherParser::SP);
    }
    setState(1895);
    oC_Variable();
    setState(1904);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
    case 1: {
      setState(1897);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1896);
        match(CypherParser::SP);
      }
      setState(1899);
      match(CypherParser::T__11);
      setState(1901);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1900);
        match(CypherParser::SP);
      }
      setState(1903);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__11 || _la == CypherParser::SP) {
      setState(1907);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1906);
        match(CypherParser::SP);
      }
      setState(1909);
      match(CypherParser::T__11);
      setState(1911);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1910);
        match(CypherParser::SP);
      }
      setState(1913);
      kU_IntermediateRelProjectionItems();
      setState(1915);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1914);
        match(CypherParser::SP);
      }
      setState(1917);
      match(CypherParser::T__2);
      setState(1919);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1918);
        match(CypherParser::SP);
      }
      setState(1921);
      kU_IntermediateNodeProjectionItems();
      setState(1923);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1922);
        match(CypherParser::SP);
      }
    }
    setState(1927);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1929);
    match(CypherParser::T__9);
    setState(1931);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx)) {
    case 1: {
      setState(1930);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 6917599396385865855) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 319199209) != 0)) {
      setState(1933);
      oC_ProjectionItems();
    }
    setState(1937);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1936);
      match(CypherParser::SP);
    }
    setState(1939);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1941);
    match(CypherParser::T__9);
    setState(1943);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx)) {
    case 1: {
      setState(1942);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1946);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 6917599396385865855) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 319199209) != 0)) {
      setState(1945);
      oC_ProjectionItems();
    }
    setState(1949);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1948);
      match(CypherParser::SP);
    }
    setState(1951);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1953);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1955);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1957);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1959);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1961);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1963);
    oC_XorExpression();
    setState(1970);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1964);
        match(CypherParser::SP);
        setState(1965);
        match(CypherParser::OR);
        setState(1966);
        match(CypherParser::SP);
        setState(1967);
        oC_XorExpression(); 
      }
      setState(1972);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1973);
    oC_AndExpression();
    setState(1980);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1974);
        match(CypherParser::SP);
        setState(1975);
        match(CypherParser::XOR);
        setState(1976);
        match(CypherParser::SP);
        setState(1977);
        oC_AndExpression(); 
      }
      setState(1982);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1983);
    oC_NotExpression();
    setState(1990);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1984);
        match(CypherParser::SP);
        setState(1985);
        match(CypherParser::AND);
        setState(1986);
        match(CypherParser::SP);
        setState(1987);
        oC_NotExpression(); 
      }
      setState(1992);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1999);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(1993);
      match(CypherParser::NOT);
      setState(1995);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1994);
        match(CypherParser::SP);
      }
      setState(2001);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2002);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2043);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2004);
      kU_BitwiseOrOperatorExpression();
      setState(2016);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2006);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2005);
            match(CypherParser::SP);
          }
          setState(2008);
          kU_ComparisonOperator();
          setState(2010);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2009);
            match(CypherParser::SP);
          }
          setState(2012);
          kU_BitwiseOrOperatorExpression(); 
        }
        setState(2018);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2019);
      kU_BitwiseOrOperatorExpression();
      setState(2021);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2020);
        match(CypherParser::SP);
      }
      setState(2023);
      kU_ComparisonOperator();
      setState(2025);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2024);
        match(CypherParser::SP);
      }
      setState(2027);
      kU_BitwiseOrOperatorExpression();
      setState(2037); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2029);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2028);
                  match(CypherParser::SP);
                }
                setState(2031);
                kU_ComparisonOperator();
                setState(2033);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2032);
                  match(CypherParser::SP);
                }
                setState(2035);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2039); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2045);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1032256) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2047);
    kU_BitwiseAndOperatorExpression();
    setState(2058);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2049);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2048);
          match(CypherParser::SP);
        }
        setState(2051);
        match(CypherParser::T__11);
        setState(2053);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2052);
          match(CypherParser::SP);
        }
        setState(2055);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(2060);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2061);
    kU_BitShiftOperatorExpression();
    setState(2072);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2063);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2062);
          match(CypherParser::SP);
        }
        setState(2065);
        match(CypherParser::T__19);
        setState(2067);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2066);
          match(CypherParser::SP);
        }
        setState(2069);
        kU_BitShiftOperatorExpression(); 
      }
      setState(2074);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2075);
    oC_AddOrSubtractExpression();
    setState(2087);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2077);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2076);
          match(CypherParser::SP);
        }
        setState(2079);
        kU_BitShiftOperator();
        setState(2081);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2080);
          match(CypherParser::SP);
        }
        setState(2083);
        oC_AddOrSubtractExpression(); 
      }
      setState(2089);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2090);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20

    || _la == CypherParser::T__21)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2092);
    oC_MultiplyDivideModuloExpression();
    setState(2104);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2094);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2093);
          match(CypherParser::SP);
        }
        setState(2096);
        kU_AddOrSubtractOperator();
        setState(2098);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2097);
          match(CypherParser::SP);
        }
        setState(2100);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(2106);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2107);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__22 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2109);
    oC_PowerOfExpression();
    setState(2121);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2111);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2110);
          match(CypherParser::SP);
        }
        setState(2113);
        kU_MultiplyDivideModuloOperator();
        setState(2115);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2114);
          match(CypherParser::SP);
        }
        setState(2117);
        oC_PowerOfExpression(); 
      }
      setState(2123);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2124);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__23

    || _la == CypherParser::T__24 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2126);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2137);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2128);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2127);
          match(CypherParser::SP);
        }
        setState(2130);
        match(CypherParser::T__25);
        setState(2132);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2131);
          match(CypherParser::SP);
        }
        setState(2134);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2139);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2146);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2140);
      match(CypherParser::MINUS);
      setState(2142);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2141);
        match(CypherParser::SP);
      }
      setState(2148);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2149);
    oC_StringListNullOperatorExpression();
    setState(2154);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx)) {
    case 1: {
      setState(2151);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2150);
        match(CypherParser::SP);
      }
      setState(2153);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2156);
    oC_PropertyOrLabelsExpression();
    setState(2164);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx)) {
    case 1: {
      setState(2157);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(2159); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2158);
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2161); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      setState(2163);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2185);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2166);
      match(CypherParser::SP);
      setState(2167);
      match(CypherParser::IN);
      setState(2169);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2168);
        match(CypherParser::SP);
      }
      setState(2171);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2172);
      match(CypherParser::T__6);
      setState(2173);
      oC_Expression();
      setState(2174);
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2176);
      match(CypherParser::T__6);
      setState(2178);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 6917529027641688191) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 319199209) != 0)) {
        setState(2177);
        oC_Expression();
      }
      setState(2180);
      match(CypherParser::COLON);
      setState(2182);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 6917529027641688191) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 319199209) != 0)) {
        setState(2181);
        oC_Expression();
      }
      setState(2184);
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2198);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx)) {
    case 1: {
      setState(2187);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(2188);
      match(CypherParser::SP);
      setState(2189);
      match(CypherParser::STARTS);
      setState(2190);
      match(CypherParser::SP);
      setState(2191);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(2192);
      match(CypherParser::SP);
      setState(2193);
      match(CypherParser::ENDS);
      setState(2194);
      match(CypherParser::SP);
      setState(2195);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(2196);
      match(CypherParser::SP);
      setState(2197);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(2201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2200);
      match(CypherParser::SP);
    }
    setState(2203);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2206);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2205);
      match(CypherParser::SP);
    }
    setState(2208);
    match(CypherParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2220);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2210);
      match(CypherParser::SP);
      setState(2211);
      match(CypherParser::IS);
      setState(2212);
      match(CypherParser::SP);
      setState(2213);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2214);
      match(CypherParser::SP);
      setState(2215);
      match(CypherParser::IS);
      setState(2216);
      match(CypherParser::SP);
      setState(2217);
      match(CypherParser::NOT);
      setState(2218);
      match(CypherParser::SP);
      setState(2219);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2222);
    oC_Atom();
    setState(2229);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2224);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2223);
          match(CypherParser::SP);
        }
        setState(2226);
        oC_PropertyLookup(); 
      }
      setState(2231);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2241);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2232);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2233);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2234);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2235);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2236);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2237);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2238);
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2239);
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2240);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2249);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2243);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(2244);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::TRUE:
      case CypherParser::FALSE: {
        enterOuterAlt(_localctx, 3);
        setState(2245);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(2246);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(2247);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__9: {
        enterOuterAlt(_localctx, 6);
        setState(2248);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2251);
    _la = _input->LA(1);
    if (!(_la == CypherParser::TRUE

    || _la == CypherParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2253);
    match(CypherParser::T__6);
    setState(2255);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2254);
      match(CypherParser::SP);
    }
    setState(2270);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 6917529027641688191) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 319199209) != 0)) {
      setState(2257);
      oC_Expression();
      setState(2259);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2258);
        match(CypherParser::SP);
      }
      setState(2267);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2261);
        kU_ListEntry();
        setState(2263);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2262);
          match(CypherParser::SP);
        }
        setState(2269);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2272);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2274);
    match(CypherParser::T__2);
    setState(2276);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
    case 1: {
      setState(2275);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2279);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 6917529027641688191) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 319199209) != 0)) {
      setState(2278);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2281);
    match(CypherParser::T__9);
    setState(2283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2282);
      match(CypherParser::SP);
    }
    setState(2285);
    kU_StructField();
    setState(2287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2286);
      match(CypherParser::SP);
    }
    setState(2299);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2289);
      match(CypherParser::T__2);
      setState(2291);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2290);
        match(CypherParser::SP);
      }
      setState(2293);
      kU_StructField();
      setState(2295);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2294);
        match(CypherParser::SP);
      }
      setState(2301);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2302);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2306);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2304);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2305);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2308);
      match(CypherParser::SP);
    }
    setState(2311);
    match(CypherParser::COLON);
    setState(2313);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2312);
      match(CypherParser::SP);
    }
    setState(2315);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2317);
    match(CypherParser::T__1);
    setState(2319);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2318);
      match(CypherParser::SP);
    }
    setState(2321);
    oC_Expression();
    setState(2323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2322);
      match(CypherParser::SP);
    }
    setState(2325);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2375);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2327);
      match(CypherParser::COUNT);
      setState(2329);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2328);
        match(CypherParser::SP);
      }
      setState(2331);
      match(CypherParser::T__1);
      setState(2333);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2332);
        match(CypherParser::SP);
      }
      setState(2335);
      match(CypherParser::STAR);
      setState(2337);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2336);
        match(CypherParser::SP);
      }
      setState(2339);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2340);
      oC_FunctionName();
      setState(2342);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2341);
        match(CypherParser::SP);
      }
      setState(2344);
      match(CypherParser::T__1);
      setState(2346);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2345);
        match(CypherParser::SP);
      }
      setState(2352);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2348);
        match(CypherParser::DISTINCT);
        setState(2350);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2349);
          match(CypherParser::SP);
        }
      }
      setState(2371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 6917529027641688191) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 319199209) != 0)) {
        setState(2354);
        kU_FunctionParameter();
        setState(2356);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2355);
          match(CypherParser::SP);
        }
        setState(2368);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2358);
          match(CypherParser::T__2);
          setState(2360);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2359);
            match(CypherParser::SP);
          }
          setState(2362);
          kU_FunctionParameter();
          setState(2364);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2363);
            match(CypherParser::SP);
          }
          setState(2370);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2373);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2377);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2388);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx)) {
    case 1: {
      setState(2379);
      oC_SymbolicName();
      setState(2381);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2380);
        match(CypherParser::SP);
      }
      setState(2383);
      match(CypherParser::COLON);
      setState(2384);
      match(CypherParser::T__5);
      setState(2386);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2385);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(2390);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2392);
    oC_NodePattern();
    setState(2397); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2394);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2393);
                match(CypherParser::SP);
              }
              setState(2396);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2399); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2401);
    match(CypherParser::EXISTS);
    setState(2403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2402);
      match(CypherParser::SP);
    }
    setState(2405);
    match(CypherParser::T__9);
    setState(2407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2406);
      match(CypherParser::SP);
    }
    setState(2409);
    match(CypherParser::MATCH);
    setState(2411);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2410);
      match(CypherParser::SP);
    }
    setState(2413);
    oC_Pattern();
    setState(2418);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 412, _ctx)) {
    case 1: {
      setState(2415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2414);
        match(CypherParser::SP);
      }
      setState(2417);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2421);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2420);
      match(CypherParser::SP);
    }
    setState(2423);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2425);
    match(CypherParser::COUNT);
    setState(2427);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2426);
      match(CypherParser::SP);
    }
    setState(2429);
    match(CypherParser::T__9);
    setState(2431);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2430);
      match(CypherParser::SP);
    }
    setState(2433);
    match(CypherParser::MATCH);
    setState(2435);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2434);
      match(CypherParser::SP);
    }
    setState(2437);
    oC_Pattern();
    setState(2442);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 418, _ctx)) {
    case 1: {
      setState(2439);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2438);
        match(CypherParser::SP);
      }
      setState(2441);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2444);
      match(CypherParser::SP);
    }
    setState(2447);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2449);
    match(CypherParser::T__4);
    setState(2451);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2450);
      match(CypherParser::SP);
    }
    setState(2455);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2453);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2454);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2479);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 427, _ctx)) {
    case 1: {
      setState(2457);
      match(CypherParser::CASE);
      setState(2462); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2459);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2458);
                  match(CypherParser::SP);
                }
                setState(2461);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2464); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 423, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2466);
      match(CypherParser::CASE);
      setState(2468);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2467);
        match(CypherParser::SP);
      }
      setState(2470);
      oC_Expression();
      setState(2475); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2472);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2471);
                  match(CypherParser::SP);
                }
                setState(2474);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2477); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 426, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2489);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 430, _ctx)) {
    case 1: {
      setState(2482);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2481);
        match(CypherParser::SP);
      }
      setState(2484);
      match(CypherParser::ELSE);
      setState(2486);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2485);
        match(CypherParser::SP);
      }
      setState(2488);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2492);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2491);
      match(CypherParser::SP);
    }
    setState(2494);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2496);
    match(CypherParser::WHEN);
    setState(2498);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2497);
      match(CypherParser::SP);
    }
    setState(2500);
    oC_Expression();
    setState(2502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2501);
      match(CypherParser::SP);
    }
    setState(2504);
    match(CypherParser::THEN);
    setState(2506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2505);
      match(CypherParser::SP);
    }
    setState(2508);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 292, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2510);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 294, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2514);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2512);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2513);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 296, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2516);
    match(CypherParser::T__27);
    setState(2519);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2517);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2518);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 298, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2521);
    oC_Atom();
    setState(2523);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2522);
      match(CypherParser::SP);
    }
    setState(2525);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 300, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2527);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 302, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2529);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 304, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2531);
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 306, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2533);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 308, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2540);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2535);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2536);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2538);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END: {
        enterOuterAlt(_localctx, 4);
        setState(2539);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IN() {
  return getToken(CypherParser::IN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::START() {
  return getToken(CypherParser::START, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 310, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2542);
    _la = _input->LA(1);
    if (!(((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 19868389125) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 4361) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 312, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2544);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8053096448) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 314, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2546);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 128849149952) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 316, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2548);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281337537757184) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 46: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
