
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_Option", "kU_Options", 
      "kU_DetachDatabase", "kU_UseDatabase", "kU_StandaloneCall", "kU_CommentOn", 
      "kU_CreateMacro", "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", 
      "kU_ParsingOptions", "kU_IfNotExists", "kU_CreateNodeTable", "kU_CreateRelTable", 
      "kU_CreateRelTableGroup", "kU_RelTableConnection", "kU_CreateRdfGraph", 
      "kU_CreateSequence", "kU_CreateType", "kU_SequenceOptions", "kU_IncrementBy", 
      "kU_MinValue", "kU_MaxValue", "kU_StartWith", "kU_Cycle", "kU_IfExists", 
      "kU_Drop", "kU_AlterTable", "kU_AlterOptions", "kU_AddProperty", "kU_Default", 
      "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", "kU_PropertyDefinitions", 
      "kU_PropertyDefinition", "kU_PropertyDefinitionsDDL", "kU_PropertyDefinitionDDL", 
      "kU_CreateNodeConstraint", "kU_DataType", "kU_ListIdentifiers", "kU_ListIdentifier", 
      "oC_AnyCypherOption", "oC_Explain", "oC_Profile", "kU_Transaction", 
      "kU_Extension", "kU_LoadExtension", "kU_InstallExtension", "oC_Query", 
      "kU_ProjectGraph", "kU_GraphProjectionTableItems", "oC_RegularQuery", 
      "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
      "kU_QueryPart", "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", 
      "kU_InQueryCall", "kU_GraphProjectionTableItem", "kU_GraphProjectionColumnItems", 
      "kU_GraphProjectionColumnItem", "oC_Match", "kU_Hint", "kU_JoinNode", 
      "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", "oC_Set", 
      "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "oC_NodePatternForAlgo", "oC_RelationshipDetailForAlgo", "oC_AlgoParameter", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_RangeLiteral", 
      "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "kU_LambdaParameter", "kU_LambdaVars", "oC_PathPatterns", 
      "oC_ExistSubquery", "kU_CountSubquery", "oC_PropertyLookup", "oC_CaseExpression", 
      "oC_CaseAlternative", "oC_Variable", "oC_NumberLiteral", "oC_Parameter", 
      "oC_PropertyExpression", "oC_PropertyKeyName", "oC_IntegerLiteral", 
      "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", "kU_NonReservedKeywords", 
      "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "','", "')'", "'.'", "'='", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'!='", 
      "'&'", "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'$'", 
      "'\\u27E8'", "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
      "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", 
      "'\\u2013'", "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
      "'\\uFF0D'", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "'*'", "", "'-'", "'!'", "':'", "", "", "", "", "", "", "", "", 
      "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "ADD", "ALL", 
      "ALTER", "AND", "AS", "ASC", "ASCENDING", "ATTACH", "BEGIN", "BY", 
      "CALL", "CASE", "CAST", "COLUMN", "COMMENT", "COMMIT", "COMMIT_SKIP_CHECKPOINT", 
      "CONTAINS", "COPY", "COUNT", "CREATE", "CYCLE", "DATABASE", "DBTYPE", 
      "DEFAULT", "DELETE", "DESC", "DESCENDING", "DETACH", "DISTINCT", "DROP", 
      "ELSE", "END", "ENDS", "EXISTS", "EXPLAIN", "EXPORT", "EXTENSION", 
      "FALSE", "FROM", "GLOB", "GRAPH", "GROUP", "HEADERS", "HINT", "IMPORT", 
      "IF", "IN", "INCREMENT", "INSTALL", "IS", "JOIN", "KEY", "LIMIT", 
      "LOAD", "MACRO", "MATCH", "MAXVALUE", "MERGE", "MINVALUE", "MULTI_JOIN", 
      "NO", "NODE", "NOT", "NULL", "ON", "ONLY", "OPTIONAL", "OR", "ORDER", 
      "PRIMARY", "PROFILE", "PROJECT", "RDFGRAPH", "READ", "REL", "RENAME", 
      "RETURN", "ROLLBACK", "ROLLBACK_SKIP_CHECKPOINT", "SEQUENCE", "SET", 
      "SHORTEST", "START", "STARTS", "TABLE", "THEN", "TO", "TRANSACTION", 
      "TRUE", "TYPE", "UNION", "UNWIND", "USE", "WHEN", "WHERE", "WITH", 
      "WRITE", "XOR", "DECIMAL", "STAR", "L_SKIP", "MINUS", "FACTORIAL", 
      "COLON", "StringLiteral", "EscapedChar", "DecimalInteger", "HexLetter", 
      "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", 
      "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", 
      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "CypherComment", 
      "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,169,2824,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,1,0,1,0,3,0,349,8,0,1,0,1,0,3,0,353,8,0,
  	1,0,5,0,356,8,0,10,0,12,0,359,9,0,1,0,3,0,362,8,0,1,0,1,0,1,1,3,1,367,
  	8,1,1,1,3,1,370,8,1,1,1,1,1,3,1,374,8,1,1,1,3,1,377,8,1,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	1,2,3,2,401,8,2,1,3,1,3,1,3,1,3,3,3,407,8,3,1,3,1,3,3,3,411,8,3,1,3,3,
  	3,414,8,3,1,3,1,3,1,3,1,3,3,3,420,8,3,1,3,3,3,423,8,3,1,4,1,4,3,4,427,
  	8,4,1,4,1,4,3,4,431,8,4,1,4,1,4,3,4,435,8,4,1,4,5,4,438,8,4,10,4,12,4,
  	441,9,4,1,4,3,4,444,8,4,1,4,1,4,1,5,1,5,1,5,3,5,451,8,5,1,5,1,5,3,5,455,
  	8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,463,8,5,1,5,1,5,3,5,467,8,5,1,6,1,6,1,
  	6,1,6,1,6,1,6,1,6,1,6,3,6,477,8,6,1,6,1,6,3,6,481,8,6,1,6,1,6,3,6,485,
  	8,6,1,6,5,6,488,8,6,10,6,12,6,491,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
  	1,7,1,7,3,7,503,8,7,1,7,1,7,3,7,507,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,515,
  	8,7,1,7,3,7,518,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,526,8,8,1,8,3,8,529,8,
  	8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,544,
  	8,10,1,10,1,10,1,10,3,10,549,8,10,1,10,1,10,1,10,1,10,3,10,555,8,10,1,
  	10,1,10,3,10,559,8,10,1,10,3,10,562,8,10,1,10,3,10,565,8,10,1,10,1,10,
  	1,11,1,11,3,11,571,8,11,1,11,1,11,3,11,575,8,11,1,11,1,11,1,12,1,12,3,
  	12,581,8,12,1,12,1,12,3,12,585,8,12,1,12,5,12,588,8,12,10,12,12,12,591,
  	9,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,
  	605,8,15,1,15,1,15,3,15,609,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,631,
  	8,17,1,17,1,17,3,17,635,8,17,1,17,3,17,638,8,17,1,17,3,17,641,8,17,1,
  	17,3,17,644,8,17,1,17,3,17,647,8,17,1,17,1,17,3,17,651,8,17,1,17,5,17,
  	654,8,17,10,17,12,17,657,9,17,1,17,3,17,660,8,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,18,1,18,3,18,670,8,18,1,18,1,18,3,18,674,8,18,1,18,5,18,677,
  	8,18,10,18,12,18,680,9,18,1,19,1,19,3,19,684,8,19,1,19,1,19,1,19,3,19,
  	689,8,19,1,19,1,19,1,20,1,20,3,20,695,8,20,1,20,1,20,3,20,699,8,20,1,
  	20,1,20,3,20,703,8,20,1,20,5,20,706,8,20,10,20,12,20,709,9,20,1,20,1,
  	20,1,20,1,20,3,20,715,8,20,1,20,1,20,3,20,719,8,20,1,20,1,20,3,20,723,
  	8,20,1,20,3,20,726,8,20,1,21,1,21,3,21,730,8,21,1,21,1,21,3,21,734,8,
  	21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,3,23,753,8,23,1,23,1,23,3,23,757,8,23,1,23,1,23,3,23,
  	761,8,23,1,23,1,23,3,23,765,8,23,1,23,1,23,3,23,769,8,23,1,23,1,23,1,
  	23,3,23,774,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
  	24,3,24,787,8,24,1,24,1,24,3,24,791,8,24,1,24,1,24,3,24,795,8,24,1,24,
  	1,24,3,24,799,8,24,1,24,1,24,3,24,803,8,24,1,24,1,24,3,24,807,8,24,3,
  	24,809,8,24,1,24,1,24,3,24,813,8,24,1,24,1,24,3,24,817,8,24,3,24,819,
  	8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	3,25,834,8,25,1,25,1,25,3,25,838,8,25,1,25,1,25,3,25,842,8,25,1,25,1,
  	25,3,25,846,8,25,1,25,1,25,3,25,850,8,25,1,25,4,25,853,8,25,11,25,12,
  	25,854,1,25,3,25,858,8,25,1,25,1,25,3,25,862,8,25,1,25,1,25,3,25,866,
  	8,25,3,25,868,8,25,1,25,1,25,3,25,872,8,25,1,25,1,25,3,25,876,8,25,3,
  	25,878,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,3,27,897,8,27,1,27,1,27,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,3,28,908,8,28,1,28,1,28,1,28,5,28,913,8,28,10,28,12,
  	28,916,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,928,
  	8,29,1,30,1,30,1,30,1,30,1,30,3,30,935,8,30,1,31,1,31,1,31,1,31,3,31,
  	941,8,31,1,31,3,31,944,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,
  	32,954,8,32,1,32,3,32,957,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,965,
  	8,33,1,33,3,33,968,8,33,1,34,1,34,1,34,1,34,3,34,974,8,34,1,34,3,34,977,
  	8,34,1,34,1,34,1,35,1,35,3,35,983,8,35,1,35,1,35,1,36,1,36,1,36,1,36,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,998,8,37,1,37,1,37,1,38,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,1014,8,39,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,3,40,1023,8,40,1,41,1,41,1,41,1,41,1,42,
  	1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,45,1,45,3,45,1049,8,45,1,45,1,45,3,45,1053,8,45,1,45,
  	5,45,1056,8,45,10,45,12,45,1059,9,45,1,46,1,46,1,46,1,46,1,47,1,47,3,
  	47,1067,8,47,1,47,1,47,3,47,1071,8,47,1,47,5,47,1074,8,47,10,47,12,47,
  	1077,9,47,1,48,1,48,1,48,1,48,1,48,3,48,1084,8,48,1,49,1,49,1,49,1,49,
  	3,49,1090,8,49,1,49,1,49,3,49,1094,8,49,1,49,1,49,3,49,1098,8,49,1,49,
  	1,49,1,50,1,50,1,50,1,50,3,50,1106,8,50,1,50,1,50,3,50,1110,8,50,1,50,
  	1,50,3,50,1114,8,50,1,50,1,50,1,50,1,50,3,50,1120,8,50,1,50,1,50,3,50,
  	1124,8,50,1,50,1,50,3,50,1128,8,50,1,50,1,50,1,50,1,50,3,50,1134,8,50,
  	1,50,1,50,3,50,1138,8,50,1,50,1,50,3,50,1142,8,50,1,50,1,50,3,50,1146,
  	8,50,1,50,1,50,3,50,1150,8,50,1,50,1,50,1,50,1,50,3,50,1156,8,50,1,50,
  	1,50,3,50,1160,8,50,1,50,1,50,3,50,1164,8,50,1,50,1,50,3,50,1168,8,50,
  	1,50,1,50,3,50,1172,8,50,1,50,1,50,3,50,1176,8,50,1,50,1,50,5,50,1180,
  	8,50,10,50,12,50,1183,9,50,1,51,1,51,5,51,1187,8,51,10,51,12,51,1190,
  	9,51,1,52,1,52,3,52,1194,8,52,1,52,1,52,1,53,1,53,3,53,1200,8,53,1,54,
  	5,54,1203,8,54,10,54,12,54,1206,9,54,1,54,1,54,1,55,5,55,1211,8,55,10,
  	55,12,55,1214,9,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
  	1,56,1,56,1,56,1,56,1,56,1,56,3,56,1232,8,56,1,57,1,57,3,57,1236,8,57,
  	1,58,1,58,1,58,1,58,1,58,1,58,3,58,1244,8,58,1,59,1,59,1,59,1,59,1,60,
  	1,60,3,60,1252,8,60,3,60,1254,8,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
  	1,61,3,61,1264,8,61,1,61,1,61,3,61,1268,8,61,1,61,1,61,3,61,1272,8,61,
  	1,61,1,61,1,62,1,62,3,62,1278,8,62,1,62,1,62,3,62,1282,8,62,1,62,5,62,
  	1285,8,62,10,62,12,62,1288,9,62,1,63,1,63,3,63,1292,8,63,1,63,5,63,1295,
  	8,63,10,63,12,63,1298,9,63,1,63,1,63,3,63,1302,8,63,4,63,1304,8,63,11,
  	63,12,63,1305,1,63,1,63,1,63,3,63,1311,8,63,1,64,1,64,1,64,1,64,3,64,
  	1317,8,64,1,64,1,64,1,64,3,64,1322,8,64,1,64,3,64,1325,8,64,1,65,1,65,
  	3,65,1329,8,65,1,66,1,66,3,66,1333,8,66,5,66,1335,8,66,10,66,12,66,1338,
  	9,66,1,66,1,66,1,66,3,66,1343,8,66,5,66,1345,8,66,10,66,12,66,1348,9,
  	66,1,66,1,66,3,66,1352,8,66,1,66,5,66,1355,8,66,10,66,12,66,1358,9,66,
  	1,66,3,66,1361,8,66,1,66,3,66,1364,8,66,1,66,1,66,3,66,1368,8,66,4,66,
  	1370,8,66,11,66,12,66,1371,1,66,1,66,3,66,1376,8,66,1,67,1,67,3,67,1380,
  	8,67,4,67,1382,8,67,11,67,12,67,1383,1,67,1,67,1,68,1,68,3,68,1390,8,
  	68,5,68,1392,8,68,10,68,12,68,1395,9,68,1,68,1,68,3,68,1399,8,68,5,68,
  	1401,8,68,10,68,12,68,1404,9,68,1,68,1,68,1,69,1,69,1,69,1,69,3,69,1412,
  	8,69,1,70,1,70,1,70,1,70,3,70,1418,8,70,1,71,1,71,1,71,1,71,1,71,1,71,
  	3,71,1426,8,71,1,71,1,71,3,71,1430,8,71,1,71,1,71,3,71,1434,8,71,1,71,
  	1,71,3,71,1438,8,71,1,71,1,71,1,71,1,71,1,71,3,71,1445,8,71,1,71,3,71,
  	1448,8,71,1,71,3,71,1451,8,71,1,71,3,71,1454,8,71,1,72,1,72,3,72,1458,
  	8,72,3,72,1460,8,72,1,72,1,72,1,72,1,72,3,72,1466,8,72,1,72,3,72,1469,
  	8,72,1,73,1,73,3,73,1473,8,73,1,73,1,73,3,73,1477,8,73,1,73,1,73,3,73,
  	1481,8,73,1,73,1,73,3,73,1485,8,73,1,74,1,74,3,74,1489,8,74,1,74,1,74,
  	3,74,1493,8,74,1,74,5,74,1496,8,74,10,74,12,74,1499,9,74,1,75,1,75,1,
  	75,3,75,1504,8,75,1,75,1,75,3,75,1508,8,75,1,76,1,76,3,76,1512,8,76,1,
  	76,1,76,3,76,1516,8,76,1,76,1,76,1,76,3,76,1521,8,76,1,76,1,76,3,76,1525,
  	8,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,3,78,1534,8,78,1,78,1,78,3,78,
  	1538,8,78,1,78,1,78,1,78,3,78,1543,8,78,1,78,1,78,1,78,1,78,1,78,1,78,
  	1,78,1,78,1,78,1,78,4,78,1555,8,78,11,78,12,78,1556,5,78,1559,8,78,10,
  	78,12,78,1562,9,78,1,79,1,79,3,79,1566,8,79,1,79,1,79,1,79,1,79,1,79,
  	1,79,1,80,1,80,3,80,1576,8,80,1,80,1,80,1,81,1,81,3,81,1582,8,81,1,81,
  	1,81,1,81,5,81,1587,8,81,10,81,12,81,1590,9,81,1,82,1,82,1,82,1,82,1,
  	82,1,82,1,82,1,82,1,82,1,82,3,82,1602,8,82,1,83,1,83,3,83,1606,8,83,1,
  	83,1,83,3,83,1610,8,83,1,83,1,83,3,83,1614,8,83,1,83,5,83,1617,8,83,10,
  	83,12,83,1620,9,83,1,84,1,84,3,84,1624,8,84,1,84,1,84,3,84,1628,8,84,
  	1,84,1,84,1,85,1,85,3,85,1634,8,85,1,85,1,85,3,85,1638,8,85,1,85,1,85,
  	3,85,1642,8,85,1,85,1,85,3,85,1646,8,85,1,85,5,85,1649,8,85,10,85,12,
  	85,1652,9,85,1,86,1,86,1,86,3,86,1657,8,86,1,86,3,86,1660,8,86,1,87,1,
  	87,1,87,1,88,3,88,1666,8,88,1,88,3,88,1669,8,88,1,88,1,88,1,88,1,88,3,
  	88,1675,8,88,1,88,1,88,3,88,1679,8,88,1,88,1,88,3,88,1683,8,88,1,89,1,
  	89,3,89,1687,8,89,1,89,1,89,3,89,1691,8,89,1,89,5,89,1694,8,89,10,89,
  	12,89,1697,9,89,1,89,1,89,3,89,1701,8,89,1,89,1,89,3,89,1705,8,89,1,89,
  	5,89,1708,8,89,10,89,12,89,1711,9,89,3,89,1713,8,89,1,90,1,90,1,90,1,
  	90,1,90,1,90,1,90,3,90,1722,8,90,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1730,
  	8,91,1,91,1,91,3,91,1734,8,91,1,91,5,91,1737,8,91,10,91,12,91,1740,9,
  	91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,94,1,94,3,94,1752,8,94,1,
  	94,3,94,1755,8,94,1,95,1,95,1,95,1,95,1,96,1,96,3,96,1763,8,96,1,96,1,
  	96,3,96,1767,8,96,1,96,5,96,1770,8,96,10,96,12,96,1773,9,96,1,97,1,97,
  	3,97,1777,8,97,1,97,1,97,3,97,1781,8,97,1,97,1,97,1,97,3,97,1786,8,97,
  	1,98,1,98,1,99,1,99,3,99,1792,8,99,1,99,5,99,1795,8,99,10,99,12,99,1798,
  	9,99,1,99,1,99,1,99,1,99,3,99,1804,8,99,1,100,1,100,3,100,1808,8,100,
  	1,100,1,100,3,100,1812,8,100,3,100,1814,8,100,1,100,1,100,3,100,1818,
  	8,100,3,100,1820,8,100,1,100,1,100,3,100,1824,8,100,3,100,1826,8,100,
  	1,100,1,100,1,101,1,101,3,101,1832,8,101,1,101,1,101,1,102,1,102,3,102,
  	1838,8,102,1,102,1,102,3,102,1842,8,102,1,102,3,102,1845,8,102,1,102,
  	3,102,1848,8,102,1,102,1,102,1,102,1,102,3,102,1854,8,102,1,102,3,102,
  	1857,8,102,1,102,3,102,1860,8,102,1,102,1,102,3,102,1864,8,102,1,102,
  	1,102,1,102,1,102,3,102,1870,8,102,1,102,3,102,1873,8,102,1,102,3,102,
  	1876,8,102,1,102,1,102,3,102,1880,8,102,1,103,1,103,3,103,1884,8,103,
  	1,103,1,103,3,103,1888,8,103,3,103,1890,8,103,1,103,1,103,3,103,1894,
  	8,103,3,103,1896,8,103,1,103,1,103,3,103,1900,8,103,3,103,1902,8,103,
  	1,103,1,103,3,103,1906,8,103,3,103,1908,8,103,1,103,1,103,1,104,1,104,
  	3,104,1914,8,104,1,104,1,104,3,104,1918,8,104,3,104,1920,8,104,1,104,
  	1,104,3,104,1924,8,104,3,104,1926,8,104,1,104,1,104,3,104,1930,8,104,
  	3,104,1932,8,104,1,104,1,104,1,105,1,105,3,105,1938,8,105,1,105,1,105,
  	3,105,1942,8,105,3,105,1944,8,105,1,105,1,105,3,105,1948,8,105,3,105,
  	1950,8,105,1,105,1,105,3,105,1954,8,105,3,105,1956,8,105,1,105,1,105,
  	1,106,1,106,3,106,1962,8,106,1,107,1,107,3,107,1966,8,107,1,107,1,107,
  	3,107,1970,8,107,1,107,1,107,3,107,1974,8,107,1,107,1,107,3,107,1978,
  	8,107,1,107,1,107,3,107,1982,8,107,1,107,1,107,3,107,1986,8,107,1,107,
  	1,107,3,107,1990,8,107,1,107,1,107,3,107,1994,8,107,5,107,1996,8,107,
  	10,107,12,107,1999,9,107,3,107,2001,8,107,1,107,1,107,1,108,1,108,3,108,
  	2007,8,108,1,108,1,108,3,108,2011,8,108,1,108,1,108,3,108,2015,8,108,
  	1,108,3,108,2018,8,108,1,108,5,108,2021,8,108,10,108,12,108,2024,9,108,
  	1,109,1,109,3,109,2028,8,109,1,109,1,109,3,109,2032,8,109,1,109,3,109,
  	2035,8,109,1,109,3,109,2038,8,109,1,109,3,109,2041,8,109,1,109,5,109,
  	2044,8,109,10,109,12,109,2047,9,109,1,110,1,110,3,110,2051,8,110,1,110,
  	1,110,1,110,1,110,3,110,2057,8,110,1,110,3,110,2060,8,110,1,110,3,110,
  	2063,8,110,1,110,3,110,2066,8,110,1,110,1,110,3,110,2070,8,110,1,110,
  	3,110,2073,8,110,1,110,3,110,2076,8,110,1,110,3,110,2079,8,110,1,110,
  	3,110,2082,8,110,1,111,1,111,3,111,2086,8,111,1,111,1,111,3,111,2090,
  	8,111,1,111,1,111,3,111,2094,8,111,1,111,1,111,3,111,2098,8,111,1,111,
  	1,111,3,111,2102,8,111,1,111,1,111,3,111,2106,8,111,3,111,2108,8,111,
  	1,111,3,111,2111,8,111,1,111,1,111,3,111,2115,8,111,1,111,1,111,3,111,
  	2119,8,111,1,111,1,111,3,111,2123,8,111,1,111,1,111,3,111,2127,8,111,
  	3,111,2129,8,111,1,111,1,111,1,112,1,112,3,112,2135,8,112,1,112,3,112,
  	2138,8,112,1,112,3,112,2141,8,112,1,112,1,112,1,113,1,113,3,113,2147,
  	8,113,1,113,3,113,2150,8,113,1,113,3,113,2153,8,113,1,113,1,113,1,114,
  	1,114,1,115,1,115,1,116,1,116,1,117,1,117,1,118,1,118,1,119,1,119,1,119,
  	1,119,1,119,5,119,2172,8,119,10,119,12,119,2175,9,119,1,120,1,120,1,120,
  	1,120,1,120,5,120,2182,8,120,10,120,12,120,2185,9,120,1,121,1,121,1,121,
  	1,121,1,121,5,121,2192,8,121,10,121,12,121,2195,9,121,1,122,1,122,3,122,
  	2199,8,122,5,122,2201,8,122,10,122,12,122,2204,9,122,1,122,1,122,1,123,
  	1,123,3,123,2210,8,123,1,123,1,123,3,123,2214,8,123,1,123,1,123,5,123,
  	2218,8,123,10,123,12,123,2221,9,123,1,123,1,123,3,123,2225,8,123,1,123,
  	1,123,3,123,2229,8,123,1,123,1,123,3,123,2233,8,123,1,123,1,123,3,123,
  	2237,8,123,1,123,1,123,4,123,2241,8,123,11,123,12,123,2242,1,123,1,123,
  	3,123,2247,8,123,1,124,1,124,1,125,1,125,3,125,2253,8,125,1,125,1,125,
  	3,125,2257,8,125,1,125,5,125,2260,8,125,10,125,12,125,2263,9,125,1,126,
  	1,126,3,126,2267,8,126,1,126,1,126,3,126,2271,8,126,1,126,5,126,2274,
  	8,126,10,126,12,126,2277,9,126,1,127,1,127,3,127,2281,8,127,1,127,1,127,
  	3,127,2285,8,127,1,127,1,127,5,127,2289,8,127,10,127,12,127,2292,9,127,
  	1,128,1,128,1,129,1,129,3,129,2298,8,129,1,129,1,129,3,129,2302,8,129,
  	1,129,1,129,5,129,2306,8,129,10,129,12,129,2309,9,129,1,130,1,130,1,131,
  	1,131,3,131,2315,8,131,1,131,1,131,3,131,2319,8,131,1,131,1,131,5,131,
  	2323,8,131,10,131,12,131,2326,9,131,1,132,1,132,1,133,1,133,3,133,2332,
  	8,133,1,133,1,133,3,133,2336,8,133,1,133,5,133,2339,8,133,10,133,12,133,
  	2342,9,133,1,134,1,134,3,134,2346,8,134,5,134,2348,8,134,10,134,12,134,
  	2351,9,134,1,134,1,134,3,134,2355,8,134,1,134,3,134,2358,8,134,1,135,
  	1,135,1,135,4,135,2363,8,135,11,135,12,135,2364,1,135,3,135,2368,8,135,
  	1,136,1,136,1,136,3,136,2373,8,136,1,136,1,136,1,136,1,136,1,136,1,136,
  	1,136,3,136,2382,8,136,1,136,1,136,3,136,2386,8,136,1,136,3,136,2389,
  	8,136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,
  	3,137,2402,8,137,1,137,3,137,2405,8,137,1,137,1,137,1,138,3,138,2410,
  	8,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
  	1,139,3,139,2424,8,139,1,140,1,140,3,140,2428,8,140,1,140,5,140,2431,
  	8,140,10,140,12,140,2434,9,140,1,141,1,141,1,141,1,141,1,141,1,141,1,
  	141,1,141,1,141,3,141,2445,8,141,1,142,1,142,1,142,1,142,1,142,1,142,
  	3,142,2453,8,142,1,143,1,143,1,144,1,144,3,144,2459,8,144,1,144,1,144,
  	3,144,2463,8,144,1,144,1,144,3,144,2467,8,144,5,144,2469,8,144,10,144,
  	12,144,2472,9,144,3,144,2474,8,144,1,144,1,144,1,145,1,145,3,145,2480,
  	8,145,1,145,3,145,2483,8,145,1,146,1,146,3,146,2487,8,146,1,146,1,146,
  	3,146,2491,8,146,1,146,1,146,3,146,2495,8,146,1,146,1,146,3,146,2499,
  	8,146,5,146,2501,8,146,10,146,12,146,2504,9,146,1,146,1,146,1,147,1,147,
  	3,147,2510,8,147,1,147,3,147,2513,8,147,1,147,1,147,3,147,2517,8,147,
  	1,147,1,147,1,148,1,148,3,148,2523,8,148,1,148,1,148,3,148,2527,8,148,
  	1,148,1,148,1,149,1,149,3,149,2533,8,149,1,149,1,149,3,149,2537,8,149,
  	1,149,1,149,3,149,2541,8,149,1,149,1,149,1,149,3,149,2546,8,149,1,149,
  	1,149,3,149,2550,8,149,1,149,1,149,3,149,2554,8,149,1,149,1,149,3,149,
  	2558,8,149,1,149,1,149,1,149,3,149,2563,8,149,1,149,3,149,2566,8,149,
  	1,149,3,149,2569,8,149,1,149,1,149,1,149,1,149,3,149,2575,8,149,1,149,
  	1,149,3,149,2579,8,149,1,149,1,149,3,149,2583,8,149,3,149,2585,8,149,
  	1,149,1,149,3,149,2589,8,149,1,149,1,149,3,149,2593,8,149,1,149,1,149,
  	3,149,2597,8,149,5,149,2599,8,149,10,149,12,149,2602,9,149,3,149,2604,
  	8,149,1,149,1,149,3,149,2608,8,149,1,150,1,150,1,151,1,151,3,151,2614,
  	8,151,1,151,1,151,1,151,3,151,2619,8,151,3,151,2621,8,151,1,151,1,151,
  	3,151,2625,8,151,1,152,1,152,3,152,2629,8,152,1,152,1,152,1,152,3,152,
  	2634,8,152,1,152,1,152,3,152,2638,8,152,1,153,1,153,1,153,3,153,2643,
  	8,153,1,153,1,153,3,153,2647,8,153,1,153,1,153,3,153,2651,8,153,1,153,
  	1,153,3,153,2655,8,153,5,153,2657,8,153,10,153,12,153,2660,9,153,1,153,
  	1,153,3,153,2664,8,153,1,154,1,154,3,154,2668,8,154,1,154,4,154,2671,
  	8,154,11,154,12,154,2672,1,155,1,155,3,155,2677,8,155,1,155,1,155,3,155,
  	2681,8,155,1,155,1,155,3,155,2685,8,155,1,155,1,155,3,155,2689,8,155,
  	1,155,3,155,2692,8,155,1,155,3,155,2695,8,155,1,155,1,155,1,156,1,156,
  	3,156,2701,8,156,1,156,1,156,3,156,2705,8,156,1,156,1,156,3,156,2709,
  	8,156,1,156,1,156,3,156,2713,8,156,1,156,3,156,2716,8,156,1,156,3,156,
  	2719,8,156,1,156,1,156,1,157,1,157,3,157,2725,8,157,1,157,1,157,3,157,
  	2729,8,157,1,158,1,158,3,158,2733,8,158,1,158,4,158,2736,8,158,11,158,
  	12,158,2737,1,158,1,158,3,158,2742,8,158,1,158,1,158,3,158,2746,8,158,
  	1,158,4,158,2749,8,158,11,158,12,158,2750,3,158,2753,8,158,1,158,3,158,
  	2756,8,158,1,158,1,158,3,158,2760,8,158,1,158,3,158,2763,8,158,1,158,
  	3,158,2766,8,158,1,158,1,158,1,159,1,159,3,159,2772,8,159,1,159,1,159,
  	3,159,2776,8,159,1,159,1,159,3,159,2780,8,159,1,159,1,159,1,160,1,160,
  	1,161,1,161,3,161,2788,8,161,1,162,1,162,1,162,3,162,2793,8,162,1,163,
  	1,163,3,163,2797,8,163,1,163,1,163,1,164,1,164,1,165,1,165,1,166,1,166,
  	1,167,1,167,1,168,1,168,1,168,1,168,1,168,3,168,2814,8,168,1,169,1,169,
  	1,170,1,170,1,171,1,171,1,172,1,172,1,172,0,2,100,156,173,0,2,4,6,8,10,
  	12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
  	58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
  	104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
  	140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
  	176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
  	212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
  	248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
  	284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
  	320,322,324,326,328,330,332,334,336,338,340,342,344,0,11,3,0,120,120,
  	127,127,132,132,2,0,52,53,73,74,2,0,6,6,13,18,1,0,20,21,2,0,22,22,149,
  	149,2,0,23,24,147,147,2,0,85,85,136,136,28,0,47,47,49,49,51,51,54,57,
  	61,62,64,66,68,69,72,72,75,75,77,77,82,84,88,88,92,93,95,95,97,97,99,
  	99,101,101,103,106,108,109,119,119,121,125,127,128,130,130,135,135,137,
  	137,140,140,144,144,146,146,2,0,14,14,28,31,2,0,16,16,32,35,2,0,36,46,
  	149,149,3203,0,346,1,0,0,0,2,366,1,0,0,0,4,400,1,0,0,0,6,402,1,0,0,0,
  	8,424,1,0,0,0,10,466,1,0,0,0,12,468,1,0,0,0,14,498,1,0,0,0,16,519,1,0,
  	0,0,18,530,1,0,0,0,20,536,1,0,0,0,22,568,1,0,0,0,24,578,1,0,0,0,26,592,
  	1,0,0,0,28,596,1,0,0,0,30,600,1,0,0,0,32,612,1,0,0,0,34,624,1,0,0,0,36,
  	667,1,0,0,0,38,681,1,0,0,0,40,725,1,0,0,0,42,727,1,0,0,0,44,737,1,0,0,
  	0,46,743,1,0,0,0,48,777,1,0,0,0,50,822,1,0,0,0,52,881,1,0,0,0,54,889,
  	1,0,0,0,56,900,1,0,0,0,58,917,1,0,0,0,60,934,1,0,0,0,62,936,1,0,0,0,64,
  	956,1,0,0,0,66,967,1,0,0,0,68,969,1,0,0,0,70,982,1,0,0,0,72,986,1,0,0,
  	0,74,990,1,0,0,0,76,1001,1,0,0,0,78,1013,1,0,0,0,80,1015,1,0,0,0,82,1024,
  	1,0,0,0,84,1028,1,0,0,0,86,1032,1,0,0,0,88,1038,1,0,0,0,90,1046,1,0,0,
  	0,92,1060,1,0,0,0,94,1064,1,0,0,0,96,1078,1,0,0,0,98,1085,1,0,0,0,100,
  	1175,1,0,0,0,102,1184,1,0,0,0,104,1191,1,0,0,0,106,1199,1,0,0,0,108,1204,
  	1,0,0,0,110,1212,1,0,0,0,112,1231,1,0,0,0,114,1235,1,0,0,0,116,1237,1,
  	0,0,0,118,1245,1,0,0,0,120,1253,1,0,0,0,122,1257,1,0,0,0,124,1275,1,0,
  	0,0,126,1310,1,0,0,0,128,1324,1,0,0,0,130,1328,1,0,0,0,132,1375,1,0,0,
  	0,134,1381,1,0,0,0,136,1393,1,0,0,0,138,1411,1,0,0,0,140,1417,1,0,0,0,
  	142,1419,1,0,0,0,144,1459,1,0,0,0,146,1470,1,0,0,0,148,1486,1,0,0,0,150,
  	1500,1,0,0,0,152,1511,1,0,0,0,154,1526,1,0,0,0,156,1542,1,0,0,0,158,1563,
  	1,0,0,0,160,1573,1,0,0,0,162,1579,1,0,0,0,164,1601,1,0,0,0,166,1603,1,
  	0,0,0,168,1621,1,0,0,0,170,1633,1,0,0,0,172,1653,1,0,0,0,174,1661,1,0,
  	0,0,176,1668,1,0,0,0,178,1712,1,0,0,0,180,1721,1,0,0,0,182,1723,1,0,0,
  	0,184,1741,1,0,0,0,186,1745,1,0,0,0,188,1749,1,0,0,0,190,1756,1,0,0,0,
  	192,1760,1,0,0,0,194,1785,1,0,0,0,196,1787,1,0,0,0,198,1803,1,0,0,0,200,
  	1805,1,0,0,0,202,1829,1,0,0,0,204,1879,1,0,0,0,206,1881,1,0,0,0,208,1911,
  	1,0,0,0,210,1935,1,0,0,0,212,1961,1,0,0,0,214,1963,1,0,0,0,216,2004,1,
  	0,0,0,218,2025,1,0,0,0,220,2048,1,0,0,0,222,2083,1,0,0,0,224,2132,1,0,
  	0,0,226,2144,1,0,0,0,228,2156,1,0,0,0,230,2158,1,0,0,0,232,2160,1,0,0,
  	0,234,2162,1,0,0,0,236,2164,1,0,0,0,238,2166,1,0,0,0,240,2176,1,0,0,0,
  	242,2186,1,0,0,0,244,2202,1,0,0,0,246,2246,1,0,0,0,248,2248,1,0,0,0,250,
  	2250,1,0,0,0,252,2264,1,0,0,0,254,2278,1,0,0,0,256,2293,1,0,0,0,258,2295,
  	1,0,0,0,260,2310,1,0,0,0,262,2312,1,0,0,0,264,2327,1,0,0,0,266,2329,1,
  	0,0,0,268,2349,1,0,0,0,270,2359,1,0,0,0,272,2388,1,0,0,0,274,2401,1,0,
  	0,0,276,2409,1,0,0,0,278,2423,1,0,0,0,280,2425,1,0,0,0,282,2444,1,0,0,
  	0,284,2452,1,0,0,0,286,2454,1,0,0,0,288,2456,1,0,0,0,290,2477,1,0,0,0,
  	292,2484,1,0,0,0,294,2509,1,0,0,0,296,2520,1,0,0,0,298,2607,1,0,0,0,300,
  	2609,1,0,0,0,302,2624,1,0,0,0,304,2626,1,0,0,0,306,2663,1,0,0,0,308,2665,
  	1,0,0,0,310,2674,1,0,0,0,312,2698,1,0,0,0,314,2722,1,0,0,0,316,2752,1,
  	0,0,0,318,2769,1,0,0,0,320,2783,1,0,0,0,322,2787,1,0,0,0,324,2789,1,0,
  	0,0,326,2794,1,0,0,0,328,2800,1,0,0,0,330,2802,1,0,0,0,332,2804,1,0,0,
  	0,334,2806,1,0,0,0,336,2813,1,0,0,0,338,2815,1,0,0,0,340,2817,1,0,0,0,
  	342,2819,1,0,0,0,344,2821,1,0,0,0,346,357,3,2,1,0,347,349,5,166,0,0,348,
  	347,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,352,5,1,0,0,351,353,5,
  	166,0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,356,3,2,1,
  	0,355,348,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,
  	361,1,0,0,0,359,357,1,0,0,0,360,362,5,166,0,0,361,360,1,0,0,0,361,362,
  	1,0,0,0,362,363,1,0,0,0,363,364,5,0,0,1,364,1,1,0,0,0,365,367,3,106,53,
  	0,366,365,1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,370,5,166,0,0,369,
  	368,1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,376,3,4,2,0,372,374,5,
  	166,0,0,373,372,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,5,1,0,
  	0,376,373,1,0,0,0,376,377,1,0,0,0,377,3,1,0,0,0,378,401,3,120,60,0,379,
  	401,3,46,23,0,380,401,3,48,24,0,381,401,3,50,25,0,382,401,3,54,27,0,383,
  	401,3,56,28,0,384,401,3,58,29,0,385,401,3,74,37,0,386,401,3,76,38,0,387,
  	401,3,6,3,0,388,401,3,12,6,0,389,401,3,14,7,0,390,401,3,30,15,0,391,401,
  	3,34,17,0,392,401,3,32,16,0,393,401,3,112,56,0,394,401,3,114,57,0,395,
  	401,3,16,8,0,396,401,3,18,9,0,397,401,3,20,10,0,398,401,3,26,13,0,399,
  	401,3,28,14,0,400,378,1,0,0,0,400,379,1,0,0,0,400,380,1,0,0,0,400,381,
  	1,0,0,0,400,382,1,0,0,0,400,383,1,0,0,0,400,384,1,0,0,0,400,385,1,0,0,
  	0,400,386,1,0,0,0,400,387,1,0,0,0,400,388,1,0,0,0,400,389,1,0,0,0,400,
  	390,1,0,0,0,400,391,1,0,0,0,400,392,1,0,0,0,400,393,1,0,0,0,400,394,1,
  	0,0,0,400,395,1,0,0,0,400,396,1,0,0,0,400,397,1,0,0,0,400,398,1,0,0,0,
  	400,399,1,0,0,0,401,5,1,0,0,0,402,403,5,65,0,0,403,404,5,166,0,0,404,
  	413,3,334,167,0,405,407,5,166,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,
  	408,1,0,0,0,408,410,3,8,4,0,409,411,5,166,0,0,410,409,1,0,0,0,410,411,
  	1,0,0,0,411,414,1,0,0,0,412,414,5,166,0,0,413,406,1,0,0,0,413,412,1,0,
  	0,0,414,415,1,0,0,0,415,416,5,86,0,0,416,417,5,166,0,0,417,422,3,10,5,
  	0,418,420,5,166,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,
  	423,3,42,21,0,422,419,1,0,0,0,422,423,1,0,0,0,423,7,1,0,0,0,424,426,5,
  	2,0,0,425,427,5,166,0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,
  	0,428,439,3,334,167,0,429,431,5,166,0,0,430,429,1,0,0,0,430,431,1,0,0,
  	0,431,432,1,0,0,0,432,434,5,3,0,0,433,435,5,166,0,0,434,433,1,0,0,0,434,
  	435,1,0,0,0,435,436,1,0,0,0,436,438,3,334,167,0,437,430,1,0,0,0,438,441,
  	1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,
  	0,442,444,5,166,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,
  	446,5,4,0,0,446,9,1,0,0,0,447,467,3,40,20,0,448,450,5,2,0,0,449,451,5,
  	166,0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,454,3,120,
  	60,0,453,455,5,166,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,
  	0,456,457,5,4,0,0,457,467,1,0,0,0,458,467,3,320,160,0,459,460,3,320,160,
  	0,460,462,5,5,0,0,461,463,5,166,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,
  	464,1,0,0,0,464,465,3,334,167,0,465,467,1,0,0,0,466,447,1,0,0,0,466,448,
  	1,0,0,0,466,458,1,0,0,0,466,459,1,0,0,0,467,11,1,0,0,0,468,469,5,65,0,
  	0,469,470,5,166,0,0,470,471,3,334,167,0,471,472,5,166,0,0,472,473,5,86,
  	0,0,473,474,5,166,0,0,474,476,5,2,0,0,475,477,5,166,0,0,476,475,1,0,0,
  	0,476,477,1,0,0,0,477,478,1,0,0,0,478,489,5,152,0,0,479,481,5,166,0,0,
  	480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,484,5,3,0,0,483,485,
  	5,166,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,488,5,152,
  	0,0,487,480,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,
  	492,1,0,0,0,491,489,1,0,0,0,492,493,5,4,0,0,493,494,5,166,0,0,494,495,
  	5,56,0,0,495,496,5,166,0,0,496,497,5,60,0,0,497,13,1,0,0,0,498,499,5,
  	65,0,0,499,500,5,166,0,0,500,502,5,2,0,0,501,503,5,166,0,0,502,501,1,
  	0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,506,3,120,60,0,505,507,5,166,
  	0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,5,4,0,0,509,
  	510,5,166,0,0,510,511,5,134,0,0,511,512,5,166,0,0,512,517,5,152,0,0,513,
  	515,5,166,0,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,518,
  	3,42,21,0,517,514,1,0,0,0,517,518,1,0,0,0,518,15,1,0,0,0,519,520,5,83,
  	0,0,520,521,5,166,0,0,521,522,5,69,0,0,522,523,5,166,0,0,523,528,5,152,
  	0,0,524,526,5,166,0,0,525,524,1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,
  	527,529,3,42,21,0,528,525,1,0,0,0,528,529,1,0,0,0,529,17,1,0,0,0,530,
  	531,5,92,0,0,531,532,5,166,0,0,532,533,5,69,0,0,533,534,5,166,0,0,534,
  	535,5,152,0,0,535,19,1,0,0,0,536,537,5,54,0,0,537,538,5,166,0,0,538,543,
  	5,152,0,0,539,540,5,166,0,0,540,541,5,51,0,0,541,542,5,166,0,0,542,544,
  	3,334,167,0,543,539,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,
  	166,0,0,546,548,5,2,0,0,547,549,5,166,0,0,548,547,1,0,0,0,548,549,1,0,
  	0,0,549,550,1,0,0,0,550,551,5,70,0,0,551,552,5,166,0,0,552,561,3,336,
  	168,0,553,555,5,166,0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,
  	0,556,558,5,3,0,0,557,559,5,166,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,
  	560,1,0,0,0,560,562,3,24,12,0,561,554,1,0,0,0,561,562,1,0,0,0,562,564,
  	1,0,0,0,563,565,5,166,0,0,564,563,1,0,0,0,564,565,1,0,0,0,565,566,1,0,
  	0,0,566,567,5,4,0,0,567,21,1,0,0,0,568,570,3,336,168,0,569,571,5,166,
  	0,0,570,569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,574,5,6,0,0,573,
  	575,5,166,0,0,574,573,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,577,
  	3,284,142,0,577,23,1,0,0,0,578,589,3,22,11,0,579,581,5,166,0,0,580,579,
  	1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,584,5,3,0,0,583,585,5,166,
  	0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,588,3,22,11,0,
  	587,580,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,25,
  	1,0,0,0,591,589,1,0,0,0,592,593,5,75,0,0,593,594,5,166,0,0,594,595,3,
  	334,167,0,595,27,1,0,0,0,596,597,5,140,0,0,597,598,5,166,0,0,598,599,
  	3,334,167,0,599,29,1,0,0,0,600,601,5,57,0,0,601,602,5,166,0,0,602,604,
  	3,336,168,0,603,605,5,166,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,
  	1,0,0,0,606,608,5,6,0,0,607,609,5,166,0,0,608,607,1,0,0,0,608,609,1,0,
  	0,0,609,610,1,0,0,0,610,611,3,236,118,0,611,31,1,0,0,0,612,613,5,61,0,
  	0,613,614,5,166,0,0,614,615,5,112,0,0,615,616,5,166,0,0,616,617,5,132,
  	0,0,617,618,5,166,0,0,618,619,3,334,167,0,619,620,5,166,0,0,620,621,5,
  	97,0,0,621,622,5,166,0,0,622,623,5,152,0,0,623,33,1,0,0,0,624,625,5,67,
  	0,0,625,626,5,166,0,0,626,627,5,102,0,0,627,628,5,166,0,0,628,630,3,300,
  	150,0,629,631,5,166,0,0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,
  	0,632,634,5,2,0,0,633,635,5,166,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,
  	637,1,0,0,0,636,638,3,36,18,0,637,636,1,0,0,0,637,638,1,0,0,0,638,640,
  	1,0,0,0,639,641,5,166,0,0,640,639,1,0,0,0,640,641,1,0,0,0,641,643,1,0,
  	0,0,642,644,3,38,19,0,643,642,1,0,0,0,643,644,1,0,0,0,644,655,1,0,0,0,
  	645,647,5,166,0,0,646,645,1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,
  	650,5,3,0,0,649,651,5,166,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,
  	1,0,0,0,652,654,3,38,19,0,653,646,1,0,0,0,654,657,1,0,0,0,655,653,1,0,
  	0,0,655,656,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,658,660,5,166,0,0,
  	659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,662,5,4,0,0,662,663,
  	5,166,0,0,663,664,5,51,0,0,664,665,5,166,0,0,665,666,3,236,118,0,666,
  	35,1,0,0,0,667,678,3,336,168,0,668,670,5,166,0,0,669,668,1,0,0,0,669,
  	670,1,0,0,0,670,671,1,0,0,0,671,673,5,3,0,0,672,674,5,166,0,0,673,672,
  	1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,677,3,336,168,0,676,669,1,
  	0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,37,1,0,0,0,
  	680,678,1,0,0,0,681,683,3,336,168,0,682,684,5,166,0,0,683,682,1,0,0,0,
  	683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,151,0,0,686,688,5,6,0,0,687,
  	689,5,166,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,691,
  	3,284,142,0,691,39,1,0,0,0,692,694,5,7,0,0,693,695,5,166,0,0,694,693,
  	1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,0,696,707,5,152,0,0,697,699,5,166,
  	0,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,702,5,3,0,0,701,
  	703,5,166,0,0,702,701,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,706,
  	5,152,0,0,705,698,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,0,
  	0,0,708,710,1,0,0,0,709,707,1,0,0,0,710,726,5,8,0,0,711,726,5,152,0,0,
  	712,714,5,87,0,0,713,715,5,166,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,
  	716,1,0,0,0,716,718,5,2,0,0,717,719,5,166,0,0,718,717,1,0,0,0,718,719,
  	1,0,0,0,719,720,1,0,0,0,720,722,5,152,0,0,721,723,5,166,0,0,722,721,1,
  	0,0,0,722,723,1,0,0,0,723,724,1,0,0,0,724,726,5,4,0,0,725,692,1,0,0,0,
  	725,711,1,0,0,0,725,712,1,0,0,0,726,41,1,0,0,0,727,729,5,2,0,0,728,730,
  	5,166,0,0,729,728,1,0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,733,3,24,
  	12,0,732,734,5,166,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,
  	0,735,736,5,4,0,0,736,43,1,0,0,0,737,738,5,93,0,0,738,739,5,166,0,0,739,
  	740,5,110,0,0,740,741,5,166,0,0,741,742,5,81,0,0,742,45,1,0,0,0,743,744,
  	5,67,0,0,744,745,5,166,0,0,745,746,5,109,0,0,746,747,5,166,0,0,747,748,
  	5,132,0,0,748,752,5,166,0,0,749,750,3,44,22,0,750,751,5,166,0,0,751,753,
  	1,0,0,0,752,749,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,756,3,334,
  	167,0,755,757,5,166,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,
  	0,758,760,5,2,0,0,759,761,5,166,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,
  	762,1,0,0,0,762,764,3,94,47,0,763,765,5,166,0,0,764,763,1,0,0,0,764,765,
  	1,0,0,0,765,766,1,0,0,0,766,768,5,3,0,0,767,769,5,166,0,0,768,767,1,0,
  	0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,3,98,49,0,771,773,1,0,0,0,
  	772,774,5,166,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,
  	776,5,4,0,0,776,47,1,0,0,0,777,778,5,67,0,0,778,779,5,166,0,0,779,780,
  	5,122,0,0,780,781,5,166,0,0,781,782,5,132,0,0,782,786,5,166,0,0,783,784,
  	3,44,22,0,784,785,5,166,0,0,785,787,1,0,0,0,786,783,1,0,0,0,786,787,1,
  	0,0,0,787,788,1,0,0,0,788,790,3,334,167,0,789,791,5,166,0,0,790,789,1,
  	0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,794,5,2,0,0,793,795,5,166,0,
  	0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,798,3,52,26,0,797,
  	799,5,166,0,0,798,797,1,0,0,0,798,799,1,0,0,0,799,808,1,0,0,0,800,802,
  	5,3,0,0,801,803,5,166,0,0,802,801,1,0,0,0,802,803,1,0,0,0,803,804,1,0,
  	0,0,804,806,3,94,47,0,805,807,5,166,0,0,806,805,1,0,0,0,806,807,1,0,0,
  	0,807,809,1,0,0,0,808,800,1,0,0,0,808,809,1,0,0,0,809,818,1,0,0,0,810,
  	812,5,3,0,0,811,813,5,166,0,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,
  	1,0,0,0,814,816,3,336,168,0,815,817,5,166,0,0,816,815,1,0,0,0,816,817,
  	1,0,0,0,817,819,1,0,0,0,818,810,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,
  	0,820,821,5,4,0,0,821,49,1,0,0,0,822,823,5,67,0,0,823,824,5,166,0,0,824,
  	825,5,122,0,0,825,826,5,166,0,0,826,827,5,132,0,0,827,828,5,166,0,0,828,
  	829,5,89,0,0,829,833,5,166,0,0,830,831,3,44,22,0,831,832,5,166,0,0,832,
  	834,1,0,0,0,833,830,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,837,3,
  	334,167,0,836,838,5,166,0,0,837,836,1,0,0,0,837,838,1,0,0,0,838,839,1,
  	0,0,0,839,841,5,2,0,0,840,842,5,166,0,0,841,840,1,0,0,0,841,842,1,0,0,
  	0,842,843,1,0,0,0,843,852,3,52,26,0,844,846,5,166,0,0,845,844,1,0,0,0,
  	845,846,1,0,0,0,846,847,1,0,0,0,847,849,5,3,0,0,848,850,5,166,0,0,849,
  	848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,853,3,52,26,0,852,845,
  	1,0,0,0,853,854,1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,
  	0,856,858,5,166,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,867,1,0,0,0,859,
  	861,5,3,0,0,860,862,5,166,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,863,
  	1,0,0,0,863,865,3,94,47,0,864,866,5,166,0,0,865,864,1,0,0,0,865,866,1,
  	0,0,0,866,868,1,0,0,0,867,859,1,0,0,0,867,868,1,0,0,0,868,877,1,0,0,0,
  	869,871,5,3,0,0,870,872,5,166,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,
  	873,1,0,0,0,873,875,3,336,168,0,874,876,5,166,0,0,875,874,1,0,0,0,875,
  	876,1,0,0,0,876,878,1,0,0,0,877,869,1,0,0,0,877,878,1,0,0,0,878,879,1,
  	0,0,0,879,880,5,4,0,0,880,51,1,0,0,0,881,882,5,86,0,0,882,883,5,166,0,
  	0,883,884,3,334,167,0,884,885,5,166,0,0,885,886,5,134,0,0,886,887,5,166,
  	0,0,887,888,3,334,167,0,888,53,1,0,0,0,889,890,5,67,0,0,890,891,5,166,
  	0,0,891,892,5,120,0,0,892,896,5,166,0,0,893,894,3,44,22,0,894,895,5,166,
  	0,0,895,897,1,0,0,0,896,893,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,
  	899,3,334,167,0,899,55,1,0,0,0,900,901,5,67,0,0,901,902,5,166,0,0,902,
  	903,5,127,0,0,903,907,5,166,0,0,904,905,3,44,22,0,905,906,5,166,0,0,906,
  	908,1,0,0,0,907,904,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,914,3,
  	334,167,0,910,911,5,166,0,0,911,913,3,60,30,0,912,910,1,0,0,0,913,916,
  	1,0,0,0,914,912,1,0,0,0,914,915,1,0,0,0,915,57,1,0,0,0,916,914,1,0,0,
  	0,917,918,5,67,0,0,918,919,5,166,0,0,919,920,5,137,0,0,920,921,5,166,
  	0,0,921,922,3,334,167,0,922,923,5,166,0,0,923,924,5,51,0,0,924,925,5,
  	166,0,0,925,927,3,100,50,0,926,928,5,166,0,0,927,926,1,0,0,0,927,928,
  	1,0,0,0,928,59,1,0,0,0,929,935,3,62,31,0,930,935,3,64,32,0,931,935,3,
  	66,33,0,932,935,3,68,34,0,933,935,3,70,35,0,934,929,1,0,0,0,934,930,1,
  	0,0,0,934,931,1,0,0,0,934,932,1,0,0,0,934,933,1,0,0,0,935,61,1,0,0,0,
  	936,937,5,95,0,0,937,940,5,166,0,0,938,939,5,56,0,0,939,941,5,166,0,0,
  	940,938,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,944,5,149,0,0,943,
  	942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,946,3,330,165,0,946,63,
  	1,0,0,0,947,948,5,108,0,0,948,949,5,166,0,0,949,957,5,106,0,0,950,951,
  	5,106,0,0,951,953,5,166,0,0,952,954,5,149,0,0,953,952,1,0,0,0,953,954,
  	1,0,0,0,954,955,1,0,0,0,955,957,3,330,165,0,956,947,1,0,0,0,956,950,1,
  	0,0,0,957,65,1,0,0,0,958,959,5,108,0,0,959,960,5,166,0,0,960,968,5,104,
  	0,0,961,962,5,104,0,0,962,964,5,166,0,0,963,965,5,149,0,0,964,963,1,0,
  	0,0,964,965,1,0,0,0,965,966,1,0,0,0,966,968,3,330,165,0,967,958,1,0,0,
  	0,967,961,1,0,0,0,968,67,1,0,0,0,969,970,5,130,0,0,970,973,5,166,0,0,
  	971,972,5,143,0,0,972,974,5,166,0,0,973,971,1,0,0,0,973,974,1,0,0,0,974,
  	976,1,0,0,0,975,977,5,149,0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,978,
  	1,0,0,0,978,979,3,330,165,0,979,69,1,0,0,0,980,981,5,108,0,0,981,983,
  	5,166,0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,985,5,68,
  	0,0,985,71,1,0,0,0,986,987,5,93,0,0,987,988,5,166,0,0,988,989,5,81,0,
  	0,989,73,1,0,0,0,990,991,5,77,0,0,991,992,5,166,0,0,992,993,7,0,0,0,993,
  	997,5,166,0,0,994,995,3,72,36,0,995,996,5,166,0,0,996,998,1,0,0,0,997,
  	994,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1000,3,334,167,0,1000,
  	75,1,0,0,0,1001,1002,5,49,0,0,1002,1003,5,166,0,0,1003,1004,5,132,0,0,
  	1004,1005,5,166,0,0,1005,1006,3,334,167,0,1006,1007,5,166,0,0,1007,1008,
  	3,78,39,0,1008,77,1,0,0,0,1009,1014,3,80,40,0,1010,1014,3,84,42,0,1011,
  	1014,3,86,43,0,1012,1014,3,88,44,0,1013,1009,1,0,0,0,1013,1010,1,0,0,
  	0,1013,1011,1,0,0,0,1013,1012,1,0,0,0,1014,79,1,0,0,0,1015,1016,5,47,
  	0,0,1016,1017,5,166,0,0,1017,1018,3,328,164,0,1018,1019,5,166,0,0,1019,
  	1022,3,100,50,0,1020,1021,5,166,0,0,1021,1023,3,82,41,0,1022,1020,1,0,
  	0,0,1022,1023,1,0,0,0,1023,81,1,0,0,0,1024,1025,5,71,0,0,1025,1026,5,
  	166,0,0,1026,1027,3,236,118,0,1027,83,1,0,0,0,1028,1029,5,77,0,0,1029,
  	1030,5,166,0,0,1030,1031,3,328,164,0,1031,85,1,0,0,0,1032,1033,5,123,
  	0,0,1033,1034,5,166,0,0,1034,1035,5,134,0,0,1035,1036,5,166,0,0,1036,
  	1037,3,334,167,0,1037,87,1,0,0,0,1038,1039,5,123,0,0,1039,1040,5,166,
  	0,0,1040,1041,3,328,164,0,1041,1042,5,166,0,0,1042,1043,5,134,0,0,1043,
  	1044,5,166,0,0,1044,1045,3,328,164,0,1045,89,1,0,0,0,1046,1057,3,92,46,
  	0,1047,1049,5,166,0,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,1050,1,
  	0,0,0,1050,1052,5,3,0,0,1051,1053,5,166,0,0,1052,1051,1,0,0,0,1052,1053,
  	1,0,0,0,1053,1054,1,0,0,0,1054,1056,3,92,46,0,1055,1048,1,0,0,0,1056,
  	1059,1,0,0,0,1057,1055,1,0,0,0,1057,1058,1,0,0,0,1058,91,1,0,0,0,1059,
  	1057,1,0,0,0,1060,1061,3,328,164,0,1061,1062,5,166,0,0,1062,1063,3,100,
  	50,0,1063,93,1,0,0,0,1064,1075,3,96,48,0,1065,1067,5,166,0,0,1066,1065,
  	1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1070,5,3,0,0,1069,1071,
  	5,166,0,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,
  	1074,3,96,48,0,1073,1066,1,0,0,0,1074,1077,1,0,0,0,1075,1073,1,0,0,0,
  	1075,1076,1,0,0,0,1076,95,1,0,0,0,1077,1075,1,0,0,0,1078,1079,3,328,164,
  	0,1079,1080,5,166,0,0,1080,1083,3,100,50,0,1081,1082,5,166,0,0,1082,1084,
  	3,82,41,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,97,1,0,0,0,1085,1086,
  	5,117,0,0,1086,1087,5,166,0,0,1087,1089,5,99,0,0,1088,1090,5,166,0,0,
  	1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1093,5,2,0,
  	0,1092,1094,5,166,0,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,
  	0,0,0,1095,1097,3,328,164,0,1096,1098,5,166,0,0,1097,1096,1,0,0,0,1097,
  	1098,1,0,0,0,1098,1099,1,0,0,0,1099,1100,5,4,0,0,1100,99,1,0,0,0,1101,
  	1102,6,50,-1,0,1102,1176,3,336,168,0,1103,1105,5,138,0,0,1104,1106,5,
  	166,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,1109,
  	5,2,0,0,1108,1110,5,166,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,
  	1111,1,0,0,0,1111,1113,3,90,45,0,1112,1114,5,166,0,0,1113,1112,1,0,0,
  	0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,1116,5,4,0,0,1116,1176,1,0,
  	0,0,1117,1119,3,336,168,0,1118,1120,5,166,0,0,1119,1118,1,0,0,0,1119,
  	1120,1,0,0,0,1120,1121,1,0,0,0,1121,1123,5,2,0,0,1122,1124,5,166,0,0,
  	1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1125,1,0,0,0,1125,1127,3,90,
  	45,0,1126,1128,5,166,0,0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,1129,
  	1,0,0,0,1129,1130,5,4,0,0,1130,1176,1,0,0,0,1131,1133,3,336,168,0,1132,
  	1134,5,166,0,0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,
  	1135,1137,5,2,0,0,1136,1138,5,166,0,0,1137,1136,1,0,0,0,1137,1138,1,0,
  	0,0,1138,1139,1,0,0,0,1139,1141,3,100,50,0,1140,1142,5,166,0,0,1141,1140,
  	1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,1145,5,3,0,0,1144,1146,
  	5,166,0,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,1147,1,0,0,0,1147,
  	1149,3,100,50,0,1148,1150,5,166,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,
  	0,1150,1151,1,0,0,0,1151,1152,5,4,0,0,1152,1176,1,0,0,0,1153,1155,5,146,
  	0,0,1154,1156,5,166,0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,1157,
  	1,0,0,0,1157,1159,5,2,0,0,1158,1160,5,166,0,0,1159,1158,1,0,0,0,1159,
  	1160,1,0,0,0,1160,1161,1,0,0,0,1161,1163,3,330,165,0,1162,1164,5,166,
  	0,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1167,5,
  	3,0,0,1166,1168,5,166,0,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,1169,
  	1,0,0,0,1169,1171,3,330,165,0,1170,1172,5,166,0,0,1171,1170,1,0,0,0,1171,
  	1172,1,0,0,0,1172,1173,1,0,0,0,1173,1174,5,4,0,0,1174,1176,1,0,0,0,1175,
  	1101,1,0,0,0,1175,1103,1,0,0,0,1175,1117,1,0,0,0,1175,1131,1,0,0,0,1175,
  	1153,1,0,0,0,1176,1181,1,0,0,0,1177,1178,10,5,0,0,1178,1180,3,102,51,
  	0,1179,1177,1,0,0,0,1180,1183,1,0,0,0,1181,1179,1,0,0,0,1181,1182,1,0,
  	0,0,1182,101,1,0,0,0,1183,1181,1,0,0,0,1184,1188,3,104,52,0,1185,1187,
  	3,104,52,0,1186,1185,1,0,0,0,1187,1190,1,0,0,0,1188,1186,1,0,0,0,1188,
  	1189,1,0,0,0,1189,103,1,0,0,0,1190,1188,1,0,0,0,1191,1193,5,7,0,0,1192,
  	1194,3,330,165,0,1193,1192,1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,
  	0,1195,1196,5,8,0,0,1196,105,1,0,0,0,1197,1200,3,108,54,0,1198,1200,3,
  	110,55,0,1199,1197,1,0,0,0,1199,1198,1,0,0,0,1200,107,1,0,0,0,1201,1203,
  	5,166,0,0,1202,1201,1,0,0,0,1203,1206,1,0,0,0,1204,1202,1,0,0,0,1204,
  	1205,1,0,0,0,1205,1207,1,0,0,0,1206,1204,1,0,0,0,1207,1208,5,82,0,0,1208,
  	109,1,0,0,0,1209,1211,5,166,0,0,1210,1209,1,0,0,0,1211,1214,1,0,0,0,1212,
  	1210,1,0,0,0,1212,1213,1,0,0,0,1213,1215,1,0,0,0,1214,1212,1,0,0,0,1215,
  	1216,5,118,0,0,1216,111,1,0,0,0,1217,1218,5,55,0,0,1218,1219,5,166,0,
  	0,1219,1232,5,135,0,0,1220,1221,5,55,0,0,1221,1222,5,166,0,0,1222,1223,
  	5,135,0,0,1223,1224,5,166,0,0,1224,1225,5,121,0,0,1225,1226,5,166,0,0,
  	1226,1232,5,113,0,0,1227,1232,5,62,0,0,1228,1232,5,63,0,0,1229,1232,5,
  	125,0,0,1230,1232,5,126,0,0,1231,1217,1,0,0,0,1231,1220,1,0,0,0,1231,
  	1227,1,0,0,0,1231,1228,1,0,0,0,1231,1229,1,0,0,0,1231,1230,1,0,0,0,1232,
  	113,1,0,0,0,1233,1236,3,116,58,0,1234,1236,3,118,59,0,1235,1233,1,0,0,
  	0,1235,1234,1,0,0,0,1236,115,1,0,0,0,1237,1238,5,101,0,0,1238,1239,5,
  	166,0,0,1239,1240,5,84,0,0,1240,1243,5,166,0,0,1241,1244,5,152,0,0,1242,
  	1244,3,320,160,0,1243,1241,1,0,0,0,1243,1242,1,0,0,0,1244,117,1,0,0,0,
  	1245,1246,5,96,0,0,1246,1247,5,166,0,0,1247,1248,3,320,160,0,1248,119,
  	1,0,0,0,1249,1251,3,122,61,0,1250,1252,5,166,0,0,1251,1250,1,0,0,0,1251,
  	1252,1,0,0,0,1252,1254,1,0,0,0,1253,1249,1,0,0,0,1253,1254,1,0,0,0,1254,
  	1255,1,0,0,0,1255,1256,3,126,63,0,1256,121,1,0,0,0,1257,1258,5,119,0,
  	0,1258,1259,5,166,0,0,1259,1260,5,88,0,0,1260,1261,5,166,0,0,1261,1263,
  	3,334,167,0,1262,1264,5,166,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,
  	1265,1,0,0,0,1265,1267,5,2,0,0,1266,1268,5,166,0,0,1267,1266,1,0,0,0,
  	1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1271,3,124,62,0,1270,1272,5,
  	166,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1273,1,0,0,0,1273,1274,
  	5,4,0,0,1274,123,1,0,0,0,1275,1286,3,146,73,0,1276,1278,5,166,0,0,1277,
  	1276,1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1281,5,3,0,0,1280,
  	1282,5,166,0,0,1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,
  	1283,1285,3,146,73,0,1284,1277,1,0,0,0,1285,1288,1,0,0,0,1286,1284,1,
  	0,0,0,1286,1287,1,0,0,0,1287,125,1,0,0,0,1288,1286,1,0,0,0,1289,1296,
  	3,130,65,0,1290,1292,5,166,0,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,
  	1293,1,0,0,0,1293,1295,3,128,64,0,1294,1291,1,0,0,0,1295,1298,1,0,0,0,
  	1296,1294,1,0,0,0,1296,1297,1,0,0,0,1297,1311,1,0,0,0,1298,1296,1,0,0,
  	0,1299,1301,3,174,87,0,1300,1302,5,166,0,0,1301,1300,1,0,0,0,1301,1302,
  	1,0,0,0,1302,1304,1,0,0,0,1303,1299,1,0,0,0,1304,1305,1,0,0,0,1305,1303,
  	1,0,0,0,1305,1306,1,0,0,0,1306,1307,1,0,0,0,1307,1308,3,130,65,0,1308,
  	1309,6,63,-1,0,1309,1311,1,0,0,0,1310,1289,1,0,0,0,1310,1303,1,0,0,0,
  	1311,127,1,0,0,0,1312,1313,5,138,0,0,1313,1314,5,166,0,0,1314,1316,5,
  	48,0,0,1315,1317,5,166,0,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1318,
  	1,0,0,0,1318,1325,3,130,65,0,1319,1321,5,138,0,0,1320,1322,5,166,0,0,
  	1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,1323,1,0,0,0,1323,1325,3,130,
  	65,0,1324,1312,1,0,0,0,1324,1319,1,0,0,0,1325,129,1,0,0,0,1326,1329,3,
  	132,66,0,1327,1329,3,134,67,0,1328,1326,1,0,0,0,1328,1327,1,0,0,0,1329,
  	131,1,0,0,0,1330,1332,3,140,70,0,1331,1333,5,166,0,0,1332,1331,1,0,0,
  	0,1332,1333,1,0,0,0,1333,1335,1,0,0,0,1334,1330,1,0,0,0,1335,1338,1,0,
  	0,0,1336,1334,1,0,0,0,1336,1337,1,0,0,0,1337,1339,1,0,0,0,1338,1336,1,
  	0,0,0,1339,1376,3,174,87,0,1340,1342,3,140,70,0,1341,1343,5,166,0,0,1342,
  	1341,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,1340,1,0,0,0,1345,
  	1348,1,0,0,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,1349,1,0,0,0,1348,
  	1346,1,0,0,0,1349,1356,3,138,69,0,1350,1352,5,166,0,0,1351,1350,1,0,0,
  	0,1351,1352,1,0,0,0,1352,1353,1,0,0,0,1353,1355,3,138,69,0,1354,1351,
  	1,0,0,0,1355,1358,1,0,0,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,1363,
  	1,0,0,0,1358,1356,1,0,0,0,1359,1361,5,166,0,0,1360,1359,1,0,0,0,1360,
  	1361,1,0,0,0,1361,1362,1,0,0,0,1362,1364,3,174,87,0,1363,1360,1,0,0,0,
  	1363,1364,1,0,0,0,1364,1376,1,0,0,0,1365,1367,3,140,70,0,1366,1368,5,
  	166,0,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,1370,1,0,0,0,1369,1365,
  	1,0,0,0,1370,1371,1,0,0,0,1371,1369,1,0,0,0,1371,1372,1,0,0,0,1372,1373,
  	1,0,0,0,1373,1374,6,66,-1,0,1374,1376,1,0,0,0,1375,1336,1,0,0,0,1375,
  	1346,1,0,0,0,1375,1369,1,0,0,0,1376,133,1,0,0,0,1377,1379,3,136,68,0,
  	1378,1380,5,166,0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,1382,1,0,
  	0,0,1381,1377,1,0,0,0,1382,1383,1,0,0,0,1383,1381,1,0,0,0,1383,1384,1,
  	0,0,0,1384,1385,1,0,0,0,1385,1386,3,132,66,0,1386,135,1,0,0,0,1387,1389,
  	3,140,70,0,1388,1390,5,166,0,0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,
  	1392,1,0,0,0,1391,1387,1,0,0,0,1392,1395,1,0,0,0,1393,1391,1,0,0,0,1393,
  	1394,1,0,0,0,1394,1402,1,0,0,0,1395,1393,1,0,0,0,1396,1398,3,138,69,0,
  	1397,1399,5,166,0,0,1398,1397,1,0,0,0,1398,1399,1,0,0,0,1399,1401,1,0,
  	0,0,1400,1396,1,0,0,0,1401,1404,1,0,0,0,1402,1400,1,0,0,0,1402,1403,1,
  	0,0,0,1403,1405,1,0,0,0,1404,1402,1,0,0,0,1405,1406,3,172,86,0,1406,137,
  	1,0,0,0,1407,1412,3,160,80,0,1408,1412,3,162,81,0,1409,1412,3,166,83,
  	0,1410,1412,3,170,85,0,1411,1407,1,0,0,0,1411,1408,1,0,0,0,1411,1409,
  	1,0,0,0,1411,1410,1,0,0,0,1412,139,1,0,0,0,1413,1418,3,152,76,0,1414,
  	1418,3,158,79,0,1415,1418,3,144,72,0,1416,1418,3,142,71,0,1417,1413,1,
  	0,0,0,1417,1414,1,0,0,0,1417,1415,1,0,0,0,1417,1416,1,0,0,0,1418,141,
  	1,0,0,0,1419,1437,5,101,0,0,1420,1421,5,166,0,0,1421,1422,5,143,0,0,1422,
  	1423,5,166,0,0,1423,1425,5,90,0,0,1424,1426,5,166,0,0,1425,1424,1,0,0,
  	0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1429,5,2,0,0,1428,1430,5,166,
  	0,0,1429,1428,1,0,0,0,1429,1430,1,0,0,0,1430,1431,1,0,0,0,1431,1433,3,
  	90,45,0,1432,1434,5,166,0,0,1433,1432,1,0,0,0,1433,1434,1,0,0,0,1434,
  	1435,1,0,0,0,1435,1436,5,4,0,0,1436,1438,1,0,0,0,1437,1420,1,0,0,0,1437,
  	1438,1,0,0,0,1438,1439,1,0,0,0,1439,1440,5,166,0,0,1440,1441,5,86,0,0,
  	1441,1442,5,166,0,0,1442,1447,3,10,5,0,1443,1445,5,166,0,0,1444,1443,
  	1,0,0,0,1444,1445,1,0,0,0,1445,1446,1,0,0,0,1446,1448,3,42,21,0,1447,
  	1444,1,0,0,0,1447,1448,1,0,0,0,1448,1453,1,0,0,0,1449,1451,5,166,0,0,
  	1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1454,3,190,
  	95,0,1453,1450,1,0,0,0,1453,1454,1,0,0,0,1454,143,1,0,0,0,1455,1457,3,
  	122,61,0,1456,1458,5,166,0,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,
  	1460,1,0,0,0,1459,1455,1,0,0,0,1459,1460,1,0,0,0,1460,1461,1,0,0,0,1461,
  	1462,5,57,0,0,1462,1463,5,166,0,0,1463,1468,3,298,149,0,1464,1466,5,166,
  	0,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,1467,1,0,0,0,1467,1469,3,
  	190,95,0,1468,1465,1,0,0,0,1468,1469,1,0,0,0,1469,145,1,0,0,0,1470,1484,
  	3,334,167,0,1471,1473,5,166,0,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,
  	1474,1,0,0,0,1474,1476,5,9,0,0,1475,1477,5,166,0,0,1476,1475,1,0,0,0,
  	1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1480,3,148,74,0,1479,1481,5,
  	166,0,0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,1482,1,0,0,0,1482,1483,
  	5,10,0,0,1483,1485,1,0,0,0,1484,1472,1,0,0,0,1484,1485,1,0,0,0,1485,147,
  	1,0,0,0,1486,1497,3,150,75,0,1487,1489,5,166,0,0,1488,1487,1,0,0,0,1488,
  	1489,1,0,0,0,1489,1490,1,0,0,0,1490,1492,5,3,0,0,1491,1493,5,166,0,0,
  	1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1496,3,150,
  	75,0,1495,1488,1,0,0,0,1496,1499,1,0,0,0,1497,1495,1,0,0,0,1497,1498,
  	1,0,0,0,1498,149,1,0,0,0,1499,1497,1,0,0,0,1500,1503,3,328,164,0,1501,
  	1502,5,166,0,0,1502,1504,3,82,41,0,1503,1501,1,0,0,0,1503,1504,1,0,0,
  	0,1504,1507,1,0,0,0,1505,1506,5,166,0,0,1506,1508,3,190,95,0,1507,1505,
  	1,0,0,0,1507,1508,1,0,0,0,1508,151,1,0,0,0,1509,1510,5,114,0,0,1510,1512,
  	5,166,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,1513,
  	1515,5,103,0,0,1514,1516,5,166,0,0,1515,1514,1,0,0,0,1515,1516,1,0,0,
  	0,1516,1517,1,0,0,0,1517,1520,3,192,96,0,1518,1519,5,166,0,0,1519,1521,
  	3,190,95,0,1520,1518,1,0,0,0,1520,1521,1,0,0,0,1521,1524,1,0,0,0,1522,
  	1523,5,166,0,0,1523,1525,3,154,77,0,1524,1522,1,0,0,0,1524,1525,1,0,0,
  	0,1525,153,1,0,0,0,1526,1527,5,91,0,0,1527,1528,5,166,0,0,1528,1529,3,
  	156,78,0,1529,155,1,0,0,0,1530,1531,6,78,-1,0,1531,1533,5,2,0,0,1532,
  	1534,5,166,0,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,1535,1,0,0,0,
  	1535,1537,3,156,78,0,1536,1538,5,166,0,0,1537,1536,1,0,0,0,1537,1538,
  	1,0,0,0,1538,1539,1,0,0,0,1539,1540,5,4,0,0,1540,1543,1,0,0,0,1541,1543,
  	3,334,167,0,1542,1530,1,0,0,0,1542,1541,1,0,0,0,1543,1560,1,0,0,0,1544,
  	1545,10,4,0,0,1545,1546,5,166,0,0,1546,1547,5,98,0,0,1547,1548,5,166,
  	0,0,1548,1559,3,156,78,5,1549,1554,10,3,0,0,1550,1551,5,166,0,0,1551,
  	1552,5,107,0,0,1552,1553,5,166,0,0,1553,1555,3,334,167,0,1554,1550,1,
  	0,0,0,1555,1556,1,0,0,0,1556,1554,1,0,0,0,1556,1557,1,0,0,0,1557,1559,
  	1,0,0,0,1558,1544,1,0,0,0,1558,1549,1,0,0,0,1559,1562,1,0,0,0,1560,1558,
  	1,0,0,0,1560,1561,1,0,0,0,1561,157,1,0,0,0,1562,1560,1,0,0,0,1563,1565,
  	5,139,0,0,1564,1566,5,166,0,0,1565,1564,1,0,0,0,1565,1566,1,0,0,0,1566,
  	1567,1,0,0,0,1567,1568,3,236,118,0,1568,1569,5,166,0,0,1569,1570,5,51,
  	0,0,1570,1571,5,166,0,0,1571,1572,3,320,160,0,1572,159,1,0,0,0,1573,1575,
  	5,67,0,0,1574,1576,5,166,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,
  	1577,1,0,0,0,1577,1578,3,192,96,0,1578,161,1,0,0,0,1579,1581,5,105,0,
  	0,1580,1582,5,166,0,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,
  	0,0,0,1583,1588,3,192,96,0,1584,1585,5,166,0,0,1585,1587,3,164,82,0,1586,
  	1584,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1588,1589,1,0,0,0,1589,
  	163,1,0,0,0,1590,1588,1,0,0,0,1591,1592,5,112,0,0,1592,1593,5,166,0,0,
  	1593,1594,5,103,0,0,1594,1595,5,166,0,0,1595,1602,3,166,83,0,1596,1597,
  	5,112,0,0,1597,1598,5,166,0,0,1598,1599,5,67,0,0,1599,1600,5,166,0,0,
  	1600,1602,3,166,83,0,1601,1591,1,0,0,0,1601,1596,1,0,0,0,1602,165,1,0,
  	0,0,1603,1605,5,128,0,0,1604,1606,5,166,0,0,1605,1604,1,0,0,0,1605,1606,
  	1,0,0,0,1606,1607,1,0,0,0,1607,1618,3,168,84,0,1608,1610,5,166,0,0,1609,
  	1608,1,0,0,0,1609,1610,1,0,0,0,1610,1611,1,0,0,0,1611,1613,5,3,0,0,1612,
  	1614,5,166,0,0,1613,1612,1,0,0,0,1613,1614,1,0,0,0,1614,1615,1,0,0,0,
  	1615,1617,3,168,84,0,1616,1609,1,0,0,0,1617,1620,1,0,0,0,1618,1616,1,
  	0,0,0,1618,1619,1,0,0,0,1619,167,1,0,0,0,1620,1618,1,0,0,0,1621,1623,
  	3,326,163,0,1622,1624,5,166,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,
  	1625,1,0,0,0,1625,1627,5,6,0,0,1626,1628,5,166,0,0,1627,1626,1,0,0,0,
  	1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,1630,3,236,118,0,1630,169,1,
  	0,0,0,1631,1632,5,75,0,0,1632,1634,5,166,0,0,1633,1631,1,0,0,0,1633,1634,
  	1,0,0,0,1634,1635,1,0,0,0,1635,1637,5,72,0,0,1636,1638,5,166,0,0,1637,
  	1636,1,0,0,0,1637,1638,1,0,0,0,1638,1639,1,0,0,0,1639,1650,3,236,118,
  	0,1640,1642,5,166,0,0,1641,1640,1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,
  	0,0,0,1643,1645,5,3,0,0,1644,1646,5,166,0,0,1645,1644,1,0,0,0,1645,1646,
  	1,0,0,0,1646,1647,1,0,0,0,1647,1649,3,236,118,0,1648,1641,1,0,0,0,1649,
  	1652,1,0,0,0,1650,1648,1,0,0,0,1650,1651,1,0,0,0,1651,171,1,0,0,0,1652,
  	1650,1,0,0,0,1653,1654,5,143,0,0,1654,1659,3,176,88,0,1655,1657,5,166,
  	0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1658,1,0,0,0,1658,1660,3,
  	190,95,0,1659,1656,1,0,0,0,1659,1660,1,0,0,0,1660,173,1,0,0,0,1661,1662,
  	5,124,0,0,1662,1663,3,176,88,0,1663,175,1,0,0,0,1664,1666,5,166,0,0,1665,
  	1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1669,5,76,0,0,1668,
  	1665,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,0,1670,1671,5,166,0,0,
  	1671,1674,3,178,89,0,1672,1673,5,166,0,0,1673,1675,3,182,91,0,1674,1672,
  	1,0,0,0,1674,1675,1,0,0,0,1675,1678,1,0,0,0,1676,1677,5,166,0,0,1677,
  	1679,3,184,92,0,1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,1682,1,0,0,0,
  	1680,1681,5,166,0,0,1681,1683,3,186,93,0,1682,1680,1,0,0,0,1682,1683,
  	1,0,0,0,1683,177,1,0,0,0,1684,1695,5,147,0,0,1685,1687,5,166,0,0,1686,
  	1685,1,0,0,0,1686,1687,1,0,0,0,1687,1688,1,0,0,0,1688,1690,5,3,0,0,1689,
  	1691,5,166,0,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1692,1,0,0,0,
  	1692,1694,3,180,90,0,1693,1686,1,0,0,0,1694,1697,1,0,0,0,1695,1693,1,
  	0,0,0,1695,1696,1,0,0,0,1696,1713,1,0,0,0,1697,1695,1,0,0,0,1698,1709,
  	3,180,90,0,1699,1701,5,166,0,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,
  	1702,1,0,0,0,1702,1704,5,3,0,0,1703,1705,5,166,0,0,1704,1703,1,0,0,0,
  	1704,1705,1,0,0,0,1705,1706,1,0,0,0,1706,1708,3,180,90,0,1707,1700,1,
  	0,0,0,1708,1711,1,0,0,0,1709,1707,1,0,0,0,1709,1710,1,0,0,0,1710,1713,
  	1,0,0,0,1711,1709,1,0,0,0,1712,1684,1,0,0,0,1712,1698,1,0,0,0,1713,179,
  	1,0,0,0,1714,1715,3,236,118,0,1715,1716,5,166,0,0,1716,1717,5,51,0,0,
  	1717,1718,5,166,0,0,1718,1719,3,320,160,0,1719,1722,1,0,0,0,1720,1722,
  	3,236,118,0,1721,1714,1,0,0,0,1721,1720,1,0,0,0,1722,181,1,0,0,0,1723,
  	1724,5,116,0,0,1724,1725,5,166,0,0,1725,1726,5,56,0,0,1726,1727,5,166,
  	0,0,1727,1738,3,188,94,0,1728,1730,5,166,0,0,1729,1728,1,0,0,0,1729,1730,
  	1,0,0,0,1730,1731,1,0,0,0,1731,1733,5,3,0,0,1732,1734,5,166,0,0,1733,
  	1732,1,0,0,0,1733,1734,1,0,0,0,1734,1735,1,0,0,0,1735,1737,3,188,94,0,
  	1736,1729,1,0,0,0,1737,1740,1,0,0,0,1738,1736,1,0,0,0,1738,1739,1,0,0,
  	0,1739,183,1,0,0,0,1740,1738,1,0,0,0,1741,1742,5,148,0,0,1742,1743,5,
  	166,0,0,1743,1744,3,236,118,0,1744,185,1,0,0,0,1745,1746,5,100,0,0,1746,
  	1747,5,166,0,0,1747,1748,3,236,118,0,1748,187,1,0,0,0,1749,1754,3,236,
  	118,0,1750,1752,5,166,0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1753,
  	1,0,0,0,1753,1755,7,1,0,0,1754,1751,1,0,0,0,1754,1755,1,0,0,0,1755,189,
  	1,0,0,0,1756,1757,5,142,0,0,1757,1758,5,166,0,0,1758,1759,3,236,118,0,
  	1759,191,1,0,0,0,1760,1771,3,194,97,0,1761,1763,5,166,0,0,1762,1761,1,
  	0,0,0,1762,1763,1,0,0,0,1763,1764,1,0,0,0,1764,1766,5,3,0,0,1765,1767,
  	5,166,0,0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,1768,1,0,0,0,1768,
  	1770,3,194,97,0,1769,1762,1,0,0,0,1770,1773,1,0,0,0,1771,1769,1,0,0,0,
  	1771,1772,1,0,0,0,1772,193,1,0,0,0,1773,1771,1,0,0,0,1774,1776,3,320,
  	160,0,1775,1777,5,166,0,0,1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,1778,
  	1,0,0,0,1778,1780,5,6,0,0,1779,1781,5,166,0,0,1780,1779,1,0,0,0,1780,
  	1781,1,0,0,0,1781,1782,1,0,0,0,1782,1783,3,196,98,0,1783,1786,1,0,0,0,
  	1784,1786,3,196,98,0,1785,1774,1,0,0,0,1785,1784,1,0,0,0,1786,195,1,0,
  	0,0,1787,1788,3,198,99,0,1788,197,1,0,0,0,1789,1796,3,200,100,0,1790,
  	1792,5,166,0,0,1791,1790,1,0,0,0,1791,1792,1,0,0,0,1792,1793,1,0,0,0,
  	1793,1795,3,202,101,0,1794,1791,1,0,0,0,1795,1798,1,0,0,0,1796,1794,1,
  	0,0,0,1796,1797,1,0,0,0,1797,1804,1,0,0,0,1798,1796,1,0,0,0,1799,1800,
  	5,2,0,0,1800,1801,3,198,99,0,1801,1802,5,4,0,0,1802,1804,1,0,0,0,1803,
  	1789,1,0,0,0,1803,1799,1,0,0,0,1804,199,1,0,0,0,1805,1807,5,2,0,0,1806,
  	1808,5,166,0,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,1813,1,0,0,0,
  	1809,1811,3,320,160,0,1810,1812,5,166,0,0,1811,1810,1,0,0,0,1811,1812,
  	1,0,0,0,1812,1814,1,0,0,0,1813,1809,1,0,0,0,1813,1814,1,0,0,0,1814,1819,
  	1,0,0,0,1815,1817,3,218,109,0,1816,1818,5,166,0,0,1817,1816,1,0,0,0,1817,
  	1818,1,0,0,0,1818,1820,1,0,0,0,1819,1815,1,0,0,0,1819,1820,1,0,0,0,1820,
  	1825,1,0,0,0,1821,1823,3,214,107,0,1822,1824,5,166,0,0,1823,1822,1,0,
  	0,0,1823,1824,1,0,0,0,1824,1826,1,0,0,0,1825,1821,1,0,0,0,1825,1826,1,
  	0,0,0,1826,1827,1,0,0,0,1827,1828,5,4,0,0,1828,201,1,0,0,0,1829,1831,
  	3,204,102,0,1830,1832,5,166,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,
  	1833,1,0,0,0,1833,1834,3,200,100,0,1834,203,1,0,0,0,1835,1837,3,340,170,
  	0,1836,1838,5,166,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,
  	0,0,0,1839,1841,3,344,172,0,1840,1842,5,166,0,0,1841,1840,1,0,0,0,1841,
  	1842,1,0,0,0,1842,1844,1,0,0,0,1843,1845,3,206,103,0,1844,1843,1,0,0,
  	0,1844,1845,1,0,0,0,1845,1847,1,0,0,0,1846,1848,5,166,0,0,1847,1846,1,
  	0,0,0,1847,1848,1,0,0,0,1848,1849,1,0,0,0,1849,1850,3,344,172,0,1850,
  	1880,1,0,0,0,1851,1853,3,344,172,0,1852,1854,5,166,0,0,1853,1852,1,0,
  	0,0,1853,1854,1,0,0,0,1854,1856,1,0,0,0,1855,1857,3,206,103,0,1856,1855,
  	1,0,0,0,1856,1857,1,0,0,0,1857,1859,1,0,0,0,1858,1860,5,166,0,0,1859,
  	1858,1,0,0,0,1859,1860,1,0,0,0,1860,1861,1,0,0,0,1861,1863,3,344,172,
  	0,1862,1864,5,166,0,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,1864,1865,1,
  	0,0,0,1865,1866,3,342,171,0,1866,1880,1,0,0,0,1867,1869,3,344,172,0,1868,
  	1870,5,166,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,1872,1,0,0,0,
  	1871,1873,3,206,103,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1875,1,
  	0,0,0,1874,1876,5,166,0,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,
  	1,0,0,0,1877,1878,3,344,172,0,1878,1880,1,0,0,0,1879,1835,1,0,0,0,1879,
  	1851,1,0,0,0,1879,1867,1,0,0,0,1880,205,1,0,0,0,1881,1883,5,7,0,0,1882,
  	1884,5,166,0,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,1889,1,0,0,0,
  	1885,1887,3,320,160,0,1886,1888,5,166,0,0,1887,1886,1,0,0,0,1887,1888,
  	1,0,0,0,1888,1890,1,0,0,0,1889,1885,1,0,0,0,1889,1890,1,0,0,0,1890,1895,
  	1,0,0,0,1891,1893,3,216,108,0,1892,1894,5,166,0,0,1893,1892,1,0,0,0,1893,
  	1894,1,0,0,0,1894,1896,1,0,0,0,1895,1891,1,0,0,0,1895,1896,1,0,0,0,1896,
  	1901,1,0,0,0,1897,1899,3,220,110,0,1898,1900,5,166,0,0,1899,1898,1,0,
  	0,0,1899,1900,1,0,0,0,1900,1902,1,0,0,0,1901,1897,1,0,0,0,1901,1902,1,
  	0,0,0,1902,1907,1,0,0,0,1903,1905,3,214,107,0,1904,1906,5,166,0,0,1905,
  	1904,1,0,0,0,1905,1906,1,0,0,0,1906,1908,1,0,0,0,1907,1903,1,0,0,0,1907,
  	1908,1,0,0,0,1908,1909,1,0,0,0,1909,1910,5,8,0,0,1910,207,1,0,0,0,1911,
  	1913,5,2,0,0,1912,1914,5,166,0,0,1913,1912,1,0,0,0,1913,1914,1,0,0,0,
  	1914,1919,1,0,0,0,1915,1917,3,320,160,0,1916,1918,5,166,0,0,1917,1916,
  	1,0,0,0,1917,1918,1,0,0,0,1918,1920,1,0,0,0,1919,1915,1,0,0,0,1919,1920,
  	1,0,0,0,1920,1925,1,0,0,0,1921,1923,3,218,109,0,1922,1924,5,166,0,0,1923,
  	1922,1,0,0,0,1923,1924,1,0,0,0,1924,1926,1,0,0,0,1925,1921,1,0,0,0,1925,
  	1926,1,0,0,0,1926,1931,1,0,0,0,1927,1929,3,190,95,0,1928,1930,5,166,0,
  	0,1929,1928,1,0,0,0,1929,1930,1,0,0,0,1930,1932,1,0,0,0,1931,1927,1,0,
  	0,0,1931,1932,1,0,0,0,1932,1933,1,0,0,0,1933,1934,5,4,0,0,1934,209,1,
  	0,0,0,1935,1937,5,7,0,0,1936,1938,5,166,0,0,1937,1936,1,0,0,0,1937,1938,
  	1,0,0,0,1938,1943,1,0,0,0,1939,1941,3,320,160,0,1940,1942,5,166,0,0,1941,
  	1940,1,0,0,0,1941,1942,1,0,0,0,1942,1944,1,0,0,0,1943,1939,1,0,0,0,1943,
  	1944,1,0,0,0,1944,1949,1,0,0,0,1945,1947,3,216,108,0,1946,1948,5,166,
  	0,0,1947,1946,1,0,0,0,1947,1948,1,0,0,0,1948,1950,1,0,0,0,1949,1945,1,
  	0,0,0,1949,1950,1,0,0,0,1950,1955,1,0,0,0,1951,1953,3,190,95,0,1952,1954,
  	5,166,0,0,1953,1952,1,0,0,0,1953,1954,1,0,0,0,1954,1956,1,0,0,0,1955,
  	1951,1,0,0,0,1955,1956,1,0,0,0,1956,1957,1,0,0,0,1957,1958,5,8,0,0,1958,
  	211,1,0,0,0,1959,1962,3,208,104,0,1960,1962,3,210,105,0,1961,1959,1,0,
  	0,0,1961,1960,1,0,0,0,1962,213,1,0,0,0,1963,1965,5,9,0,0,1964,1966,5,
  	166,0,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,2000,1,0,0,0,1967,1969,
  	3,328,164,0,1968,1970,5,166,0,0,1969,1968,1,0,0,0,1969,1970,1,0,0,0,1970,
  	1971,1,0,0,0,1971,1973,5,151,0,0,1972,1974,5,166,0,0,1973,1972,1,0,0,
  	0,1973,1974,1,0,0,0,1974,1975,1,0,0,0,1975,1977,3,236,118,0,1976,1978,
  	5,166,0,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1997,1,0,0,0,1979,
  	1981,5,3,0,0,1980,1982,5,166,0,0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,
  	1982,1983,1,0,0,0,1983,1985,3,328,164,0,1984,1986,5,166,0,0,1985,1984,
  	1,0,0,0,1985,1986,1,0,0,0,1986,1987,1,0,0,0,1987,1989,5,151,0,0,1988,
  	1990,5,166,0,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,0,
  	1991,1993,3,236,118,0,1992,1994,5,166,0,0,1993,1992,1,0,0,0,1993,1994,
  	1,0,0,0,1994,1996,1,0,0,0,1995,1979,1,0,0,0,1996,1999,1,0,0,0,1997,1995,
  	1,0,0,0,1997,1998,1,0,0,0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,2000,1967,
  	1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2003,5,10,0,0,2003,215,
  	1,0,0,0,2004,2006,5,151,0,0,2005,2007,5,166,0,0,2006,2005,1,0,0,0,2006,
  	2007,1,0,0,0,2007,2008,1,0,0,0,2008,2022,3,234,117,0,2009,2011,5,166,
  	0,0,2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,2012,1,0,0,0,2012,2014,5,
  	11,0,0,2013,2015,5,151,0,0,2014,2013,1,0,0,0,2014,2015,1,0,0,0,2015,2017,
  	1,0,0,0,2016,2018,5,166,0,0,2017,2016,1,0,0,0,2017,2018,1,0,0,0,2018,
  	2019,1,0,0,0,2019,2021,3,234,117,0,2020,2010,1,0,0,0,2021,2024,1,0,0,
  	0,2022,2020,1,0,0,0,2022,2023,1,0,0,0,2023,217,1,0,0,0,2024,2022,1,0,
  	0,0,2025,2027,5,151,0,0,2026,2028,5,166,0,0,2027,2026,1,0,0,0,2027,2028,
  	1,0,0,0,2028,2029,1,0,0,0,2029,2045,3,232,116,0,2030,2032,5,166,0,0,2031,
  	2030,1,0,0,0,2031,2032,1,0,0,0,2032,2034,1,0,0,0,2033,2035,5,11,0,0,2034,
  	2033,1,0,0,0,2034,2035,1,0,0,0,2035,2037,1,0,0,0,2036,2038,5,151,0,0,
  	2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,2040,1,0,0,0,2039,2041,5,166,
  	0,0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,0,0,0,2042,2044,3,
  	232,116,0,2043,2031,1,0,0,0,2044,2047,1,0,0,0,2045,2043,1,0,0,0,2045,
  	2046,1,0,0,0,2046,219,1,0,0,0,2047,2045,1,0,0,0,2048,2050,5,147,0,0,2049,
  	2051,5,166,0,0,2050,2049,1,0,0,0,2050,2051,1,0,0,0,2051,2056,1,0,0,0,
  	2052,2057,5,129,0,0,2053,2054,5,48,0,0,2054,2055,5,166,0,0,2055,2057,
  	5,129,0,0,2056,2052,1,0,0,0,2056,2053,1,0,0,0,2056,2057,1,0,0,0,2057,
  	2059,1,0,0,0,2058,2060,5,166,0,0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,
  	2060,2075,1,0,0,0,2061,2063,3,228,114,0,2062,2061,1,0,0,0,2062,2063,1,
  	0,0,0,2063,2065,1,0,0,0,2064,2066,5,166,0,0,2065,2064,1,0,0,0,2065,2066,
  	1,0,0,0,2066,2067,1,0,0,0,2067,2069,5,12,0,0,2068,2070,5,166,0,0,2069,
  	2068,1,0,0,0,2069,2070,1,0,0,0,2070,2072,1,0,0,0,2071,2073,3,230,115,
  	0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2076,1,0,0,0,2074,2076,3,330,
  	165,0,2075,2062,1,0,0,0,2075,2074,1,0,0,0,2075,2076,1,0,0,0,2076,2081,
  	1,0,0,0,2077,2079,5,166,0,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,
  	2080,1,0,0,0,2080,2082,3,222,111,0,2081,2078,1,0,0,0,2081,2082,1,0,0,
  	0,2082,221,1,0,0,0,2083,2085,5,2,0,0,2084,2086,5,166,0,0,2085,2084,1,
  	0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2089,3,320,160,0,2088,
  	2090,5,166,0,0,2089,2088,1,0,0,0,2089,2090,1,0,0,0,2090,2091,1,0,0,0,
  	2091,2093,5,3,0,0,2092,2094,5,166,0,0,2093,2092,1,0,0,0,2093,2094,1,0,
  	0,0,2094,2095,1,0,0,0,2095,2107,3,320,160,0,2096,2098,5,166,0,0,2097,
  	2096,1,0,0,0,2097,2098,1,0,0,0,2098,2099,1,0,0,0,2099,2101,5,11,0,0,2100,
  	2102,5,166,0,0,2101,2100,1,0,0,0,2101,2102,1,0,0,0,2102,2103,1,0,0,0,
  	2103,2105,3,190,95,0,2104,2106,5,166,0,0,2105,2104,1,0,0,0,2105,2106,
  	1,0,0,0,2106,2108,1,0,0,0,2107,2097,1,0,0,0,2107,2108,1,0,0,0,2108,2128,
  	1,0,0,0,2109,2111,5,166,0,0,2110,2109,1,0,0,0,2110,2111,1,0,0,0,2111,
  	2112,1,0,0,0,2112,2114,5,11,0,0,2113,2115,5,166,0,0,2114,2113,1,0,0,0,
  	2114,2115,1,0,0,0,2115,2116,1,0,0,0,2116,2118,3,226,113,0,2117,2119,5,
  	166,0,0,2118,2117,1,0,0,0,2118,2119,1,0,0,0,2119,2120,1,0,0,0,2120,2122,
  	5,3,0,0,2121,2123,5,166,0,0,2122,2121,1,0,0,0,2122,2123,1,0,0,0,2123,
  	2124,1,0,0,0,2124,2126,3,224,112,0,2125,2127,5,166,0,0,2126,2125,1,0,
  	0,0,2126,2127,1,0,0,0,2127,2129,1,0,0,0,2128,2110,1,0,0,0,2128,2129,1,
  	0,0,0,2129,2130,1,0,0,0,2130,2131,5,4,0,0,2131,223,1,0,0,0,2132,2134,
  	5,9,0,0,2133,2135,5,166,0,0,2134,2133,1,0,0,0,2134,2135,1,0,0,0,2135,
  	2137,1,0,0,0,2136,2138,3,178,89,0,2137,2136,1,0,0,0,2137,2138,1,0,0,0,
  	2138,2140,1,0,0,0,2139,2141,5,166,0,0,2140,2139,1,0,0,0,2140,2141,1,0,
  	0,0,2141,2142,1,0,0,0,2142,2143,5,10,0,0,2143,225,1,0,0,0,2144,2146,5,
  	9,0,0,2145,2147,5,166,0,0,2146,2145,1,0,0,0,2146,2147,1,0,0,0,2147,2149,
  	1,0,0,0,2148,2150,3,178,89,0,2149,2148,1,0,0,0,2149,2150,1,0,0,0,2150,
  	2152,1,0,0,0,2151,2153,5,166,0,0,2152,2151,1,0,0,0,2152,2153,1,0,0,0,
  	2153,2154,1,0,0,0,2154,2155,5,10,0,0,2155,227,1,0,0,0,2156,2157,5,154,
  	0,0,2157,229,1,0,0,0,2158,2159,5,154,0,0,2159,231,1,0,0,0,2160,2161,3,
  	334,167,0,2161,233,1,0,0,0,2162,2163,3,334,167,0,2163,235,1,0,0,0,2164,
  	2165,3,238,119,0,2165,237,1,0,0,0,2166,2173,3,240,120,0,2167,2168,5,166,
  	0,0,2168,2169,5,115,0,0,2169,2170,5,166,0,0,2170,2172,3,240,120,0,2171,
  	2167,1,0,0,0,2172,2175,1,0,0,0,2173,2171,1,0,0,0,2173,2174,1,0,0,0,2174,
  	239,1,0,0,0,2175,2173,1,0,0,0,2176,2183,3,242,121,0,2177,2178,5,166,0,
  	0,2178,2179,5,145,0,0,2179,2180,5,166,0,0,2180,2182,3,242,121,0,2181,
  	2177,1,0,0,0,2182,2185,1,0,0,0,2183,2181,1,0,0,0,2183,2184,1,0,0,0,2184,
  	241,1,0,0,0,2185,2183,1,0,0,0,2186,2193,3,244,122,0,2187,2188,5,166,0,
  	0,2188,2189,5,50,0,0,2189,2190,5,166,0,0,2190,2192,3,244,122,0,2191,2187,
  	1,0,0,0,2192,2195,1,0,0,0,2193,2191,1,0,0,0,2193,2194,1,0,0,0,2194,243,
  	1,0,0,0,2195,2193,1,0,0,0,2196,2198,5,110,0,0,2197,2199,5,166,0,0,2198,
  	2197,1,0,0,0,2198,2199,1,0,0,0,2199,2201,1,0,0,0,2200,2196,1,0,0,0,2201,
  	2204,1,0,0,0,2202,2200,1,0,0,0,2202,2203,1,0,0,0,2203,2205,1,0,0,0,2204,
  	2202,1,0,0,0,2205,2206,3,246,123,0,2206,245,1,0,0,0,2207,2219,3,250,125,
  	0,2208,2210,5,166,0,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,2211,1,
  	0,0,0,2211,2213,3,248,124,0,2212,2214,5,166,0,0,2213,2212,1,0,0,0,2213,
  	2214,1,0,0,0,2214,2215,1,0,0,0,2215,2216,3,250,125,0,2216,2218,1,0,0,
  	0,2217,2209,1,0,0,0,2218,2221,1,0,0,0,2219,2217,1,0,0,0,2219,2220,1,0,
  	0,0,2220,2247,1,0,0,0,2221,2219,1,0,0,0,2222,2224,3,250,125,0,2223,2225,
  	5,166,0,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2226,1,0,0,0,2226,
  	2228,3,248,124,0,2227,2229,5,166,0,0,2228,2227,1,0,0,0,2228,2229,1,0,
  	0,0,2229,2230,1,0,0,0,2230,2240,3,250,125,0,2231,2233,5,166,0,0,2232,
  	2231,1,0,0,0,2232,2233,1,0,0,0,2233,2234,1,0,0,0,2234,2236,3,248,124,
  	0,2235,2237,5,166,0,0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,
  	0,0,0,2238,2239,3,250,125,0,2239,2241,1,0,0,0,2240,2232,1,0,0,0,2241,
  	2242,1,0,0,0,2242,2240,1,0,0,0,2242,2243,1,0,0,0,2243,2244,1,0,0,0,2244,
  	2245,6,123,-1,0,2245,2247,1,0,0,0,2246,2207,1,0,0,0,2246,2222,1,0,0,0,
  	2247,247,1,0,0,0,2248,2249,7,2,0,0,2249,249,1,0,0,0,2250,2261,3,252,126,
  	0,2251,2253,5,166,0,0,2252,2251,1,0,0,0,2252,2253,1,0,0,0,2253,2254,1,
  	0,0,0,2254,2256,5,11,0,0,2255,2257,5,166,0,0,2256,2255,1,0,0,0,2256,2257,
  	1,0,0,0,2257,2258,1,0,0,0,2258,2260,3,252,126,0,2259,2252,1,0,0,0,2260,
  	2263,1,0,0,0,2261,2259,1,0,0,0,2261,2262,1,0,0,0,2262,251,1,0,0,0,2263,
  	2261,1,0,0,0,2264,2275,3,254,127,0,2265,2267,5,166,0,0,2266,2265,1,0,
  	0,0,2266,2267,1,0,0,0,2267,2268,1,0,0,0,2268,2270,5,19,0,0,2269,2271,
  	5,166,0,0,2270,2269,1,0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,
  	2274,3,254,127,0,2273,2266,1,0,0,0,2274,2277,1,0,0,0,2275,2273,1,0,0,
  	0,2275,2276,1,0,0,0,2276,253,1,0,0,0,2277,2275,1,0,0,0,2278,2290,3,258,
  	129,0,2279,2281,5,166,0,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,2281,2282,
  	1,0,0,0,2282,2284,3,256,128,0,2283,2285,5,166,0,0,2284,2283,1,0,0,0,2284,
  	2285,1,0,0,0,2285,2286,1,0,0,0,2286,2287,3,258,129,0,2287,2289,1,0,0,
  	0,2288,2280,1,0,0,0,2289,2292,1,0,0,0,2290,2288,1,0,0,0,2290,2291,1,0,
  	0,0,2291,255,1,0,0,0,2292,2290,1,0,0,0,2293,2294,7,3,0,0,2294,257,1,0,
  	0,0,2295,2307,3,262,131,0,2296,2298,5,166,0,0,2297,2296,1,0,0,0,2297,
  	2298,1,0,0,0,2298,2299,1,0,0,0,2299,2301,3,260,130,0,2300,2302,5,166,
  	0,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2303,1,0,0,0,2303,2304,3,
  	262,131,0,2304,2306,1,0,0,0,2305,2297,1,0,0,0,2306,2309,1,0,0,0,2307,
  	2305,1,0,0,0,2307,2308,1,0,0,0,2308,259,1,0,0,0,2309,2307,1,0,0,0,2310,
  	2311,7,4,0,0,2311,261,1,0,0,0,2312,2324,3,266,133,0,2313,2315,5,166,0,
  	0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,2315,2316,1,0,0,0,2316,2318,3,264,
  	132,0,2317,2319,5,166,0,0,2318,2317,1,0,0,0,2318,2319,1,0,0,0,2319,2320,
  	1,0,0,0,2320,2321,3,266,133,0,2321,2323,1,0,0,0,2322,2314,1,0,0,0,2323,
  	2326,1,0,0,0,2324,2322,1,0,0,0,2324,2325,1,0,0,0,2325,263,1,0,0,0,2326,
  	2324,1,0,0,0,2327,2328,7,5,0,0,2328,265,1,0,0,0,2329,2340,3,268,134,0,
  	2330,2332,5,166,0,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,2333,1,0,
  	0,0,2333,2335,5,25,0,0,2334,2336,5,166,0,0,2335,2334,1,0,0,0,2335,2336,
  	1,0,0,0,2336,2337,1,0,0,0,2337,2339,3,268,134,0,2338,2331,1,0,0,0,2339,
  	2342,1,0,0,0,2340,2338,1,0,0,0,2340,2341,1,0,0,0,2341,267,1,0,0,0,2342,
  	2340,1,0,0,0,2343,2345,5,149,0,0,2344,2346,5,166,0,0,2345,2344,1,0,0,
  	0,2345,2346,1,0,0,0,2346,2348,1,0,0,0,2347,2343,1,0,0,0,2348,2351,1,0,
  	0,0,2349,2347,1,0,0,0,2349,2350,1,0,0,0,2350,2352,1,0,0,0,2351,2349,1,
  	0,0,0,2352,2357,3,270,135,0,2353,2355,5,166,0,0,2354,2353,1,0,0,0,2354,
  	2355,1,0,0,0,2355,2356,1,0,0,0,2356,2358,5,150,0,0,2357,2354,1,0,0,0,
  	2357,2358,1,0,0,0,2358,269,1,0,0,0,2359,2367,3,280,140,0,2360,2368,3,
  	274,137,0,2361,2363,3,272,136,0,2362,2361,1,0,0,0,2363,2364,1,0,0,0,2364,
  	2362,1,0,0,0,2364,2365,1,0,0,0,2365,2368,1,0,0,0,2366,2368,3,278,139,
  	0,2367,2360,1,0,0,0,2367,2362,1,0,0,0,2367,2366,1,0,0,0,2367,2368,1,0,
  	0,0,2368,271,1,0,0,0,2369,2370,5,166,0,0,2370,2372,5,94,0,0,2371,2373,
  	5,166,0,0,2372,2371,1,0,0,0,2372,2373,1,0,0,0,2373,2374,1,0,0,0,2374,
  	2389,3,280,140,0,2375,2376,5,7,0,0,2376,2377,3,236,118,0,2377,2378,5,
  	8,0,0,2378,2389,1,0,0,0,2379,2381,5,7,0,0,2380,2382,3,236,118,0,2381,
  	2380,1,0,0,0,2381,2382,1,0,0,0,2382,2383,1,0,0,0,2383,2385,5,151,0,0,
  	2384,2386,3,236,118,0,2385,2384,1,0,0,0,2385,2386,1,0,0,0,2386,2387,1,
  	0,0,0,2387,2389,5,8,0,0,2388,2369,1,0,0,0,2388,2375,1,0,0,0,2388,2379,
  	1,0,0,0,2389,273,1,0,0,0,2390,2402,3,276,138,0,2391,2392,5,166,0,0,2392,
  	2393,5,131,0,0,2393,2394,5,166,0,0,2394,2402,5,143,0,0,2395,2396,5,166,
  	0,0,2396,2397,5,80,0,0,2397,2398,5,166,0,0,2398,2402,5,143,0,0,2399,2400,
  	5,166,0,0,2400,2402,5,64,0,0,2401,2390,1,0,0,0,2401,2391,1,0,0,0,2401,
  	2395,1,0,0,0,2401,2399,1,0,0,0,2402,2404,1,0,0,0,2403,2405,5,166,0,0,
  	2404,2403,1,0,0,0,2404,2405,1,0,0,0,2405,2406,1,0,0,0,2406,2407,3,280,
  	140,0,2407,275,1,0,0,0,2408,2410,5,166,0,0,2409,2408,1,0,0,0,2409,2410,
  	1,0,0,0,2410,2411,1,0,0,0,2411,2412,5,26,0,0,2412,277,1,0,0,0,2413,2414,
  	5,166,0,0,2414,2415,5,97,0,0,2415,2416,5,166,0,0,2416,2424,5,111,0,0,
  	2417,2418,5,166,0,0,2418,2419,5,97,0,0,2419,2420,5,166,0,0,2420,2421,
  	5,110,0,0,2421,2422,5,166,0,0,2422,2424,5,111,0,0,2423,2413,1,0,0,0,2423,
  	2417,1,0,0,0,2424,279,1,0,0,0,2425,2432,3,282,141,0,2426,2428,5,166,0,
  	0,2427,2426,1,0,0,0,2427,2428,1,0,0,0,2428,2429,1,0,0,0,2429,2431,3,314,
  	157,0,2430,2427,1,0,0,0,2431,2434,1,0,0,0,2432,2430,1,0,0,0,2432,2433,
  	1,0,0,0,2433,281,1,0,0,0,2434,2432,1,0,0,0,2435,2445,3,284,142,0,2436,
  	2445,3,324,162,0,2437,2445,3,316,158,0,2438,2445,3,296,148,0,2439,2445,
  	3,298,149,0,2440,2445,3,308,154,0,2441,2445,3,310,155,0,2442,2445,3,312,
  	156,0,2443,2445,3,320,160,0,2444,2435,1,0,0,0,2444,2436,1,0,0,0,2444,
  	2437,1,0,0,0,2444,2438,1,0,0,0,2444,2439,1,0,0,0,2444,2440,1,0,0,0,2444,
  	2441,1,0,0,0,2444,2442,1,0,0,0,2444,2443,1,0,0,0,2445,283,1,0,0,0,2446,
  	2453,3,322,161,0,2447,2453,5,152,0,0,2448,2453,3,286,143,0,2449,2453,
  	5,111,0,0,2450,2453,3,288,144,0,2451,2453,3,292,146,0,2452,2446,1,0,0,
  	0,2452,2447,1,0,0,0,2452,2448,1,0,0,0,2452,2449,1,0,0,0,2452,2450,1,0,
  	0,0,2452,2451,1,0,0,0,2453,285,1,0,0,0,2454,2455,7,6,0,0,2455,287,1,0,
  	0,0,2456,2458,5,7,0,0,2457,2459,5,166,0,0,2458,2457,1,0,0,0,2458,2459,
  	1,0,0,0,2459,2473,1,0,0,0,2460,2462,3,236,118,0,2461,2463,5,166,0,0,2462,
  	2461,1,0,0,0,2462,2463,1,0,0,0,2463,2470,1,0,0,0,2464,2466,3,290,145,
  	0,2465,2467,5,166,0,0,2466,2465,1,0,0,0,2466,2467,1,0,0,0,2467,2469,1,
  	0,0,0,2468,2464,1,0,0,0,2469,2472,1,0,0,0,2470,2468,1,0,0,0,2470,2471,
  	1,0,0,0,2471,2474,1,0,0,0,2472,2470,1,0,0,0,2473,2460,1,0,0,0,2473,2474,
  	1,0,0,0,2474,2475,1,0,0,0,2475,2476,5,8,0,0,2476,289,1,0,0,0,2477,2479,
  	5,3,0,0,2478,2480,5,166,0,0,2479,2478,1,0,0,0,2479,2480,1,0,0,0,2480,
  	2482,1,0,0,0,2481,2483,3,236,118,0,2482,2481,1,0,0,0,2482,2483,1,0,0,
  	0,2483,291,1,0,0,0,2484,2486,5,9,0,0,2485,2487,5,166,0,0,2486,2485,1,
  	0,0,0,2486,2487,1,0,0,0,2487,2488,1,0,0,0,2488,2490,3,294,147,0,2489,
  	2491,5,166,0,0,2490,2489,1,0,0,0,2490,2491,1,0,0,0,2491,2502,1,0,0,0,
  	2492,2494,5,3,0,0,2493,2495,5,166,0,0,2494,2493,1,0,0,0,2494,2495,1,0,
  	0,0,2495,2496,1,0,0,0,2496,2498,3,294,147,0,2497,2499,5,166,0,0,2498,
  	2497,1,0,0,0,2498,2499,1,0,0,0,2499,2501,1,0,0,0,2500,2492,1,0,0,0,2501,
  	2504,1,0,0,0,2502,2500,1,0,0,0,2502,2503,1,0,0,0,2503,2505,1,0,0,0,2504,
  	2502,1,0,0,0,2505,2506,5,10,0,0,2506,293,1,0,0,0,2507,2510,3,336,168,
  	0,2508,2510,5,152,0,0,2509,2507,1,0,0,0,2509,2508,1,0,0,0,2510,2512,1,
  	0,0,0,2511,2513,5,166,0,0,2512,2511,1,0,0,0,2512,2513,1,0,0,0,2513,2514,
  	1,0,0,0,2514,2516,5,151,0,0,2515,2517,5,166,0,0,2516,2515,1,0,0,0,2516,
  	2517,1,0,0,0,2517,2518,1,0,0,0,2518,2519,3,236,118,0,2519,295,1,0,0,0,
  	2520,2522,5,2,0,0,2521,2523,5,166,0,0,2522,2521,1,0,0,0,2522,2523,1,0,
  	0,0,2523,2524,1,0,0,0,2524,2526,3,236,118,0,2525,2527,5,166,0,0,2526,
  	2525,1,0,0,0,2526,2527,1,0,0,0,2527,2528,1,0,0,0,2528,2529,5,4,0,0,2529,
  	297,1,0,0,0,2530,2532,5,66,0,0,2531,2533,5,166,0,0,2532,2531,1,0,0,0,
  	2532,2533,1,0,0,0,2533,2534,1,0,0,0,2534,2536,5,2,0,0,2535,2537,5,166,
  	0,0,2536,2535,1,0,0,0,2536,2537,1,0,0,0,2537,2538,1,0,0,0,2538,2540,5,
  	147,0,0,2539,2541,5,166,0,0,2540,2539,1,0,0,0,2540,2541,1,0,0,0,2541,
  	2542,1,0,0,0,2542,2608,5,4,0,0,2543,2545,5,59,0,0,2544,2546,5,166,0,0,
  	2545,2544,1,0,0,0,2545,2546,1,0,0,0,2546,2547,1,0,0,0,2547,2549,5,2,0,
  	0,2548,2550,5,166,0,0,2549,2548,1,0,0,0,2549,2550,1,0,0,0,2550,2551,1,
  	0,0,0,2551,2553,3,302,151,0,2552,2554,5,166,0,0,2553,2552,1,0,0,0,2553,
  	2554,1,0,0,0,2554,2565,1,0,0,0,2555,2557,5,51,0,0,2556,2558,5,166,0,0,
  	2557,2556,1,0,0,0,2557,2558,1,0,0,0,2558,2559,1,0,0,0,2559,2566,3,100,
  	50,0,2560,2562,5,3,0,0,2561,2563,5,166,0,0,2562,2561,1,0,0,0,2562,2563,
  	1,0,0,0,2563,2564,1,0,0,0,2564,2566,3,302,151,0,2565,2555,1,0,0,0,2565,
  	2560,1,0,0,0,2566,2568,1,0,0,0,2567,2569,5,166,0,0,2568,2567,1,0,0,0,
  	2568,2569,1,0,0,0,2569,2570,1,0,0,0,2570,2571,5,4,0,0,2571,2608,1,0,0,
  	0,2572,2574,3,300,150,0,2573,2575,5,166,0,0,2574,2573,1,0,0,0,2574,2575,
  	1,0,0,0,2575,2576,1,0,0,0,2576,2578,5,2,0,0,2577,2579,5,166,0,0,2578,
  	2577,1,0,0,0,2578,2579,1,0,0,0,2579,2584,1,0,0,0,2580,2582,5,76,0,0,2581,
  	2583,5,166,0,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,2585,1,0,0,0,
  	2584,2580,1,0,0,0,2584,2585,1,0,0,0,2585,2603,1,0,0,0,2586,2588,3,302,
  	151,0,2587,2589,5,166,0,0,2588,2587,1,0,0,0,2588,2589,1,0,0,0,2589,2600,
  	1,0,0,0,2590,2592,5,3,0,0,2591,2593,5,166,0,0,2592,2591,1,0,0,0,2592,
  	2593,1,0,0,0,2593,2594,1,0,0,0,2594,2596,3,302,151,0,2595,2597,5,166,
  	0,0,2596,2595,1,0,0,0,2596,2597,1,0,0,0,2597,2599,1,0,0,0,2598,2590,1,
  	0,0,0,2599,2602,1,0,0,0,2600,2598,1,0,0,0,2600,2601,1,0,0,0,2601,2604,
  	1,0,0,0,2602,2600,1,0,0,0,2603,2586,1,0,0,0,2603,2604,1,0,0,0,2604,2605,
  	1,0,0,0,2605,2606,5,4,0,0,2606,2608,1,0,0,0,2607,2530,1,0,0,0,2607,2543,
  	1,0,0,0,2607,2572,1,0,0,0,2608,299,1,0,0,0,2609,2610,3,336,168,0,2610,
  	301,1,0,0,0,2611,2613,3,336,168,0,2612,2614,5,166,0,0,2613,2612,1,0,0,
  	0,2613,2614,1,0,0,0,2614,2615,1,0,0,0,2615,2616,5,151,0,0,2616,2618,5,
  	6,0,0,2617,2619,5,166,0,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,2619,2621,
  	1,0,0,0,2620,2611,1,0,0,0,2620,2621,1,0,0,0,2621,2622,1,0,0,0,2622,2625,
  	3,236,118,0,2623,2625,3,304,152,0,2624,2620,1,0,0,0,2624,2623,1,0,0,0,
  	2625,303,1,0,0,0,2626,2628,3,306,153,0,2627,2629,5,166,0,0,2628,2627,
  	1,0,0,0,2628,2629,1,0,0,0,2629,2630,1,0,0,0,2630,2631,5,149,0,0,2631,
  	2633,5,16,0,0,2632,2634,5,166,0,0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,
  	2634,2635,1,0,0,0,2635,2637,3,236,118,0,2636,2638,5,166,0,0,2637,2636,
  	1,0,0,0,2637,2638,1,0,0,0,2638,305,1,0,0,0,2639,2664,3,336,168,0,2640,
  	2642,5,2,0,0,2641,2643,5,166,0,0,2642,2641,1,0,0,0,2642,2643,1,0,0,0,
  	2643,2644,1,0,0,0,2644,2646,3,336,168,0,2645,2647,5,166,0,0,2646,2645,
  	1,0,0,0,2646,2647,1,0,0,0,2647,2658,1,0,0,0,2648,2650,5,3,0,0,2649,2651,
  	5,166,0,0,2650,2649,1,0,0,0,2650,2651,1,0,0,0,2651,2652,1,0,0,0,2652,
  	2654,3,336,168,0,2653,2655,5,166,0,0,2654,2653,1,0,0,0,2654,2655,1,0,
  	0,0,2655,2657,1,0,0,0,2656,2648,1,0,0,0,2657,2660,1,0,0,0,2658,2656,1,
  	0,0,0,2658,2659,1,0,0,0,2659,2661,1,0,0,0,2660,2658,1,0,0,0,2661,2662,
  	5,4,0,0,2662,2664,1,0,0,0,2663,2639,1,0,0,0,2663,2640,1,0,0,0,2664,307,
  	1,0,0,0,2665,2670,3,200,100,0,2666,2668,5,166,0,0,2667,2666,1,0,0,0,2667,
  	2668,1,0,0,0,2668,2669,1,0,0,0,2669,2671,3,202,101,0,2670,2667,1,0,0,
  	0,2671,2672,1,0,0,0,2672,2670,1,0,0,0,2672,2673,1,0,0,0,2673,309,1,0,
  	0,0,2674,2676,5,81,0,0,2675,2677,5,166,0,0,2676,2675,1,0,0,0,2676,2677,
  	1,0,0,0,2677,2678,1,0,0,0,2678,2680,5,9,0,0,2679,2681,5,166,0,0,2680,
  	2679,1,0,0,0,2680,2681,1,0,0,0,2681,2682,1,0,0,0,2682,2684,5,103,0,0,
  	2683,2685,5,166,0,0,2684,2683,1,0,0,0,2684,2685,1,0,0,0,2685,2686,1,0,
  	0,0,2686,2691,3,192,96,0,2687,2689,5,166,0,0,2688,2687,1,0,0,0,2688,2689,
  	1,0,0,0,2689,2690,1,0,0,0,2690,2692,3,190,95,0,2691,2688,1,0,0,0,2691,
  	2692,1,0,0,0,2692,2694,1,0,0,0,2693,2695,5,166,0,0,2694,2693,1,0,0,0,
  	2694,2695,1,0,0,0,2695,2696,1,0,0,0,2696,2697,5,10,0,0,2697,311,1,0,0,
  	0,2698,2700,5,66,0,0,2699,2701,5,166,0,0,2700,2699,1,0,0,0,2700,2701,
  	1,0,0,0,2701,2702,1,0,0,0,2702,2704,5,9,0,0,2703,2705,5,166,0,0,2704,
  	2703,1,0,0,0,2704,2705,1,0,0,0,2705,2706,1,0,0,0,2706,2708,5,103,0,0,
  	2707,2709,5,166,0,0,2708,2707,1,0,0,0,2708,2709,1,0,0,0,2709,2710,1,0,
  	0,0,2710,2715,3,192,96,0,2711,2713,5,166,0,0,2712,2711,1,0,0,0,2712,2713,
  	1,0,0,0,2713,2714,1,0,0,0,2714,2716,3,190,95,0,2715,2712,1,0,0,0,2715,
  	2716,1,0,0,0,2716,2718,1,0,0,0,2717,2719,5,166,0,0,2718,2717,1,0,0,0,
  	2718,2719,1,0,0,0,2719,2720,1,0,0,0,2720,2721,5,10,0,0,2721,313,1,0,0,
  	0,2722,2724,5,5,0,0,2723,2725,5,166,0,0,2724,2723,1,0,0,0,2724,2725,1,
  	0,0,0,2725,2728,1,0,0,0,2726,2729,3,328,164,0,2727,2729,5,147,0,0,2728,
  	2726,1,0,0,0,2728,2727,1,0,0,0,2729,315,1,0,0,0,2730,2735,5,58,0,0,2731,
  	2733,5,166,0,0,2732,2731,1,0,0,0,2732,2733,1,0,0,0,2733,2734,1,0,0,0,
  	2734,2736,3,318,159,0,2735,2732,1,0,0,0,2736,2737,1,0,0,0,2737,2735,1,
  	0,0,0,2737,2738,1,0,0,0,2738,2753,1,0,0,0,2739,2741,5,58,0,0,2740,2742,
  	5,166,0,0,2741,2740,1,0,0,0,2741,2742,1,0,0,0,2742,2743,1,0,0,0,2743,
  	2748,3,236,118,0,2744,2746,5,166,0,0,2745,2744,1,0,0,0,2745,2746,1,0,
  	0,0,2746,2747,1,0,0,0,2747,2749,3,318,159,0,2748,2745,1,0,0,0,2749,2750,
  	1,0,0,0,2750,2748,1,0,0,0,2750,2751,1,0,0,0,2751,2753,1,0,0,0,2752,2730,
  	1,0,0,0,2752,2739,1,0,0,0,2753,2762,1,0,0,0,2754,2756,5,166,0,0,2755,
  	2754,1,0,0,0,2755,2756,1,0,0,0,2756,2757,1,0,0,0,2757,2759,5,78,0,0,2758,
  	2760,5,166,0,0,2759,2758,1,0,0,0,2759,2760,1,0,0,0,2760,2761,1,0,0,0,
  	2761,2763,3,236,118,0,2762,2755,1,0,0,0,2762,2763,1,0,0,0,2763,2765,1,
  	0,0,0,2764,2766,5,166,0,0,2765,2764,1,0,0,0,2765,2766,1,0,0,0,2766,2767,
  	1,0,0,0,2767,2768,5,79,0,0,2768,317,1,0,0,0,2769,2771,5,141,0,0,2770,
  	2772,5,166,0,0,2771,2770,1,0,0,0,2771,2772,1,0,0,0,2772,2773,1,0,0,0,
  	2773,2775,3,236,118,0,2774,2776,5,166,0,0,2775,2774,1,0,0,0,2775,2776,
  	1,0,0,0,2776,2777,1,0,0,0,2777,2779,5,133,0,0,2778,2780,5,166,0,0,2779,
  	2778,1,0,0,0,2779,2780,1,0,0,0,2780,2781,1,0,0,0,2781,2782,3,236,118,
  	0,2782,319,1,0,0,0,2783,2784,3,336,168,0,2784,321,1,0,0,0,2785,2788,3,
  	332,166,0,2786,2788,3,330,165,0,2787,2785,1,0,0,0,2787,2786,1,0,0,0,2788,
  	323,1,0,0,0,2789,2792,5,27,0,0,2790,2793,3,336,168,0,2791,2793,5,154,
  	0,0,2792,2790,1,0,0,0,2792,2791,1,0,0,0,2793,325,1,0,0,0,2794,2796,3,
  	282,141,0,2795,2797,5,166,0,0,2796,2795,1,0,0,0,2796,2797,1,0,0,0,2797,
  	2798,1,0,0,0,2798,2799,3,314,157,0,2799,327,1,0,0,0,2800,2801,3,334,167,
  	0,2801,329,1,0,0,0,2802,2803,5,154,0,0,2803,331,1,0,0,0,2804,2805,5,161,
  	0,0,2805,333,1,0,0,0,2806,2807,3,336,168,0,2807,335,1,0,0,0,2808,2814,
  	5,162,0,0,2809,2810,5,165,0,0,2810,2814,6,168,-1,0,2811,2814,5,155,0,
  	0,2812,2814,3,338,169,0,2813,2808,1,0,0,0,2813,2809,1,0,0,0,2813,2811,
  	1,0,0,0,2813,2812,1,0,0,0,2814,337,1,0,0,0,2815,2816,7,7,0,0,2816,339,
  	1,0,0,0,2817,2818,7,8,0,0,2818,341,1,0,0,0,2819,2820,7,9,0,0,2820,343,
  	1,0,0,0,2821,2822,7,10,0,0,2822,345,1,0,0,0,491,348,352,357,361,366,369,
  	373,376,400,406,410,413,419,422,426,430,434,439,443,450,454,462,466,476,
  	480,484,489,502,506,514,517,525,528,543,548,554,558,561,564,570,574,580,
  	584,589,604,608,630,634,637,640,643,646,650,655,659,669,673,678,683,688,
  	694,698,702,707,714,718,722,725,729,733,752,756,760,764,768,773,786,790,
  	794,798,802,806,808,812,816,818,833,837,841,845,849,854,857,861,865,867,
  	871,875,877,896,907,914,927,934,940,943,953,956,964,967,973,976,982,997,
  	1013,1022,1048,1052,1057,1066,1070,1075,1083,1089,1093,1097,1105,1109,
  	1113,1119,1123,1127,1133,1137,1141,1145,1149,1155,1159,1163,1167,1171,
  	1175,1181,1188,1193,1199,1204,1212,1231,1235,1243,1251,1253,1263,1267,
  	1271,1277,1281,1286,1291,1296,1301,1305,1310,1316,1321,1324,1328,1332,
  	1336,1342,1346,1351,1356,1360,1363,1367,1371,1375,1379,1383,1389,1393,
  	1398,1402,1411,1417,1425,1429,1433,1437,1444,1447,1450,1453,1457,1459,
  	1465,1468,1472,1476,1480,1484,1488,1492,1497,1503,1507,1511,1515,1520,
  	1524,1533,1537,1542,1556,1558,1560,1565,1575,1581,1588,1601,1605,1609,
  	1613,1618,1623,1627,1633,1637,1641,1645,1650,1656,1659,1665,1668,1674,
  	1678,1682,1686,1690,1695,1700,1704,1709,1712,1721,1729,1733,1738,1751,
  	1754,1762,1766,1771,1776,1780,1785,1791,1796,1803,1807,1811,1813,1817,
  	1819,1823,1825,1831,1837,1841,1844,1847,1853,1856,1859,1863,1869,1872,
  	1875,1879,1883,1887,1889,1893,1895,1899,1901,1905,1907,1913,1917,1919,
  	1923,1925,1929,1931,1937,1941,1943,1947,1949,1953,1955,1961,1965,1969,
  	1973,1977,1981,1985,1989,1993,1997,2000,2006,2010,2014,2017,2022,2027,
  	2031,2034,2037,2040,2045,2050,2056,2059,2062,2065,2069,2072,2075,2078,
  	2081,2085,2089,2093,2097,2101,2105,2107,2110,2114,2118,2122,2126,2128,
  	2134,2137,2140,2146,2149,2152,2173,2183,2193,2198,2202,2209,2213,2219,
  	2224,2228,2232,2236,2242,2246,2252,2256,2261,2266,2270,2275,2280,2284,
  	2290,2297,2301,2307,2314,2318,2324,2331,2335,2340,2345,2349,2354,2357,
  	2364,2367,2372,2381,2385,2388,2401,2404,2409,2423,2427,2432,2444,2452,
  	2458,2462,2466,2470,2473,2479,2482,2486,2490,2494,2498,2502,2509,2512,
  	2516,2522,2526,2532,2536,2540,2545,2549,2553,2557,2562,2565,2568,2574,
  	2578,2582,2584,2588,2592,2596,2600,2603,2607,2613,2618,2620,2624,2628,
  	2633,2637,2642,2646,2650,2654,2658,2663,2667,2672,2676,2680,2684,2688,
  	2691,2694,2700,2704,2708,2712,2715,2718,2724,2728,2732,2737,2741,2745,
  	2750,2752,2755,2759,2762,2765,2771,2775,2779,2787,2792,2796,2813
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(346);
    oC_Cypher();
    setState(357);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(348);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(347);
          match(CypherParser::SP);
        }
        setState(350);
        match(CypherParser::T__0);
        setState(352);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(351);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(354);
        oC_Cypher(); 
      }
      setState(359);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(361);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(360);
      match(CypherParser::SP);
    }
    setState(363);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(366);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(365);
      oC_AnyCypherOption();
      break;
    }

    default:
      break;
    }
    setState(369);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(368);
      match(CypherParser::SP);
    }

    setState(371);
    oC_Statement();
    setState(376);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(373);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(372);
        match(CypherParser::SP);
      }
      setState(375);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::OC_StatementContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::OC_StatementContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_CreateSequenceContext* CypherParser::OC_StatementContext::kU_CreateSequence() {
  return getRuleContext<CypherParser::KU_CreateSequenceContext>(0);
}

CypherParser::KU_CreateTypeContext* CypherParser::OC_StatementContext::kU_CreateType() {
  return getRuleContext<CypherParser::KU_CreateTypeContext>(0);
}

CypherParser::KU_DropContext* CypherParser::OC_StatementContext::kU_Drop() {
  return getRuleContext<CypherParser::KU_DropContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(400);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(378);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(379);
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(380);
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(381);
      kU_CreateRelTableGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(382);
      kU_CreateRdfGraph();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(383);
      kU_CreateSequence();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(384);
      kU_CreateType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(385);
      kU_Drop();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(386);
      kU_AlterTable();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(387);
      kU_CopyFrom();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(388);
      kU_CopyFromByColumn();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(389);
      kU_CopyTO();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(390);
      kU_StandaloneCall();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(391);
      kU_CreateMacro();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(392);
      kU_CommentOn();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(393);
      kU_Transaction();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(394);
      kU_Extension();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(395);
      kU_ExportDatabase();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(396);
      kU_ImportDatabase();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(397);
      kU_AttachDatabase();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(398);
      kU_DetachDatabase();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(399);
      kU_UseDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(402);
    match(CypherParser::COPY);
    setState(403);
    match(CypherParser::SP);
    setState(404);
    oC_SchemaName();
    setState(413);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(406);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(405);
        match(CypherParser::SP);
      }
      setState(408);
      kU_ColumnNames();
      setState(410);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(409);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(412);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(415);
    match(CypherParser::FROM);
    setState(416);
    match(CypherParser::SP);
    setState(417);
    kU_ScanSource();
    setState(422);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(419);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(418);
        match(CypherParser::SP);
      }
      setState(421);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(424);
    match(CypherParser::T__1);
    setState(426);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(425);
      match(CypherParser::SP);
    }
    setState(428);
    oC_SchemaName();
    setState(439);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(430);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(429);
          match(CypherParser::SP);
        }
        setState(432);
        match(CypherParser::T__2);
        setState(434);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(433);
          match(CypherParser::SP);
        }
        setState(436);
        oC_SchemaName(); 
      }
      setState(441);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(442);
      match(CypherParser::SP);
    }
    setState(445);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(466);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(447);
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(448);
      match(CypherParser::T__1);
      setState(450);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(449);
        match(CypherParser::SP);
      }
      setState(452);
      oC_Query();
      setState(454);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(453);
        match(CypherParser::SP);
      }
      setState(456);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(458);
      oC_Variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(459);
      oC_Variable();
      setState(460);
      match(CypherParser::T__4);
      setState(462);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(461);
        match(CypherParser::SP);
      }
      setState(464);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(468);
    match(CypherParser::COPY);
    setState(469);
    match(CypherParser::SP);
    setState(470);
    oC_SchemaName();
    setState(471);
    match(CypherParser::SP);
    setState(472);
    match(CypherParser::FROM);
    setState(473);
    match(CypherParser::SP);
    setState(474);
    match(CypherParser::T__1);
    setState(476);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(475);
      match(CypherParser::SP);
    }
    setState(478);
    match(CypherParser::StringLiteral);
    setState(489);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(480);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(479);
        match(CypherParser::SP);
      }
      setState(482);
      match(CypherParser::T__2);
      setState(484);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(483);
        match(CypherParser::SP);
      }
      setState(486);
      match(CypherParser::StringLiteral);
      setState(491);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(492);
    match(CypherParser::T__3);
    setState(493);
    match(CypherParser::SP);
    setState(494);
    match(CypherParser::BY);
    setState(495);
    match(CypherParser::SP);
    setState(496);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(498);
    match(CypherParser::COPY);
    setState(499);
    match(CypherParser::SP);
    setState(500);
    match(CypherParser::T__1);
    setState(502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(501);
      match(CypherParser::SP);
    }
    setState(504);
    oC_Query();
    setState(506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(505);
      match(CypherParser::SP);
    }
    setState(508);
    match(CypherParser::T__3);
    setState(509);
    match(CypherParser::SP);
    setState(510);
    match(CypherParser::TO);
    setState(511);
    match(CypherParser::SP);
    setState(512);
    match(CypherParser::StringLiteral);
    setState(517);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(514);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(513);
        match(CypherParser::SP);
      }
      setState(516);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_ExportDatabaseContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(519);
    match(CypherParser::EXPORT);
    setState(520);
    match(CypherParser::SP);
    setState(521);
    match(CypherParser::DATABASE);
    setState(522);
    match(CypherParser::SP);
    setState(523);
    match(CypherParser::StringLiteral);
    setState(528);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(525);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(524);
        match(CypherParser::SP);
      }
      setState(527);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(530);
    match(CypherParser::IMPORT);
    setState(531);
    match(CypherParser::SP);
    setState(532);
    match(CypherParser::DATABASE);
    setState(533);
    match(CypherParser::SP);
    setState(534);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_AttachDatabaseContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_AttachDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(536);
    match(CypherParser::ATTACH);
    setState(537);
    match(CypherParser::SP);
    setState(538);
    match(CypherParser::StringLiteral);
    setState(543);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(539);
      match(CypherParser::SP);
      setState(540);
      match(CypherParser::AS);
      setState(541);
      match(CypherParser::SP);
      setState(542);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
    setState(545);
    match(CypherParser::SP);
    setState(546);
    match(CypherParser::T__1);
    setState(548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(547);
      match(CypherParser::SP);
    }
    setState(550);
    match(CypherParser::DBTYPE);
    setState(551);
    match(CypherParser::SP);
    setState(552);
    oC_SymbolicName();
    setState(561);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(554);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(553);
        match(CypherParser::SP);
      }
      setState(556);
      match(CypherParser::T__2);
      setState(558);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(557);
        match(CypherParser::SP);
      }
      setState(560);
      kU_Options();
      break;
    }

    default:
      break;
    }
    setState(564);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(563);
      match(CypherParser::SP);
    }
    setState(566);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionContext ------------------------------------------------------------------

CypherParser::KU_OptionContext::KU_OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_OptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_OptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Option;
}


CypherParser::KU_OptionContext* CypherParser::kU_Option() {
  KU_OptionContext *_localctx = _tracker.createInstance<KU_OptionContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_Option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(568);
    oC_SymbolicName();
    setState(570);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(569);
      match(CypherParser::SP);
    }
    setState(572);
    match(CypherParser::T__5);
    setState(574);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(573);
      match(CypherParser::SP);
    }
    setState(576);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionsContext ------------------------------------------------------------------

CypherParser::KU_OptionsContext::KU_OptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_OptionContext *> CypherParser::KU_OptionsContext::kU_Option() {
  return getRuleContexts<CypherParser::KU_OptionContext>();
}

CypherParser::KU_OptionContext* CypherParser::KU_OptionsContext::kU_Option(size_t i) {
  return getRuleContext<CypherParser::KU_OptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_Options;
}


CypherParser::KU_OptionsContext* CypherParser::kU_Options() {
  KU_OptionsContext *_localctx = _tracker.createInstance<KU_OptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_Options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(578);
    kU_Option();
    setState(589);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(580);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(579);
          match(CypherParser::SP);
        }
        setState(582);
        match(CypherParser::T__2);
        setState(584);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(583);
          match(CypherParser::SP);
        }
        setState(586);
        kU_Option(); 
      }
      setState(591);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(CypherParser::DETACH);
    setState(593);
    match(CypherParser::SP);
    setState(594);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(CypherParser::USE);
    setState(597);
    match(CypherParser::SP);
    setState(598);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(600);
    match(CypherParser::CALL);
    setState(601);
    match(CypherParser::SP);
    setState(602);
    oC_SymbolicName();
    setState(604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(603);
      match(CypherParser::SP);
    }
    setState(606);
    match(CypherParser::T__5);
    setState(608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(607);
      match(CypherParser::SP);
    }
    setState(610);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(612);
    match(CypherParser::COMMENT);
    setState(613);
    match(CypherParser::SP);
    setState(614);
    match(CypherParser::ON);
    setState(615);
    match(CypherParser::SP);
    setState(616);
    match(CypherParser::TABLE);
    setState(617);
    match(CypherParser::SP);
    setState(618);
    oC_SchemaName();
    setState(619);
    match(CypherParser::SP);
    setState(620);
    match(CypherParser::IS);
    setState(621);
    match(CypherParser::SP);
    setState(622);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(624);
    match(CypherParser::CREATE);
    setState(625);
    match(CypherParser::SP);
    setState(626);
    match(CypherParser::MACRO);
    setState(627);
    match(CypherParser::SP);
    setState(628);
    oC_FunctionName();
    setState(630);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(629);
      match(CypherParser::SP);
    }
    setState(632);
    match(CypherParser::T__1);
    setState(634);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      setState(633);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(637);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(636);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(640);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(639);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(643);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 8022426305271089045) != 0) || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 79233726876541) != 0)) {
      setState(642);
      kU_DefaultArg();
    }
    setState(655);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(646);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(645);
          match(CypherParser::SP);
        }
        setState(648);
        match(CypherParser::T__2);
        setState(650);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(649);
          match(CypherParser::SP);
        }
        setState(652);
        kU_DefaultArg(); 
      }
      setState(657);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
    setState(659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(658);
      match(CypherParser::SP);
    }
    setState(661);
    match(CypherParser::T__3);
    setState(662);
    match(CypherParser::SP);
    setState(663);
    match(CypherParser::AS);
    setState(664);
    match(CypherParser::SP);
    setState(665);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(667);
    oC_SymbolicName();
    setState(678);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(669);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(668);
          match(CypherParser::SP);
        }
        setState(671);
        match(CypherParser::T__2);
        setState(673);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(672);
          match(CypherParser::SP);
        }
        setState(675);
        oC_SymbolicName(); 
      }
      setState(680);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(681);
    oC_SymbolicName();
    setState(683);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(682);
      match(CypherParser::SP);
    }
    setState(685);
    match(CypherParser::COLON);
    setState(686);
    match(CypherParser::T__5);
    setState(688);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(687);
      match(CypherParser::SP);
    }
    setState(690);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(725);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(692);
        match(CypherParser::T__6);
        setState(694);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(693);
          match(CypherParser::SP);
        }
        setState(696);
        match(CypherParser::StringLiteral);
        setState(707);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
          setState(698);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(697);
            match(CypherParser::SP);
          }
          setState(700);
          match(CypherParser::T__2);
          setState(702);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(701);
            match(CypherParser::SP);
          }
          setState(704);
          match(CypherParser::StringLiteral);
          setState(709);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(710);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(711);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(712);
        match(CypherParser::GLOB);
        setState(714);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(713);
          match(CypherParser::SP);
        }
        setState(716);
        match(CypherParser::T__1);
        setState(718);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(717);
          match(CypherParser::SP);
        }
        setState(720);
        match(CypherParser::StringLiteral);
        setState(722);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(721);
          match(CypherParser::SP);
        }
        setState(724);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_OptionsContext* CypherParser::KU_ParsingOptionsContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(727);
    match(CypherParser::T__1);
    setState(729);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(728);
      match(CypherParser::SP);
    }
    setState(731);
    kU_Options();
    setState(733);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(732);
      match(CypherParser::SP);
    }
    setState(735);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IfNotExistsContext ------------------------------------------------------------------

CypherParser::KU_IfNotExistsContext::KU_IfNotExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IfNotExistsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}


size_t CypherParser::KU_IfNotExistsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IfNotExists;
}


CypherParser::KU_IfNotExistsContext* CypherParser::kU_IfNotExists() {
  KU_IfNotExistsContext *_localctx = _tracker.createInstance<KU_IfNotExistsContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_IfNotExists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(737);
    match(CypherParser::IF);
    setState(738);
    match(CypherParser::SP);
    setState(739);
    match(CypherParser::NOT);
    setState(740);
    match(CypherParser::SP);
    setState(741);
    match(CypherParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateNodeTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(743);
    match(CypherParser::CREATE);
    setState(744);
    match(CypherParser::SP);
    setState(745);
    match(CypherParser::NODE);
    setState(746);
    match(CypherParser::SP);
    setState(747);
    match(CypherParser::TABLE);
    setState(748);
    match(CypherParser::SP);
    setState(752);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      setState(749);
      kU_IfNotExists();
      setState(750);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(754);
    oC_SchemaName();
    setState(756);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(755);
      match(CypherParser::SP);
    }
    setState(758);
    match(CypherParser::T__1);
    setState(760);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(759);
      match(CypherParser::SP);
    }
    setState(762);
    kU_PropertyDefinitionsDDL();
    setState(764);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(763);
      match(CypherParser::SP);
    }

    setState(766);
    match(CypherParser::T__2);
    setState(768);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(767);
      match(CypherParser::SP);
    }
    setState(770);
    kU_CreateNodeConstraint();
    setState(773);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(772);
      match(CypherParser::SP);
    }
    setState(775);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRelTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(777);
    match(CypherParser::CREATE);
    setState(778);
    match(CypherParser::SP);
    setState(779);
    match(CypherParser::REL);
    setState(780);
    match(CypherParser::SP);
    setState(781);
    match(CypherParser::TABLE);
    setState(782);
    match(CypherParser::SP);
    setState(786);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(783);
      kU_IfNotExists();
      setState(784);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(788);
    oC_SchemaName();
    setState(790);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(789);
      match(CypherParser::SP);
    }
    setState(792);
    match(CypherParser::T__1);
    setState(794);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(793);
      match(CypherParser::SP);
    }
    setState(796);
    kU_RelTableConnection();
    setState(798);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(797);
      match(CypherParser::SP);
    }
    setState(808);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      setState(800);
      match(CypherParser::T__2);
      setState(802);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(801);
        match(CypherParser::SP);
      }
      setState(804);
      kU_PropertyDefinitionsDDL();
      setState(806);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(805);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(818);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(810);
      match(CypherParser::T__2);
      setState(812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(811);
        match(CypherParser::SP);
      }
      setState(814);
      oC_SymbolicName();
      setState(816);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(815);
        match(CypherParser::SP);
      }
    }
    setState(820);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRelTableGroupContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(822);
    match(CypherParser::CREATE);
    setState(823);
    match(CypherParser::SP);
    setState(824);
    match(CypherParser::REL);
    setState(825);
    match(CypherParser::SP);
    setState(826);
    match(CypherParser::TABLE);
    setState(827);
    match(CypherParser::SP);
    setState(828);
    match(CypherParser::GROUP);
    setState(829);
    match(CypherParser::SP);
    setState(833);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(830);
      kU_IfNotExists();
      setState(831);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(835);
    oC_SchemaName();
    setState(837);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(836);
      match(CypherParser::SP);
    }
    setState(839);
    match(CypherParser::T__1);
    setState(841);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(840);
      match(CypherParser::SP);
    }
    setState(843);
    kU_RelTableConnection();
    setState(852); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(845);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(844);
                match(CypherParser::SP);
              }
              setState(847);
              match(CypherParser::T__2);
              setState(849);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(848);
                match(CypherParser::SP);
              }
              setState(851);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(854); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(856);
      match(CypherParser::SP);
    }
    setState(867);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      setState(859);
      match(CypherParser::T__2);
      setState(861);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(860);
        match(CypherParser::SP);
      }
      setState(863);
      kU_PropertyDefinitionsDDL();
      setState(865);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(864);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(869);
      match(CypherParser::T__2);
      setState(871);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(870);
        match(CypherParser::SP);
      }
      setState(873);
      oC_SymbolicName();
      setState(875);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(874);
        match(CypherParser::SP);
      }
    }
    setState(879);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(881);
    match(CypherParser::FROM);
    setState(882);
    match(CypherParser::SP);
    setState(883);
    oC_SchemaName();
    setState(884);
    match(CypherParser::SP);
    setState(885);
    match(CypherParser::TO);
    setState(886);
    match(CypherParser::SP);
    setState(887);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRdfGraphContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(889);
    match(CypherParser::CREATE);
    setState(890);
    match(CypherParser::SP);
    setState(891);
    match(CypherParser::RDFGRAPH);
    setState(892);
    match(CypherParser::SP);
    setState(896);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(893);
      kU_IfNotExists();
      setState(894);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(898);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateSequenceContext ------------------------------------------------------------------

CypherParser::KU_CreateSequenceContext::KU_CreateSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateSequenceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateSequenceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateSequenceContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

std::vector<CypherParser::KU_SequenceOptionsContext *> CypherParser::KU_CreateSequenceContext::kU_SequenceOptions() {
  return getRuleContexts<CypherParser::KU_SequenceOptionsContext>();
}

CypherParser::KU_SequenceOptionsContext* CypherParser::KU_CreateSequenceContext::kU_SequenceOptions(size_t i) {
  return getRuleContext<CypherParser::KU_SequenceOptionsContext>(i);
}


size_t CypherParser::KU_CreateSequenceContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateSequence;
}


CypherParser::KU_CreateSequenceContext* CypherParser::kU_CreateSequence() {
  KU_CreateSequenceContext *_localctx = _tracker.createInstance<KU_CreateSequenceContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_CreateSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(900);
    match(CypherParser::CREATE);
    setState(901);
    match(CypherParser::SP);
    setState(902);
    match(CypherParser::SEQUENCE);
    setState(903);
    match(CypherParser::SP);
    setState(907);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      setState(904);
      kU_IfNotExists();
      setState(905);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(909);
    oC_SchemaName();
    setState(914);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(910);
        match(CypherParser::SP);
        setState(911);
        kU_SequenceOptions(); 
      }
      setState(916);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateTypeContext ------------------------------------------------------------------

CypherParser::KU_CreateTypeContext::KU_CreateTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateTypeContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_CreateTypeContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_CreateTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateType;
}


CypherParser::KU_CreateTypeContext* CypherParser::kU_CreateType() {
  KU_CreateTypeContext *_localctx = _tracker.createInstance<KU_CreateTypeContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_CreateType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(917);
    match(CypherParser::CREATE);
    setState(918);
    match(CypherParser::SP);
    setState(919);
    match(CypherParser::TYPE);
    setState(920);
    match(CypherParser::SP);
    setState(921);
    oC_SchemaName();
    setState(922);
    match(CypherParser::SP);
    setState(923);
    match(CypherParser::AS);
    setState(924);
    match(CypherParser::SP);
    setState(925);
    kU_DataType(0);
    setState(927);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(926);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_SequenceOptionsContext ------------------------------------------------------------------

CypherParser::KU_SequenceOptionsContext::KU_SequenceOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_IncrementByContext* CypherParser::KU_SequenceOptionsContext::kU_IncrementBy() {
  return getRuleContext<CypherParser::KU_IncrementByContext>(0);
}

CypherParser::KU_MinValueContext* CypherParser::KU_SequenceOptionsContext::kU_MinValue() {
  return getRuleContext<CypherParser::KU_MinValueContext>(0);
}

CypherParser::KU_MaxValueContext* CypherParser::KU_SequenceOptionsContext::kU_MaxValue() {
  return getRuleContext<CypherParser::KU_MaxValueContext>(0);
}

CypherParser::KU_StartWithContext* CypherParser::KU_SequenceOptionsContext::kU_StartWith() {
  return getRuleContext<CypherParser::KU_StartWithContext>(0);
}

CypherParser::KU_CycleContext* CypherParser::KU_SequenceOptionsContext::kU_Cycle() {
  return getRuleContext<CypherParser::KU_CycleContext>(0);
}


size_t CypherParser::KU_SequenceOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_SequenceOptions;
}


CypherParser::KU_SequenceOptionsContext* CypherParser::kU_SequenceOptions() {
  KU_SequenceOptionsContext *_localctx = _tracker.createInstance<KU_SequenceOptionsContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_SequenceOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(934);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(929);
      kU_IncrementBy();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(930);
      kU_MinValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(931);
      kU_MaxValue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(932);
      kU_StartWith();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(933);
      kU_Cycle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IncrementByContext ------------------------------------------------------------------

CypherParser::KU_IncrementByContext::KU_IncrementByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IncrementByContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_IncrementByContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_IncrementByContext::getRuleIndex() const {
  return CypherParser::RuleKU_IncrementBy;
}


CypherParser::KU_IncrementByContext* CypherParser::kU_IncrementBy() {
  KU_IncrementByContext *_localctx = _tracker.createInstance<KU_IncrementByContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_IncrementBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(936);
    match(CypherParser::INCREMENT);
    setState(937);
    match(CypherParser::SP);
    setState(940);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::BY) {
      setState(938);
      match(CypherParser::BY);
      setState(939);
      match(CypherParser::SP);
    }
    setState(943);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(942);
      match(CypherParser::MINUS);
    }
    setState(945);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MinValueContext ------------------------------------------------------------------

CypherParser::KU_MinValueContext::KU_MinValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MinValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MinValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MinValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MinValue;
}


CypherParser::KU_MinValueContext* CypherParser::kU_MinValue() {
  KU_MinValueContext *_localctx = _tracker.createInstance<KU_MinValueContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_MinValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(956);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(947);
        match(CypherParser::NO);
        setState(948);
        match(CypherParser::SP);
        setState(949);
        match(CypherParser::MINVALUE);
        break;
      }

      case CypherParser::MINVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(950);
        match(CypherParser::MINVALUE);
        setState(951);
        match(CypherParser::SP);
        setState(953);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(952);
          match(CypherParser::MINUS);
        }
        setState(955);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MaxValueContext ------------------------------------------------------------------

CypherParser::KU_MaxValueContext::KU_MaxValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MaxValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MaxValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MaxValue;
}


CypherParser::KU_MaxValueContext* CypherParser::kU_MaxValue() {
  KU_MaxValueContext *_localctx = _tracker.createInstance<KU_MaxValueContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_MaxValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(967);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(958);
        match(CypherParser::NO);
        setState(959);
        match(CypherParser::SP);
        setState(960);
        match(CypherParser::MAXVALUE);
        break;
      }

      case CypherParser::MAXVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(961);
        match(CypherParser::MAXVALUE);
        setState(962);
        match(CypherParser::SP);
        setState(964);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(963);
          match(CypherParser::MINUS);
        }
        setState(966);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StartWithContext ------------------------------------------------------------------

CypherParser::KU_StartWithContext::KU_StartWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StartWithContext::START() {
  return getToken(CypherParser::START, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StartWithContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_StartWithContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_StartWithContext::getRuleIndex() const {
  return CypherParser::RuleKU_StartWith;
}


CypherParser::KU_StartWithContext* CypherParser::kU_StartWith() {
  KU_StartWithContext *_localctx = _tracker.createInstance<KU_StartWithContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleKU_StartWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(969);
    match(CypherParser::START);
    setState(970);
    match(CypherParser::SP);
    setState(973);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WITH) {
      setState(971);
      match(CypherParser::WITH);
      setState(972);
      match(CypherParser::SP);
    }
    setState(976);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(975);
      match(CypherParser::MINUS);
    }
    setState(978);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CycleContext ------------------------------------------------------------------

CypherParser::KU_CycleContext::KU_CycleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CycleContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::KU_CycleContext::getRuleIndex() const {
  return CypherParser::RuleKU_Cycle;
}


CypherParser::KU_CycleContext* CypherParser::kU_Cycle() {
  KU_CycleContext *_localctx = _tracker.createInstance<KU_CycleContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_Cycle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NO) {
      setState(980);
      match(CypherParser::NO);
      setState(981);
      match(CypherParser::SP);
    }
    setState(984);
    match(CypherParser::CYCLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IfExistsContext ------------------------------------------------------------------

CypherParser::KU_IfExistsContext::KU_IfExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}


size_t CypherParser::KU_IfExistsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IfExists;
}


CypherParser::KU_IfExistsContext* CypherParser::kU_IfExists() {
  KU_IfExistsContext *_localctx = _tracker.createInstance<KU_IfExistsContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_IfExists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(986);
    match(CypherParser::IF);
    setState(987);
    match(CypherParser::SP);
    setState(988);
    match(CypherParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropContext ------------------------------------------------------------------

CypherParser::KU_DropContext::KU_DropContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::KU_IfExistsContext* CypherParser::KU_DropContext::kU_IfExists() {
  return getRuleContext<CypherParser::KU_IfExistsContext>(0);
}


size_t CypherParser::KU_DropContext::getRuleIndex() const {
  return CypherParser::RuleKU_Drop;
}


CypherParser::KU_DropContext* CypherParser::kU_Drop() {
  KU_DropContext *_localctx = _tracker.createInstance<KU_DropContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_Drop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    match(CypherParser::DROP);
    setState(991);
    match(CypherParser::SP);
    setState(992);
    _la = _input->LA(1);
    if (!(((((_la - 120) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 120)) & 4225) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(993);
    match(CypherParser::SP);
    setState(997);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
    case 1: {
      setState(994);
      kU_IfExists();
      setState(995);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(999);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1001);
    match(CypherParser::ALTER);
    setState(1002);
    match(CypherParser::SP);
    setState(1003);
    match(CypherParser::TABLE);
    setState(1004);
    match(CypherParser::SP);
    setState(1005);
    oC_SchemaName();
    setState(1006);
    match(CypherParser::SP);
    setState(1007);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1013);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1009);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1010);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1011);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1012);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_AddPropertyContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1015);
    match(CypherParser::ADD);
    setState(1016);
    match(CypherParser::SP);
    setState(1017);
    oC_PropertyKeyName();
    setState(1018);
    match(CypherParser::SP);
    setState(1019);
    kU_DataType(0);
    setState(1022);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      setState(1020);
      match(CypherParser::SP);
      setState(1021);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultContext ------------------------------------------------------------------

CypherParser::KU_DefaultContext::KU_DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DefaultContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

tree::TerminalNode* CypherParser::KU_DefaultContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_DefaultContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_DefaultContext::getRuleIndex() const {
  return CypherParser::RuleKU_Default;
}


CypherParser::KU_DefaultContext* CypherParser::kU_Default() {
  KU_DefaultContext *_localctx = _tracker.createInstance<KU_DefaultContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleKU_Default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1024);
    match(CypherParser::DEFAULT);
    setState(1025);
    match(CypherParser::SP);
    setState(1026);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1028);
    match(CypherParser::DROP);
    setState(1029);
    match(CypherParser::SP);
    setState(1030);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    match(CypherParser::RENAME);
    setState(1033);
    match(CypherParser::SP);
    setState(1034);
    match(CypherParser::TO);
    setState(1035);
    match(CypherParser::SP);
    setState(1036);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    match(CypherParser::RENAME);
    setState(1039);
    match(CypherParser::SP);
    setState(1040);
    oC_PropertyKeyName();
    setState(1041);
    match(CypherParser::SP);
    setState(1042);
    match(CypherParser::TO);
    setState(1043);
    match(CypherParser::SP);
    setState(1044);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1046);
    kU_PropertyDefinition();
    setState(1057);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1048);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1047);
          match(CypherParser::SP);
        }
        setState(1050);
        match(CypherParser::T__2);
        setState(1052);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1051);
          match(CypherParser::SP);
        }
        setState(1054);
        kU_PropertyDefinition(); 
      }
      setState(1059);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1060);
    oC_PropertyKeyName();
    setState(1061);
    match(CypherParser::SP);
    setState(1062);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsDDLContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsDDLContext::KU_PropertyDefinitionsDDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionDDLContext *> CypherParser::KU_PropertyDefinitionsDDLContext::kU_PropertyDefinitionDDL() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionDDLContext>();
}

CypherParser::KU_PropertyDefinitionDDLContext* CypherParser::KU_PropertyDefinitionsDDLContext::kU_PropertyDefinitionDDL(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionDDLContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsDDLContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsDDLContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsDDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionsDDL;
}


CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::kU_PropertyDefinitionsDDL() {
  KU_PropertyDefinitionsDDLContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsDDLContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleKU_PropertyDefinitionsDDL);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1064);
    kU_PropertyDefinitionDDL();
    setState(1075);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1066);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1065);
          match(CypherParser::SP);
        }
        setState(1068);
        match(CypherParser::T__2);
        setState(1070);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1069);
          match(CypherParser::SP);
        }
        setState(1072);
        kU_PropertyDefinitionDDL(); 
      }
      setState(1077);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionDDLContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionDDLContext::KU_PropertyDefinitionDDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionDDLContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionDDLContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionDDLContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionDDLContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_PropertyDefinitionDDLContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionDDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionDDL;
}


CypherParser::KU_PropertyDefinitionDDLContext* CypherParser::kU_PropertyDefinitionDDL() {
  KU_PropertyDefinitionDDLContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionDDLContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleKU_PropertyDefinitionDDL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1078);
    oC_PropertyKeyName();
    setState(1079);
    match(CypherParser::SP);
    setState(1080);
    kU_DataType(0);
    setState(1083);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      setState(1081);
      match(CypherParser::SP);
      setState(1082);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1085);
    match(CypherParser::PRIMARY);
    setState(1086);
    match(CypherParser::SP);
    setState(1087);
    match(CypherParser::KEY);
    setState(1089);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1088);
      match(CypherParser::SP);
    }
    setState(1091);
    match(CypherParser::T__1);
    setState(1093);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1092);
      match(CypherParser::SP);
    }
    setState(1095);
    oC_PropertyKeyName();
    setState(1097);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1096);
      match(CypherParser::SP);
    }
    setState(1099);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

std::vector<CypherParser::OC_IntegerLiteralContext *> CypherParser::KU_DataTypeContext::oC_IntegerLiteral() {
  return getRuleContexts<CypherParser::OC_IntegerLiteralContext>();
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_DataTypeContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 100;
  enterRecursionRule(_localctx, 100, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1175);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      setState(1102);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(1103);
      match(CypherParser::UNION);
      setState(1105);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1104);
        match(CypherParser::SP);
      }
      setState(1107);
      match(CypherParser::T__1);
      setState(1109);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1108);
        match(CypherParser::SP);
      }
      setState(1111);
      kU_PropertyDefinitions();
      setState(1113);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1112);
        match(CypherParser::SP);
      }
      setState(1115);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      setState(1117);
      oC_SymbolicName();
      setState(1119);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1118);
        match(CypherParser::SP);
      }
      setState(1121);
      match(CypherParser::T__1);
      setState(1123);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1122);
        match(CypherParser::SP);
      }
      setState(1125);
      kU_PropertyDefinitions();
      setState(1127);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1126);
        match(CypherParser::SP);
      }
      setState(1129);
      match(CypherParser::T__3);
      break;
    }

    case 4: {
      setState(1131);
      oC_SymbolicName();
      setState(1133);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1132);
        match(CypherParser::SP);
      }
      setState(1135);
      match(CypherParser::T__1);
      setState(1137);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1136);
        match(CypherParser::SP);
      }
      setState(1139);
      kU_DataType(0);
      setState(1141);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1140);
        match(CypherParser::SP);
      }
      setState(1143);
      match(CypherParser::T__2);
      setState(1145);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1144);
        match(CypherParser::SP);
      }
      setState(1147);
      kU_DataType(0);
      setState(1149);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1148);
        match(CypherParser::SP);
      }
      setState(1151);
      match(CypherParser::T__3);
      break;
    }

    case 5: {
      setState(1153);
      match(CypherParser::DECIMAL);
      setState(1155);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1154);
        match(CypherParser::SP);
      }
      setState(1157);
      match(CypherParser::T__1);
      setState(1159);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1158);
        match(CypherParser::SP);
      }
      setState(1161);
      oC_IntegerLiteral();
      setState(1163);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1162);
        match(CypherParser::SP);
      }
      setState(1165);
      match(CypherParser::T__2);
      setState(1167);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1166);
        match(CypherParser::SP);
      }
      setState(1169);
      oC_IntegerLiteral();
      setState(1171);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1170);
        match(CypherParser::SP);
      }
      setState(1173);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1181);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(1177);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(1178);
        kU_ListIdentifiers(); 
      }
      setState(1183);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1184);
    kU_ListIdentifier();
    setState(1188);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1185);
        kU_ListIdentifier(); 
      }
      setState(1190);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1191);
    match(CypherParser::T__6);
    setState(1193);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(1192);
      oC_IntegerLiteral();
    }
    setState(1195);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1199);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1197);
      oC_Explain();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1198);
      oC_Profile();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExplainContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExplainContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleOC_Explain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1204);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::SP) {
      setState(1201);
      match(CypherParser::SP);
      setState(1206);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1207);
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProfileContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProfileContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleOC_Profile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1212);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::SP) {
      setState(1209);
      match(CypherParser::SP);
      setState(1214);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1215);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1231);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1217);
      match(CypherParser::BEGIN);
      setState(1218);
      match(CypherParser::SP);
      setState(1219);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1220);
      match(CypherParser::BEGIN);
      setState(1221);
      match(CypherParser::SP);
      setState(1222);
      match(CypherParser::TRANSACTION);
      setState(1223);
      match(CypherParser::SP);
      setState(1224);
      match(CypherParser::READ);
      setState(1225);
      match(CypherParser::SP);
      setState(1226);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1227);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1228);
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1229);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1230);
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1235);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(1233);
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(1234);
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1237);
    match(CypherParser::LOAD);
    setState(1238);
    match(CypherParser::SP);
    setState(1239);
    match(CypherParser::EXTENSION);
    setState(1240);
    match(CypherParser::SP);
    setState(1243);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1241);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1242);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1245);
    match(CypherParser::INSTALL);
    setState(1246);
    match(CypherParser::SP);
    setState(1247);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}

CypherParser::KU_ProjectGraphContext* CypherParser::OC_QueryContext::kU_ProjectGraph() {
  return getRuleContext<CypherParser::KU_ProjectGraphContext>(0);
}

tree::TerminalNode* CypherParser::OC_QueryContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_Query);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1253);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
    case 1: {
      setState(1249);
      kU_ProjectGraph();
      setState(1251);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1250);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(1255);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ProjectGraphContext ------------------------------------------------------------------

CypherParser::KU_ProjectGraphContext::KU_ProjectGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ProjectGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ProjectGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_GraphProjectionTableItemsContext* CypherParser::KU_ProjectGraphContext::kU_GraphProjectionTableItems() {
  return getRuleContext<CypherParser::KU_GraphProjectionTableItemsContext>(0);
}


size_t CypherParser::KU_ProjectGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_ProjectGraph;
}


CypherParser::KU_ProjectGraphContext* CypherParser::kU_ProjectGraph() {
  KU_ProjectGraphContext *_localctx = _tracker.createInstance<KU_ProjectGraphContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleKU_ProjectGraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1257);
    match(CypherParser::PROJECT);
    setState(1258);
    match(CypherParser::SP);
    setState(1259);
    match(CypherParser::GRAPH);
    setState(1260);
    match(CypherParser::SP);
    setState(1261);
    oC_SchemaName();
    setState(1263);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1262);
      match(CypherParser::SP);
    }
    setState(1265);
    match(CypherParser::T__1);
    setState(1267);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1266);
      match(CypherParser::SP);
    }
    setState(1269);
    kU_GraphProjectionTableItems();
    setState(1271);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1270);
      match(CypherParser::SP);
    }
    setState(1273);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionTableItemsContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionTableItemsContext::KU_GraphProjectionTableItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_GraphProjectionTableItemContext *> CypherParser::KU_GraphProjectionTableItemsContext::kU_GraphProjectionTableItem() {
  return getRuleContexts<CypherParser::KU_GraphProjectionTableItemContext>();
}

CypherParser::KU_GraphProjectionTableItemContext* CypherParser::KU_GraphProjectionTableItemsContext::kU_GraphProjectionTableItem(size_t i) {
  return getRuleContext<CypherParser::KU_GraphProjectionTableItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionTableItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionTableItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionTableItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionTableItems;
}


CypherParser::KU_GraphProjectionTableItemsContext* CypherParser::kU_GraphProjectionTableItems() {
  KU_GraphProjectionTableItemsContext *_localctx = _tracker.createInstance<KU_GraphProjectionTableItemsContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleKU_GraphProjectionTableItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1275);
    kU_GraphProjectionTableItem();
    setState(1286);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1277);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1276);
          match(CypherParser::SP);
        }
        setState(1279);
        match(CypherParser::T__2);
        setState(1281);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1280);
          match(CypherParser::SP);
        }
        setState(1283);
        kU_GraphProjectionTableItem(); 
      }
      setState(1288);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1310);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1289);
      oC_SingleQuery();
      setState(1296);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1291);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1290);
            match(CypherParser::SP);
          }
          setState(1293);
          oC_Union(); 
        }
        setState(1298);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1303); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1299);
                oC_Return();
                setState(1301);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1300);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1305); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1307);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1324);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1312);
      match(CypherParser::UNION);
      setState(1313);
      match(CypherParser::SP);
      setState(1314);
      match(CypherParser::ALL);
      setState(1316);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1315);
        match(CypherParser::SP);
      }
      setState(1318);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1319);
      match(CypherParser::UNION);
      setState(1321);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1320);
        match(CypherParser::SP);
      }
      setState(1323);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1328);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1326);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1327);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1375);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1336);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 101) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 101)) & 274878177285) != 0)) {
        setState(1330);
        oC_ReadingClause();
        setState(1332);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1331);
          match(CypherParser::SP);
        }
        setState(1338);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1339);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1346);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 101) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 101)) & 274878177285) != 0)) {
        setState(1340);
        oC_ReadingClause();
        setState(1342);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1341);
          match(CypherParser::SP);
        }
        setState(1348);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1349);
      oC_UpdatingClause();
      setState(1356);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1351);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1350);
            match(CypherParser::SP);
          }
          setState(1353);
          oC_UpdatingClause(); 
        }
        setState(1358);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
      }
      setState(1363);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
      case 1: {
        setState(1360);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1359);
          match(CypherParser::SP);
        }
        setState(1362);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1369); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1365);
        oC_ReadingClause();
        setState(1367);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
        case 1: {
          setState(1366);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1371); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == CypherParser::CALL || ((((_la - 101) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 101)) & 274878177285) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1381); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1377);
              kU_QueryPart();
              setState(1379);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1378);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1383); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1385);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1393);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::CALL || ((((_la - 101) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 101)) & 274878177285) != 0)) {
      setState(1387);
      oC_ReadingClause();
      setState(1389);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1388);
        match(CypherParser::SP);
      }
      setState(1395);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1402);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2305843284091601185) != 0)) {
      setState(1396);
      oC_UpdatingClause();
      setState(1398);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1397);
        match(CypherParser::SP);
      }
      setState(1404);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1405);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1411);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1407);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1408);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1409);
        oC_Set();
        break;
      }

      case CypherParser::DELETE:
      case CypherParser::DETACH: {
        enterOuterAlt(_localctx, 4);
        setState(1410);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1417);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::MATCH:
      case CypherParser::OPTIONAL: {
        enterOuterAlt(_localctx, 1);
        setState(1413);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1414);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL:
      case CypherParser::PROJECT: {
        enterOuterAlt(_localctx, 3);
        setState(1415);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1416);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1419);
    match(CypherParser::LOAD);
    setState(1437);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
    case 1: {
      setState(1420);
      match(CypherParser::SP);
      setState(1421);
      match(CypherParser::WITH);
      setState(1422);
      match(CypherParser::SP);
      setState(1423);
      match(CypherParser::HEADERS);
      setState(1425);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1424);
        match(CypherParser::SP);
      }
      setState(1427);
      match(CypherParser::T__1);
      setState(1429);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1428);
        match(CypherParser::SP);
      }
      setState(1431);
      kU_PropertyDefinitions();
      setState(1433);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1432);
        match(CypherParser::SP);
      }
      setState(1435);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    setState(1439);
    match(CypherParser::SP);
    setState(1440);
    match(CypherParser::FROM);
    setState(1441);
    match(CypherParser::SP);
    setState(1442);
    kU_ScanSource();
    setState(1447);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      setState(1444);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1443);
        match(CypherParser::SP);
      }
      setState(1446);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
    setState(1453);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      setState(1450);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1449);
        match(CypherParser::SP);
      }
      setState(1452);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::KU_ProjectGraphContext* CypherParser::KU_InQueryCallContext::kU_ProjectGraph() {
  return getRuleContext<CypherParser::KU_ProjectGraphContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1459);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::PROJECT) {
      setState(1455);
      kU_ProjectGraph();
      setState(1457);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1456);
        match(CypherParser::SP);
      }
    }
    setState(1461);
    match(CypherParser::CALL);
    setState(1462);
    match(CypherParser::SP);
    setState(1463);
    oC_FunctionInvocation();
    setState(1468);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1465);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1464);
        match(CypherParser::SP);
      }
      setState(1467);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionTableItemContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionTableItemContext::KU_GraphProjectionTableItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_GraphProjectionTableItemContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_GraphProjectionColumnItemsContext* CypherParser::KU_GraphProjectionTableItemContext::kU_GraphProjectionColumnItems() {
  return getRuleContext<CypherParser::KU_GraphProjectionColumnItemsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionTableItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionTableItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionTableItemContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionTableItem;
}


CypherParser::KU_GraphProjectionTableItemContext* CypherParser::kU_GraphProjectionTableItem() {
  KU_GraphProjectionTableItemContext *_localctx = _tracker.createInstance<KU_GraphProjectionTableItemContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleKU_GraphProjectionTableItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1470);
    oC_SchemaName();
    setState(1484);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      setState(1472);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1471);
        match(CypherParser::SP);
      }
      setState(1474);
      match(CypherParser::T__8);
      setState(1476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1475);
        match(CypherParser::SP);
      }
      setState(1478);
      kU_GraphProjectionColumnItems();
      setState(1480);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1479);
        match(CypherParser::SP);
      }
      setState(1482);
      match(CypherParser::T__9);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionColumnItemsContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionColumnItemsContext::KU_GraphProjectionColumnItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_GraphProjectionColumnItemContext *> CypherParser::KU_GraphProjectionColumnItemsContext::kU_GraphProjectionColumnItem() {
  return getRuleContexts<CypherParser::KU_GraphProjectionColumnItemContext>();
}

CypherParser::KU_GraphProjectionColumnItemContext* CypherParser::KU_GraphProjectionColumnItemsContext::kU_GraphProjectionColumnItem(size_t i) {
  return getRuleContext<CypherParser::KU_GraphProjectionColumnItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionColumnItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionColumnItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionColumnItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionColumnItems;
}


CypherParser::KU_GraphProjectionColumnItemsContext* CypherParser::kU_GraphProjectionColumnItems() {
  KU_GraphProjectionColumnItemsContext *_localctx = _tracker.createInstance<KU_GraphProjectionColumnItemsContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleKU_GraphProjectionColumnItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1486);
    kU_GraphProjectionColumnItem();
    setState(1497);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1488);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1487);
          match(CypherParser::SP);
        }
        setState(1490);
        match(CypherParser::T__2);
        setState(1492);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1491);
          match(CypherParser::SP);
        }
        setState(1494);
        kU_GraphProjectionColumnItem(); 
      }
      setState(1499);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionColumnItemContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionColumnItemContext::KU_GraphProjectionColumnItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_GraphProjectionColumnItemContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionColumnItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionColumnItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DefaultContext* CypherParser::KU_GraphProjectionColumnItemContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_GraphProjectionColumnItemContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_GraphProjectionColumnItemContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionColumnItem;
}


CypherParser::KU_GraphProjectionColumnItemContext* CypherParser::kU_GraphProjectionColumnItem() {
  KU_GraphProjectionColumnItemContext *_localctx = _tracker.createInstance<KU_GraphProjectionColumnItemContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleKU_GraphProjectionColumnItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1500);
    oC_PropertyKeyName();
    setState(1503);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      setState(1501);
      match(CypherParser::SP);
      setState(1502);
      kU_Default();
      break;
    }

    default:
      break;
    }
    setState(1507);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      setState(1505);
      match(CypherParser::SP);
      setState(1506);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_HintContext* CypherParser::OC_MatchContext::kU_Hint() {
  return getRuleContext<CypherParser::KU_HintContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1511);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1509);
      match(CypherParser::OPTIONAL);
      setState(1510);
      match(CypherParser::SP);
    }
    setState(1513);
    match(CypherParser::MATCH);
    setState(1515);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1514);
      match(CypherParser::SP);
    }
    setState(1517);
    oC_Pattern();
    setState(1520);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      setState(1518);
      match(CypherParser::SP);
      setState(1519);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1524);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
    case 1: {
      setState(1522);
      match(CypherParser::SP);
      setState(1523);
      kU_Hint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_HintContext ------------------------------------------------------------------

CypherParser::KU_HintContext::KU_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_HintContext::HINT() {
  return getToken(CypherParser::HINT, 0);
}

tree::TerminalNode* CypherParser::KU_HintContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_HintContext::kU_JoinNode() {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(0);
}


size_t CypherParser::KU_HintContext::getRuleIndex() const {
  return CypherParser::RuleKU_Hint;
}


CypherParser::KU_HintContext* CypherParser::kU_Hint() {
  KU_HintContext *_localctx = _tracker.createInstance<KU_HintContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleKU_Hint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1526);
    match(CypherParser::HINT);
    setState(1527);
    match(CypherParser::SP);
    setState(1528);
    kU_JoinNode(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_JoinNodeContext ------------------------------------------------------------------

CypherParser::KU_JoinNodeContext::KU_JoinNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_JoinNodeContext *> CypherParser::KU_JoinNodeContext::kU_JoinNode() {
  return getRuleContexts<CypherParser::KU_JoinNodeContext>();
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_JoinNodeContext::kU_JoinNode(size_t i) {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_JoinNodeContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_JoinNodeContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::JOIN() {
  return getToken(CypherParser::JOIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::MULTI_JOIN() {
  return getTokens(CypherParser::MULTI_JOIN);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::MULTI_JOIN(size_t i) {
  return getToken(CypherParser::MULTI_JOIN, i);
}


size_t CypherParser::KU_JoinNodeContext::getRuleIndex() const {
  return CypherParser::RuleKU_JoinNode;
}



CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode() {
   return kU_JoinNode(0);
}

CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_JoinNodeContext *_localctx = _tracker.createInstance<KU_JoinNodeContext>(_ctx, parentState);
  CypherParser::KU_JoinNodeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 156;
  enterRecursionRule(_localctx, 156, CypherParser::RuleKU_JoinNode, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1542);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__1: {
        setState(1531);
        match(CypherParser::T__1);
        setState(1533);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1532);
          match(CypherParser::SP);
        }
        setState(1535);
        kU_JoinNode(0);
        setState(1537);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1536);
          match(CypherParser::SP);
        }
        setState(1539);
        match(CypherParser::T__3);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1541);
        oC_SchemaName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1560);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1558);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1544);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(1545);
          match(CypherParser::SP);
          setState(1546);
          match(CypherParser::JOIN);
          setState(1547);
          match(CypherParser::SP);
          setState(1548);
          kU_JoinNode(5);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1549);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1554); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(1550);
                    match(CypherParser::SP);
                    setState(1551);
                    match(CypherParser::MULTI_JOIN);
                    setState(1552);
                    match(CypherParser::SP);
                    setState(1553);
                    oC_SchemaName();
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(1556); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        default:
          break;
        } 
      }
      setState(1562);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1563);
    match(CypherParser::UNWIND);
    setState(1565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1564);
      match(CypherParser::SP);
    }
    setState(1567);
    oC_Expression();
    setState(1568);
    match(CypherParser::SP);
    setState(1569);
    match(CypherParser::AS);
    setState(1570);
    match(CypherParser::SP);
    setState(1571);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1573);
    match(CypherParser::CREATE);
    setState(1575);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1574);
      match(CypherParser::SP);
    }
    setState(1577);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1579);
    match(CypherParser::MERGE);
    setState(1581);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1580);
      match(CypherParser::SP);
    }
    setState(1583);
    oC_Pattern();
    setState(1588);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1584);
        match(CypherParser::SP);
        setState(1585);
        oC_MergeAction(); 
      }
      setState(1590);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1601);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1591);
      match(CypherParser::ON);
      setState(1592);
      match(CypherParser::SP);
      setState(1593);
      match(CypherParser::MATCH);
      setState(1594);
      match(CypherParser::SP);
      setState(1595);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1596);
      match(CypherParser::ON);
      setState(1597);
      match(CypherParser::SP);
      setState(1598);
      match(CypherParser::CREATE);
      setState(1599);
      match(CypherParser::SP);
      setState(1600);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1603);
    match(CypherParser::SET);
    setState(1605);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1604);
      match(CypherParser::SP);
    }
    setState(1607);
    oC_SetItem();
    setState(1618);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1609);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1608);
          match(CypherParser::SP);
        }
        setState(1611);
        match(CypherParser::T__2);
        setState(1613);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1612);
          match(CypherParser::SP);
        }
        setState(1615);
        oC_SetItem(); 
      }
      setState(1620);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1621);
    oC_PropertyExpression();
    setState(1623);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1622);
      match(CypherParser::SP);
    }
    setState(1625);
    match(CypherParser::T__5);
    setState(1627);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1626);
      match(CypherParser::SP);
    }
    setState(1629);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1633);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1631);
      match(CypherParser::DETACH);
      setState(1632);
      match(CypherParser::SP);
    }
    setState(1635);
    match(CypherParser::DELETE);
    setState(1637);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1636);
      match(CypherParser::SP);
    }
    setState(1639);
    oC_Expression();
    setState(1650);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1641);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1640);
          match(CypherParser::SP);
        }
        setState(1643);
        match(CypherParser::T__2);
        setState(1645);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1644);
          match(CypherParser::SP);
        }
        setState(1647);
        oC_Expression(); 
      }
      setState(1652);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1653);
    match(CypherParser::WITH);
    setState(1654);
    oC_ProjectionBody();
    setState(1659);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      setState(1656);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1655);
        match(CypherParser::SP);
      }
      setState(1658);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1661);
    match(CypherParser::RETURN);
    setState(1662);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1668);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      setState(1665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1664);
        match(CypherParser::SP);
      }
      setState(1667);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1670);
    match(CypherParser::SP);
    setState(1671);
    oC_ProjectionItems();
    setState(1674);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
    case 1: {
      setState(1672);
      match(CypherParser::SP);
      setState(1673);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1678);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      setState(1676);
      match(CypherParser::SP);
      setState(1677);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1682);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx)) {
    case 1: {
      setState(1680);
      match(CypherParser::SP);
      setState(1681);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1712);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1684);
        match(CypherParser::STAR);
        setState(1695);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1686);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1685);
              match(CypherParser::SP);
            }
            setState(1688);
            match(CypherParser::T__2);
            setState(1690);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1689);
              match(CypherParser::SP);
            }
            setState(1692);
            oC_ProjectionItem(); 
          }
          setState(1697);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__26:
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CASE:
      case CypherParser::CAST:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXISTS:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FALSE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::NOT:
      case CypherParser::NULL_:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TRUE:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::MINUS:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1698);
        oC_ProjectionItem();
        setState(1709);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1700);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1699);
              match(CypherParser::SP);
            }
            setState(1702);
            match(CypherParser::T__2);
            setState(1704);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1703);
              match(CypherParser::SP);
            }
            setState(1706);
            oC_ProjectionItem(); 
          }
          setState(1711);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1721);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1714);
      oC_Expression();
      setState(1715);
      match(CypherParser::SP);
      setState(1716);
      match(CypherParser::AS);
      setState(1717);
      match(CypherParser::SP);
      setState(1718);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1720);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1723);
    match(CypherParser::ORDER);
    setState(1724);
    match(CypherParser::SP);
    setState(1725);
    match(CypherParser::BY);
    setState(1726);
    match(CypherParser::SP);
    setState(1727);
    oC_SortItem();
    setState(1738);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1729);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1728);
          match(CypherParser::SP);
        }
        setState(1731);
        match(CypherParser::T__2);
        setState(1733);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1732);
          match(CypherParser::SP);
        }
        setState(1735);
        oC_SortItem(); 
      }
      setState(1740);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1741);
    match(CypherParser::L_SKIP);
    setState(1742);
    match(CypherParser::SP);
    setState(1743);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1745);
    match(CypherParser::LIMIT);
    setState(1746);
    match(CypherParser::SP);
    setState(1747);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1749);
    oC_Expression();
    setState(1754);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      setState(1751);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1750);
        match(CypherParser::SP);
      }
      setState(1753);
      _la = _input->LA(1);
      if (!(((((_la - 52) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 52)) & 6291459) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1756);
    match(CypherParser::WHERE);
    setState(1757);
    match(CypherParser::SP);
    setState(1758);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1760);
    oC_PatternPart();
    setState(1771);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1762);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1761);
          match(CypherParser::SP);
        }
        setState(1764);
        match(CypherParser::T__2);
        setState(1766);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1765);
          match(CypherParser::SP);
        }
        setState(1768);
        oC_PatternPart(); 
      }
      setState(1773);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1785);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1774);
        oC_Variable();
        setState(1776);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1775);
          match(CypherParser::SP);
        }
        setState(1778);
        match(CypherParser::T__5);
        setState(1780);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1779);
          match(CypherParser::SP);
        }
        setState(1782);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1784);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1787);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1803);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1789);
      oC_NodePattern();
      setState(1796);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1791);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1790);
            match(CypherParser::SP);
          }
          setState(1793);
          oC_PatternElementChain(); 
        }
        setState(1798);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1799);
      match(CypherParser::T__1);
      setState(1800);
      oC_PatternElement();
      setState(1801);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1805);
    match(CypherParser::T__1);
    setState(1807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1806);
      match(CypherParser::SP);
    }
    setState(1813);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 8022426305271089045) != 0) || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 79233726876541) != 0)) {
      setState(1809);
      oC_Variable();
      setState(1811);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1810);
        match(CypherParser::SP);
      }
    }
    setState(1819);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1815);
      oC_NodeLabels();
      setState(1817);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1816);
        match(CypherParser::SP);
      }
    }
    setState(1825);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1821);
      kU_Properties();
      setState(1823);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1822);
        match(CypherParser::SP);
      }
    }
    setState(1827);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1829);
    oC_RelationshipPattern();
    setState(1831);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1830);
      match(CypherParser::SP);
    }
    setState(1833);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1879);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1835);
      oC_LeftArrowHead();
      setState(1837);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1836);
        match(CypherParser::SP);
      }
      setState(1839);
      oC_Dash();
      setState(1841);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx)) {
      case 1: {
        setState(1840);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1844);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1843);
        oC_RelationshipDetail();
      }
      setState(1847);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1846);
        match(CypherParser::SP);
      }
      setState(1849);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1851);
      oC_Dash();
      setState(1853);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
      case 1: {
        setState(1852);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1856);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1855);
        oC_RelationshipDetail();
      }
      setState(1859);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1858);
        match(CypherParser::SP);
      }
      setState(1861);
      oC_Dash();
      setState(1863);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1862);
        match(CypherParser::SP);
      }
      setState(1865);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1867);
      oC_Dash();
      setState(1869);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx)) {
      case 1: {
        setState(1868);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1872);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1871);
        oC_RelationshipDetail();
      }
      setState(1875);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1874);
        match(CypherParser::SP);
      }
      setState(1877);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1881);
    match(CypherParser::T__6);
    setState(1883);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1882);
      match(CypherParser::SP);
    }
    setState(1889);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 8022426305271089045) != 0) || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 79233726876541) != 0)) {
      setState(1885);
      oC_Variable();
      setState(1887);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1886);
        match(CypherParser::SP);
      }
    }
    setState(1895);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1891);
      oC_RelationshipTypes();
      setState(1893);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1892);
        match(CypherParser::SP);
      }
    }
    setState(1901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1897);
      oC_RangeLiteral();
      setState(1899);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1898);
        match(CypherParser::SP);
      }
    }
    setState(1907);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1903);
      kU_Properties();
      setState(1905);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1904);
        match(CypherParser::SP);
      }
    }
    setState(1909);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternForAlgoContext ------------------------------------------------------------------

CypherParser::OC_NodePatternForAlgoContext::OC_NodePatternForAlgoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternForAlgoContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternForAlgoContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternForAlgoContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternForAlgoContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_NodePatternForAlgoContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_NodePatternForAlgoContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePatternForAlgo;
}


CypherParser::OC_NodePatternForAlgoContext* CypherParser::oC_NodePatternForAlgo() {
  OC_NodePatternForAlgoContext *_localctx = _tracker.createInstance<OC_NodePatternForAlgoContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleOC_NodePatternForAlgo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1911);
    match(CypherParser::T__1);
    setState(1913);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1912);
      match(CypherParser::SP);
    }
    setState(1919);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 8022426305271089045) != 0) || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 79233726876541) != 0)) {
      setState(1915);
      oC_Variable();
      setState(1917);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1916);
        match(CypherParser::SP);
      }
    }
    setState(1925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1921);
      oC_NodeLabels();
      setState(1923);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1922);
        match(CypherParser::SP);
      }
    }
    setState(1931);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WHERE) {
      setState(1927);
      oC_Where();
      setState(1929);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1928);
        match(CypherParser::SP);
      }
    }
    setState(1933);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailForAlgoContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailForAlgoContext::OC_RelationshipDetailForAlgoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailForAlgoContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailForAlgoContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailForAlgoContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailForAlgoContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_RelationshipDetailForAlgoContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_RelationshipDetailForAlgoContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetailForAlgo;
}


CypherParser::OC_RelationshipDetailForAlgoContext* CypherParser::oC_RelationshipDetailForAlgo() {
  OC_RelationshipDetailForAlgoContext *_localctx = _tracker.createInstance<OC_RelationshipDetailForAlgoContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleOC_RelationshipDetailForAlgo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1935);
    match(CypherParser::T__6);
    setState(1937);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1936);
      match(CypherParser::SP);
    }
    setState(1943);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 8022426305271089045) != 0) || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 79233726876541) != 0)) {
      setState(1939);
      oC_Variable();
      setState(1941);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1940);
        match(CypherParser::SP);
      }
    }
    setState(1949);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1945);
      oC_RelationshipTypes();
      setState(1947);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1946);
        match(CypherParser::SP);
      }
    }
    setState(1955);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WHERE) {
      setState(1951);
      oC_Where();
      setState(1953);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1952);
        match(CypherParser::SP);
      }
    }
    setState(1957);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AlgoParameterContext ------------------------------------------------------------------

CypherParser::OC_AlgoParameterContext::OC_AlgoParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternForAlgoContext* CypherParser::OC_AlgoParameterContext::oC_NodePatternForAlgo() {
  return getRuleContext<CypherParser::OC_NodePatternForAlgoContext>(0);
}

CypherParser::OC_RelationshipDetailForAlgoContext* CypherParser::OC_AlgoParameterContext::oC_RelationshipDetailForAlgo() {
  return getRuleContext<CypherParser::OC_RelationshipDetailForAlgoContext>(0);
}


size_t CypherParser::OC_AlgoParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_AlgoParameter;
}


CypherParser::OC_AlgoParameterContext* CypherParser::oC_AlgoParameter() {
  OC_AlgoParameterContext *_localctx = _tracker.createInstance<OC_AlgoParameterContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleOC_AlgoParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1961);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 1);
        setState(1959);
        oC_NodePatternForAlgo();
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 2);
        setState(1960);
        oC_RelationshipDetailForAlgo();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1963);
    match(CypherParser::T__8);
    setState(1965);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1964);
      match(CypherParser::SP);
    }
    setState(2000);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 8022426305271089045) != 0) || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 79233726876541) != 0)) {
      setState(1967);
      oC_PropertyKeyName();
      setState(1969);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1968);
        match(CypherParser::SP);
      }
      setState(1971);
      match(CypherParser::COLON);
      setState(1973);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1972);
        match(CypherParser::SP);
      }
      setState(1975);
      oC_Expression();
      setState(1977);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1976);
        match(CypherParser::SP);
      }
      setState(1997);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1979);
        match(CypherParser::T__2);
        setState(1981);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1980);
          match(CypherParser::SP);
        }
        setState(1983);
        oC_PropertyKeyName();
        setState(1985);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1984);
          match(CypherParser::SP);
        }
        setState(1987);
        match(CypherParser::COLON);
        setState(1989);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1988);
          match(CypherParser::SP);
        }
        setState(1991);
        oC_Expression();
        setState(1993);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1992);
          match(CypherParser::SP);
        }
        setState(1999);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2002);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2004);
    match(CypherParser::COLON);
    setState(2006);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2005);
      match(CypherParser::SP);
    }
    setState(2008);
    oC_RelTypeName();
    setState(2022);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2010);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2009);
          match(CypherParser::SP);
        }
        setState(2012);
        match(CypherParser::T__10);
        setState(2014);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(2013);
          match(CypherParser::COLON);
        }
        setState(2017);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2016);
          match(CypherParser::SP);
        }
        setState(2019);
        oC_RelTypeName(); 
      }
      setState(2024);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_LabelNameContext *> CypherParser::OC_NodeLabelsContext::oC_LabelName() {
  return getRuleContexts<CypherParser::OC_LabelNameContext>();
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelsContext::oC_LabelName(size_t i) {
  return getRuleContext<CypherParser::OC_LabelNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2025);
    match(CypherParser::COLON);
    setState(2027);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2026);
      match(CypherParser::SP);
    }
    setState(2029);
    oC_LabelName();
    setState(2045);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2031);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
        case 1: {
          setState(2030);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(2034);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::T__10) {
          setState(2033);
          match(CypherParser::T__10);
        }
        setState(2037);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(2036);
          match(CypherParser::COLON);
        }
        setState(2040);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2039);
          match(CypherParser::SP);
        }
        setState(2042);
        oC_LabelName(); 
      }
      setState(2047);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2048);
    match(CypherParser::STAR);
    setState(2050);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx)) {
    case 1: {
      setState(2049);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2056);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(2052);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(2053);
        match(CypherParser::ALL);
        setState(2054);
        match(CypherParser::SP);
        setState(2055);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__8:
      case CypherParser::T__11:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(2059);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
      setState(2058);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2075);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
    case 1: {
      setState(2062);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(2061);
        oC_LowerBound();
      }
      setState(2065);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2064);
        match(CypherParser::SP);
      }
      setState(2067);
      match(CypherParser::T__11);
      setState(2069);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
      case 1: {
        setState(2068);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(2072);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(2071);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(2074);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(2081);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
    case 1: {
      setState(2078);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2077);
        match(CypherParser::SP);
      }
      setState(2080);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2083);
    match(CypherParser::T__1);
    setState(2085);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2084);
      match(CypherParser::SP);
    }
    setState(2087);
    oC_Variable();
    setState(2089);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2088);
      match(CypherParser::SP);
    }
    setState(2091);
    match(CypherParser::T__2);
    setState(2093);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2092);
      match(CypherParser::SP);
    }
    setState(2095);
    oC_Variable();
    setState(2107);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx)) {
    case 1: {
      setState(2097);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2096);
        match(CypherParser::SP);
      }
      setState(2099);
      match(CypherParser::T__10);
      setState(2101);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2100);
        match(CypherParser::SP);
      }
      setState(2103);
      oC_Where();
      setState(2105);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
      case 1: {
        setState(2104);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2128);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(2110);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2109);
        match(CypherParser::SP);
      }
      setState(2112);
      match(CypherParser::T__10);
      setState(2114);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2113);
        match(CypherParser::SP);
      }
      setState(2116);
      kU_IntermediateRelProjectionItems();
      setState(2118);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2117);
        match(CypherParser::SP);
      }
      setState(2120);
      match(CypherParser::T__2);
      setState(2122);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2121);
        match(CypherParser::SP);
      }
      setState(2124);
      kU_IntermediateNodeProjectionItems();
      setState(2126);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2125);
        match(CypherParser::SP);
      }
    }
    setState(2130);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2132);
    match(CypherParser::T__8);
    setState(2134);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 352, _ctx)) {
    case 1: {
      setState(2133);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8055391621128127108) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -4719500096994137801) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 163429815173) != 0)) {
      setState(2136);
      oC_ProjectionItems();
    }
    setState(2140);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2139);
      match(CypherParser::SP);
    }
    setState(2142);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2144);
    match(CypherParser::T__8);
    setState(2146);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
    case 1: {
      setState(2145);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2149);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8055391621128127108) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -4719500096994137801) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 163429815173) != 0)) {
      setState(2148);
      oC_ProjectionItems();
    }
    setState(2152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2151);
      match(CypherParser::SP);
    }
    setState(2154);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2156);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2158);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2160);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2162);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2164);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2166);
    oC_XorExpression();
    setState(2173);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2167);
        match(CypherParser::SP);
        setState(2168);
        match(CypherParser::OR);
        setState(2169);
        match(CypherParser::SP);
        setState(2170);
        oC_XorExpression(); 
      }
      setState(2175);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2176);
    oC_AndExpression();
    setState(2183);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2177);
        match(CypherParser::SP);
        setState(2178);
        match(CypherParser::XOR);
        setState(2179);
        match(CypherParser::SP);
        setState(2180);
        oC_AndExpression(); 
      }
      setState(2185);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2186);
    oC_NotExpression();
    setState(2193);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2187);
        match(CypherParser::SP);
        setState(2188);
        match(CypherParser::AND);
        setState(2189);
        match(CypherParser::SP);
        setState(2190);
        oC_NotExpression(); 
      }
      setState(2195);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2202);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(2196);
      match(CypherParser::NOT);
      setState(2198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2197);
        match(CypherParser::SP);
      }
      setState(2204);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2205);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2246);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2207);
      kU_BitwiseOrOperatorExpression();
      setState(2219);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2209);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2208);
            match(CypherParser::SP);
          }
          setState(2211);
          kU_ComparisonOperator();
          setState(2213);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2212);
            match(CypherParser::SP);
          }
          setState(2215);
          kU_BitwiseOrOperatorExpression(); 
        }
        setState(2221);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2222);
      kU_BitwiseOrOperatorExpression();
      setState(2224);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2223);
        match(CypherParser::SP);
      }
      setState(2226);
      kU_ComparisonOperator();
      setState(2228);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2227);
        match(CypherParser::SP);
      }
      setState(2230);
      kU_BitwiseOrOperatorExpression();
      setState(2240); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2232);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2231);
                  match(CypherParser::SP);
                }
                setState(2234);
                kU_ComparisonOperator();
                setState(2236);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2235);
                  match(CypherParser::SP);
                }
                setState(2238);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2242); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2248);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 516160) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2250);
    kU_BitwiseAndOperatorExpression();
    setState(2261);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2252);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2251);
          match(CypherParser::SP);
        }
        setState(2254);
        match(CypherParser::T__10);
        setState(2256);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2255);
          match(CypherParser::SP);
        }
        setState(2258);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(2263);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2264);
    kU_BitShiftOperatorExpression();
    setState(2275);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2266);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2265);
          match(CypherParser::SP);
        }
        setState(2268);
        match(CypherParser::T__18);
        setState(2270);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2269);
          match(CypherParser::SP);
        }
        setState(2272);
        kU_BitShiftOperatorExpression(); 
      }
      setState(2277);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2278);
    oC_AddOrSubtractExpression();
    setState(2290);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2280);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2279);
          match(CypherParser::SP);
        }
        setState(2282);
        kU_BitShiftOperator();
        setState(2284);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2283);
          match(CypherParser::SP);
        }
        setState(2286);
        oC_AddOrSubtractExpression(); 
      }
      setState(2292);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2293);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__19

    || _la == CypherParser::T__20)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2295);
    oC_MultiplyDivideModuloExpression();
    setState(2307);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2297);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2296);
          match(CypherParser::SP);
        }
        setState(2299);
        kU_AddOrSubtractOperator();
        setState(2301);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2300);
          match(CypherParser::SP);
        }
        setState(2303);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(2309);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2310);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2312);
    oC_PowerOfExpression();
    setState(2324);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2314);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2313);
          match(CypherParser::SP);
        }
        setState(2316);
        kU_MultiplyDivideModuloOperator();
        setState(2318);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2317);
          match(CypherParser::SP);
        }
        setState(2320);
        oC_PowerOfExpression(); 
      }
      setState(2326);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2327);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__22

    || _la == CypherParser::T__23 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2329);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2340);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 389, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2331);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2330);
          match(CypherParser::SP);
        }
        setState(2333);
        match(CypherParser::T__24);
        setState(2335);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2334);
          match(CypherParser::SP);
        }
        setState(2337);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2342);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 389, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2349);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2343);
      match(CypherParser::MINUS);
      setState(2345);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2344);
        match(CypherParser::SP);
      }
      setState(2351);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2352);
    oC_StringListNullOperatorExpression();
    setState(2357);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx)) {
    case 1: {
      setState(2354);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2353);
        match(CypherParser::SP);
      }
      setState(2356);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2359);
    oC_PropertyOrLabelsExpression();
    setState(2367);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx)) {
    case 1: {
      setState(2360);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(2362); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2361);
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2364); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 394, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      setState(2366);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2388);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 399, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2369);
      match(CypherParser::SP);
      setState(2370);
      match(CypherParser::IN);
      setState(2372);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2371);
        match(CypherParser::SP);
      }
      setState(2374);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2375);
      match(CypherParser::T__6);
      setState(2376);
      oC_Expression();
      setState(2377);
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2379);
      match(CypherParser::T__6);
      setState(2381);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 8055391621128127108) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -4719500096994137801) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 163429290885) != 0)) {
        setState(2380);
        oC_Expression();
      }
      setState(2383);
      match(CypherParser::COLON);
      setState(2385);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 8055391621128127108) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -4719500096994137801) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 163429290885) != 0)) {
        setState(2384);
        oC_Expression();
      }
      setState(2387);
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2401);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx)) {
    case 1: {
      setState(2390);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(2391);
      match(CypherParser::SP);
      setState(2392);
      match(CypherParser::STARTS);
      setState(2393);
      match(CypherParser::SP);
      setState(2394);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(2395);
      match(CypherParser::SP);
      setState(2396);
      match(CypherParser::ENDS);
      setState(2397);
      match(CypherParser::SP);
      setState(2398);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(2399);
      match(CypherParser::SP);
      setState(2400);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(2404);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2403);
      match(CypherParser::SP);
    }
    setState(2406);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2409);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2408);
      match(CypherParser::SP);
    }
    setState(2411);
    match(CypherParser::T__25);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2423);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2413);
      match(CypherParser::SP);
      setState(2414);
      match(CypherParser::IS);
      setState(2415);
      match(CypherParser::SP);
      setState(2416);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2417);
      match(CypherParser::SP);
      setState(2418);
      match(CypherParser::IS);
      setState(2419);
      match(CypherParser::SP);
      setState(2420);
      match(CypherParser::NOT);
      setState(2421);
      match(CypherParser::SP);
      setState(2422);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2425);
    oC_Atom();
    setState(2432);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2427);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2426);
          match(CypherParser::SP);
        }
        setState(2429);
        oC_PropertyLookup(); 
      }
      setState(2434);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2444);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 406, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2435);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2436);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2437);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2438);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2439);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2440);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2441);
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2442);
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2443);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2452);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2446);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(2447);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::FALSE:
      case CypherParser::TRUE: {
        enterOuterAlt(_localctx, 3);
        setState(2448);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(2449);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(2450);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
        setState(2451);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2454);
    _la = _input->LA(1);
    if (!(_la == CypherParser::FALSE

    || _la == CypherParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2456);
    match(CypherParser::T__6);
    setState(2458);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2457);
      match(CypherParser::SP);
    }
    setState(2473);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8055391621128127108) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -4719500096994137801) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 163429290885) != 0)) {
      setState(2460);
      oC_Expression();
      setState(2462);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2461);
        match(CypherParser::SP);
      }
      setState(2470);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2464);
        kU_ListEntry();
        setState(2466);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2465);
          match(CypherParser::SP);
        }
        setState(2472);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2475);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2477);
    match(CypherParser::T__2);
    setState(2479);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx)) {
    case 1: {
      setState(2478);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2482);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8055391621128127108) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -4719500096994137801) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 163429290885) != 0)) {
      setState(2481);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 292, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2484);
    match(CypherParser::T__8);
    setState(2486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2485);
      match(CypherParser::SP);
    }
    setState(2488);
    kU_StructField();
    setState(2490);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2489);
      match(CypherParser::SP);
    }
    setState(2502);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2492);
      match(CypherParser::T__2);
      setState(2494);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2493);
        match(CypherParser::SP);
      }
      setState(2496);
      kU_StructField();
      setState(2498);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2497);
        match(CypherParser::SP);
      }
      setState(2504);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2505);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 294, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2509);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2507);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2508);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2511);
      match(CypherParser::SP);
    }
    setState(2514);
    match(CypherParser::COLON);
    setState(2516);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2515);
      match(CypherParser::SP);
    }
    setState(2518);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 296, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2520);
    match(CypherParser::T__1);
    setState(2522);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2521);
      match(CypherParser::SP);
    }
    setState(2524);
    oC_Expression();
    setState(2526);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2525);
      match(CypherParser::SP);
    }
    setState(2528);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::CAST() {
  return getToken(CypherParser::CAST, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::OC_FunctionInvocationContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 298, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2607);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 444, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2530);
      match(CypherParser::COUNT);
      setState(2532);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2531);
        match(CypherParser::SP);
      }
      setState(2534);
      match(CypherParser::T__1);
      setState(2536);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2535);
        match(CypherParser::SP);
      }
      setState(2538);
      match(CypherParser::STAR);
      setState(2540);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2539);
        match(CypherParser::SP);
      }
      setState(2542);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2543);
      match(CypherParser::CAST);
      setState(2545);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2544);
        match(CypherParser::SP);
      }
      setState(2547);
      match(CypherParser::T__1);
      setState(2549);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2548);
        match(CypherParser::SP);
      }
      setState(2551);
      kU_FunctionParameter();
      setState(2553);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2552);
        match(CypherParser::SP);
      }
      setState(2565);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CypherParser::AS: {
          setState(2555);
          match(CypherParser::AS);
          setState(2557);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2556);
            match(CypherParser::SP);
          }
          setState(2559);
          kU_DataType(0);
          break;
        }

        case CypherParser::T__2: {
          setState(2560);
          match(CypherParser::T__2);
          setState(2562);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2561);
            match(CypherParser::SP);
          }
          setState(2564);
          kU_FunctionParameter();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2568);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2567);
        match(CypherParser::SP);
      }
      setState(2570);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2572);
      oC_FunctionName();
      setState(2574);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2573);
        match(CypherParser::SP);
      }
      setState(2576);
      match(CypherParser::T__1);
      setState(2578);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2577);
        match(CypherParser::SP);
      }
      setState(2584);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2580);
        match(CypherParser::DISTINCT);
        setState(2582);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2581);
          match(CypherParser::SP);
        }
      }
      setState(2603);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 8055391621128127108) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -4719500096994137801) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 163429290885) != 0)) {
        setState(2586);
        kU_FunctionParameter();
        setState(2588);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2587);
          match(CypherParser::SP);
        }
        setState(2600);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2590);
          match(CypherParser::T__2);
          setState(2592);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2591);
            match(CypherParser::SP);
          }
          setState(2594);
          kU_FunctionParameter();
          setState(2596);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2595);
            match(CypherParser::SP);
          }
          setState(2602);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2605);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 300, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2609);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_LambdaParameterContext* CypherParser::KU_FunctionParameterContext::kU_LambdaParameter() {
  return getRuleContext<CypherParser::KU_LambdaParameterContext>(0);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 302, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2624);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 448, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2620);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 447, _ctx)) {
      case 1: {
        setState(2611);
        oC_SymbolicName();
        setState(2613);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2612);
          match(CypherParser::SP);
        }
        setState(2615);
        match(CypherParser::COLON);
        setState(2616);
        match(CypherParser::T__5);
        setState(2618);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2617);
          match(CypherParser::SP);
        }
        break;
      }

      default:
        break;
      }
      setState(2622);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2623);
      kU_LambdaParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaParameterContext ------------------------------------------------------------------

CypherParser::KU_LambdaParameterContext::KU_LambdaParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LambdaVarsContext* CypherParser::KU_LambdaParameterContext::kU_LambdaVars() {
  return getRuleContext<CypherParser::KU_LambdaVarsContext>(0);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_LambdaParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaParameter;
}


CypherParser::KU_LambdaParameterContext* CypherParser::kU_LambdaParameter() {
  KU_LambdaParameterContext *_localctx = _tracker.createInstance<KU_LambdaParameterContext>(_ctx, getState());
  enterRule(_localctx, 304, CypherParser::RuleKU_LambdaParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2626);
    kU_LambdaVars();
    setState(2628);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2627);
      match(CypherParser::SP);
    }
    setState(2630);
    match(CypherParser::MINUS);
    setState(2631);
    match(CypherParser::T__15);
    setState(2633);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2632);
      match(CypherParser::SP);
    }
    setState(2635);
    oC_Expression();
    setState(2637);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx)) {
    case 1: {
      setState(2636);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaVarsContext ------------------------------------------------------------------

CypherParser::KU_LambdaVarsContext::KU_LambdaVarsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_LambdaVarsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_LambdaVarsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaVarsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaVarsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaVarsContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaVars;
}


CypherParser::KU_LambdaVarsContext* CypherParser::kU_LambdaVars() {
  KU_LambdaVarsContext *_localctx = _tracker.createInstance<KU_LambdaVarsContext>(_ctx, getState());
  enterRule(_localctx, 306, CypherParser::RuleKU_LambdaVars);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2663);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2639);
        oC_SymbolicName();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(2640);
        match(CypherParser::T__1);
        setState(2642);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2641);
          match(CypherParser::SP);
        }
        setState(2644);
        oC_SymbolicName();
        setState(2646);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2645);
          match(CypherParser::SP);
        }
        setState(2658);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2648);
          match(CypherParser::T__2);
          setState(2650);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2649);
            match(CypherParser::SP);
          }
          setState(2652);
          oC_SymbolicName();
          setState(2654);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2653);
            match(CypherParser::SP);
          }
          setState(2660);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2661);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 308, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2665);
    oC_NodePattern();
    setState(2670); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2667);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2666);
                match(CypherParser::SP);
              }
              setState(2669);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2672); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 459, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 310, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2674);
    match(CypherParser::EXISTS);
    setState(2676);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2675);
      match(CypherParser::SP);
    }
    setState(2678);
    match(CypherParser::T__8);
    setState(2680);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2679);
      match(CypherParser::SP);
    }
    setState(2682);
    match(CypherParser::MATCH);
    setState(2684);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2683);
      match(CypherParser::SP);
    }
    setState(2686);
    oC_Pattern();
    setState(2691);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 464, _ctx)) {
    case 1: {
      setState(2688);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2687);
        match(CypherParser::SP);
      }
      setState(2690);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2694);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2693);
      match(CypherParser::SP);
    }
    setState(2696);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 312, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2698);
    match(CypherParser::COUNT);
    setState(2700);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2699);
      match(CypherParser::SP);
    }
    setState(2702);
    match(CypherParser::T__8);
    setState(2704);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2703);
      match(CypherParser::SP);
    }
    setState(2706);
    match(CypherParser::MATCH);
    setState(2708);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2707);
      match(CypherParser::SP);
    }
    setState(2710);
    oC_Pattern();
    setState(2715);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 470, _ctx)) {
    case 1: {
      setState(2712);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2711);
        match(CypherParser::SP);
      }
      setState(2714);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2718);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2717);
      match(CypherParser::SP);
    }
    setState(2720);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 314, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2722);
    match(CypherParser::T__4);
    setState(2724);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2723);
      match(CypherParser::SP);
    }
    setState(2728);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2726);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2727);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 316, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2752);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 479, _ctx)) {
    case 1: {
      setState(2730);
      match(CypherParser::CASE);
      setState(2735); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2732);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2731);
                  match(CypherParser::SP);
                }
                setState(2734);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2737); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 475, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2739);
      match(CypherParser::CASE);
      setState(2741);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2740);
        match(CypherParser::SP);
      }
      setState(2743);
      oC_Expression();
      setState(2748); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2745);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2744);
                  match(CypherParser::SP);
                }
                setState(2747);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2750); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 478, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2762);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 482, _ctx)) {
    case 1: {
      setState(2755);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2754);
        match(CypherParser::SP);
      }
      setState(2757);
      match(CypherParser::ELSE);
      setState(2759);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2758);
        match(CypherParser::SP);
      }
      setState(2761);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2765);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2764);
      match(CypherParser::SP);
    }
    setState(2767);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 318, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2769);
    match(CypherParser::WHEN);
    setState(2771);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2770);
      match(CypherParser::SP);
    }
    setState(2773);
    oC_Expression();
    setState(2775);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2774);
      match(CypherParser::SP);
    }
    setState(2777);
    match(CypherParser::THEN);
    setState(2779);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2778);
      match(CypherParser::SP);
    }
    setState(2781);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 320, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2783);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 322, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2787);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2785);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2786);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 324, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2789);
    match(CypherParser::T__26);
    setState(2792);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2790);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2791);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 326, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2794);
    oC_Atom();
    setState(2796);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2795);
      match(CypherParser::SP);
    }
    setState(2798);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 328, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2800);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 330, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2802);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 332, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2804);
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 334, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2806);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 336, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2813);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2808);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2809);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2811);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL: {
        enterOuterAlt(_localctx, 4);
        setState(2812);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::AS() {
  return getToken(CypherParser::AS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SET() {
  return getToken(CypherParser::SET, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::START() {
  return getToken(CypherParser::START, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::WRITE() {
  return getToken(CypherParser::WRITE, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 338, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2815);
    _la = _input->LA(1);
    if (!(((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 8022426305271089045) != 0) || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 170199933) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 340, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2817);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4026548224) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 342, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2819);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 64424574976) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 344, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2821);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 140668768878592) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 50: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);
    case 78: return kU_JoinNodeSempred(antlrcpp::downCast<KU_JoinNodeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_JoinNodeSempred(KU_JoinNodeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 4);
    case 2: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
