
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_DetachDatabase", "kU_UseDatabase", 
      "kU_StandaloneCall", "kU_CommentOn", "kU_CreateMacro", "kU_PositionalArgs", 
      "kU_DefaultArg", "kU_FilePaths", "kU_ParsingOptions", "kU_ParsingOption", 
      "kU_CreateNodeTable", "kU_CreateRelTable", "kU_CreateRelTableGroup", 
      "kU_RelTableConnection", "kU_CreateRdfGraph", "kU_DropTable", "kU_AlterTable", 
      "kU_AlterOptions", "kU_AddProperty", "kU_DropProperty", "kU_RenameTable", 
      "kU_RenameProperty", "kU_PropertyDefinitions", "kU_PropertyDefinition", 
      "kU_CreateNodeConstraint", "kU_DataType", "kU_ListIdentifiers", "kU_ListIdentifier", 
      "oC_AnyCypherOption", "oC_Explain", "oC_Profile", "kU_Transaction", 
      "kU_Extension", "kU_LoadExtension", "kU_InstallExtension", "oC_Query", 
      "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
      "oC_MultiPartQuery", "kU_QueryPart", "oC_UpdatingClause", "oC_ReadingClause", 
      "kU_LoadFrom", "kU_InQueryCall", "oC_Match", "oC_Hint", "oC_Hint_Part", 
      "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", "oC_Set", 
      "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_RangeLiteral", 
      "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "oC_PathPatterns", "oC_ExistSubquery", "kU_CountSubquery", 
      "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", "oC_Variable", 
      "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
      "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", 
      "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "','", "')'", "'.'", "'='", "'['", "']'", "'#'", 
      "'{'", "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", 
      "'!='", "'&'", "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", 
      "'$'", "'\\u27E8'", "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", 
      "'\\u3009'", "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", 
      "'\\u2012'", "'\\u2013'", "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", 
      "'\\uFE63'", "'\\uFF0D'", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "'*'", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "'-'", "'!'", "':'", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "ATTACH", 
      "DBTYPE", "USE", "CALL", "COMMENT_", "MACRO", "GLOB", "COPY", "FROM", 
      "COLUMN", "EXPORT", "IMPORT", "DATABASE", "NODE", "TABLE", "GROUP", 
      "RDFGRAPH", "DROP", "ALTER", "DEFAULT", "RENAME", "ADD", "PRIMARY", 
      "KEY", "REL", "TO", "EXPLAIN", "PROFILE", "BEGIN", "TRANSACTION", 
      "READ", "ONLY", "WRITE", "COMMIT", "COMMIT_SKIP_CHECKPOINT", "ROLLBACK", 
      "ROLLBACK_SKIP_CHECKPOINT", "INSTALL", "EXTENSION", "UNION", "ALL", 
      "LOAD", "HEADERS", "OPTIONAL", "MATCH", "UNWIND", "CREATE", "MERGE", 
      "ON", "SET", "DETACH", "DELETE", "WITH", "RETURN", "DISTINCT", "STAR", 
      "AS", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", 
      "DESC", "WHERE", "SHORTEST", "OR", "XOR", "AND", "NOT", "MINUS", "FACTORIAL", 
      "COLON", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL_", "TRUE", 
      "FALSE", "COUNT", "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", 
      "StringLiteral", "EscapedChar", "DecimalInteger", "HexLetter", "HexDigit", 
      "Digit", "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", "RegularDecimalReal", 
      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
      "SP", "WHITESPACE", "Comment", "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,154,2407,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,1,0,1,0,3,0,301,8,0,1,0,1,0,3,0,305,8,0,
  	1,0,5,0,308,8,0,10,0,12,0,311,9,0,1,0,3,0,314,8,0,1,0,1,0,1,1,3,1,319,
  	8,1,1,1,3,1,322,8,1,1,1,1,1,3,1,326,8,1,1,1,3,1,329,8,1,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
  	351,8,2,1,3,1,3,1,3,1,3,3,3,357,8,3,1,3,1,3,3,3,361,8,3,1,3,3,3,364,8,
  	3,1,3,1,3,1,3,1,3,3,3,370,8,3,1,3,3,3,373,8,3,1,4,1,4,3,4,377,8,4,1,4,
  	1,4,3,4,381,8,4,1,4,1,4,3,4,385,8,4,1,4,5,4,388,8,4,10,4,12,4,391,9,4,
  	1,4,3,4,394,8,4,1,4,1,4,1,5,1,5,1,5,3,5,401,8,5,1,5,1,5,3,5,405,8,5,1,
  	5,1,5,1,5,1,5,1,5,1,5,3,5,413,8,5,1,5,1,5,3,5,417,8,5,1,6,1,6,1,6,1,6,
  	1,6,1,6,1,6,1,6,3,6,427,8,6,1,6,1,6,3,6,431,8,6,1,6,1,6,3,6,435,8,6,1,
  	6,5,6,438,8,6,10,6,12,6,441,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
  	7,3,7,453,8,7,1,7,1,7,3,7,457,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,465,8,7,
  	1,7,3,7,468,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,476,8,8,1,8,3,8,479,8,8,1,
  	9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,
  	10,496,8,10,1,10,3,10,499,8,10,1,10,1,10,3,10,503,8,10,1,10,1,10,1,10,
  	1,10,3,10,509,8,10,1,10,3,10,512,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,
  	12,1,12,1,13,1,13,1,13,1,13,3,13,526,8,13,1,13,1,13,3,13,530,8,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
  	1,15,1,15,1,15,1,15,1,15,3,15,552,8,15,1,15,1,15,3,15,556,8,15,1,15,3,
  	15,559,8,15,1,15,3,15,562,8,15,1,15,3,15,565,8,15,1,15,3,15,568,8,15,
  	1,15,1,15,3,15,572,8,15,1,15,5,15,575,8,15,10,15,12,15,578,9,15,1,15,
  	3,15,581,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,591,8,16,1,
  	16,1,16,3,16,595,8,16,1,16,5,16,598,8,16,10,16,12,16,601,9,16,1,17,1,
  	17,3,17,605,8,17,1,17,1,17,1,17,3,17,610,8,17,1,17,1,17,1,18,1,18,3,18,
  	616,8,18,1,18,1,18,3,18,620,8,18,1,18,1,18,3,18,624,8,18,1,18,5,18,627,
  	8,18,10,18,12,18,630,9,18,1,18,1,18,1,18,1,18,3,18,636,8,18,1,18,1,18,
  	3,18,640,8,18,1,18,1,18,3,18,644,8,18,1,18,3,18,647,8,18,1,19,1,19,3,
  	19,651,8,19,1,19,1,19,3,19,655,8,19,1,19,1,19,3,19,659,8,19,1,19,5,19,
  	662,8,19,10,19,12,19,665,9,19,1,19,3,19,668,8,19,1,19,1,19,1,20,1,20,
  	3,20,674,8,20,1,20,1,20,3,20,678,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
  	21,1,21,1,21,1,21,3,21,690,8,21,1,21,1,21,3,21,694,8,21,1,21,1,21,3,21,
  	698,8,21,1,21,1,21,3,21,702,8,21,1,21,1,21,1,21,3,21,707,8,21,1,21,1,
  	21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,719,8,22,1,22,1,22,3,
  	22,723,8,22,1,22,1,22,3,22,727,8,22,1,22,1,22,3,22,731,8,22,1,22,1,22,
  	3,22,735,8,22,3,22,737,8,22,1,22,1,22,3,22,741,8,22,1,22,1,22,3,22,745,
  	8,22,3,22,747,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,3,23,761,8,23,1,23,1,23,3,23,765,8,23,1,23,1,23,3,23,769,8,
  	23,1,23,1,23,3,23,773,8,23,1,23,4,23,776,8,23,11,23,12,23,777,1,23,3,
  	23,781,8,23,1,23,1,23,3,23,785,8,23,1,23,1,23,3,23,789,8,23,3,23,791,
  	8,23,1,23,1,23,3,23,795,8,23,1,23,1,23,3,23,799,8,23,3,23,801,8,23,1,
  	23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,
  	27,1,27,1,28,1,28,1,28,1,28,3,28,837,8,28,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,1,29,3,29,848,8,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,3,33,870,
  	8,33,1,33,1,33,3,33,874,8,33,1,33,5,33,877,8,33,10,33,12,33,880,9,33,
  	1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,890,8,35,1,35,1,35,3,35,
  	894,8,35,1,35,1,35,3,35,898,8,35,1,35,1,35,1,36,1,36,1,36,1,36,3,36,906,
  	8,36,1,36,1,36,3,36,910,8,36,1,36,1,36,3,36,914,8,36,1,36,1,36,1,36,1,
  	36,3,36,920,8,36,1,36,1,36,3,36,924,8,36,1,36,1,36,3,36,928,8,36,1,36,
  	1,36,1,36,1,36,3,36,934,8,36,1,36,1,36,3,36,938,8,36,1,36,1,36,3,36,942,
  	8,36,1,36,1,36,3,36,946,8,36,1,36,1,36,3,36,950,8,36,1,36,1,36,3,36,954,
  	8,36,1,36,1,36,5,36,958,8,36,10,36,12,36,961,9,36,1,37,1,37,5,37,965,
  	8,37,10,37,12,37,968,9,37,1,38,1,38,3,38,972,8,38,1,38,1,38,1,39,1,39,
  	3,39,978,8,39,1,40,5,40,981,8,40,10,40,12,40,984,9,40,1,40,1,40,1,41,
  	5,41,989,8,41,10,41,12,41,992,9,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1010,8,42,1,43,1,43,
  	3,43,1014,8,43,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1022,8,44,1,45,1,45,
  	1,45,1,45,1,46,1,46,1,47,1,47,3,47,1032,8,47,1,47,5,47,1035,8,47,10,47,
  	12,47,1038,9,47,1,47,1,47,3,47,1042,8,47,4,47,1044,8,47,11,47,12,47,1045,
  	1,47,1,47,1,47,3,47,1051,8,47,1,48,1,48,1,48,1,48,3,48,1057,8,48,1,48,
  	1,48,1,48,3,48,1062,8,48,1,48,3,48,1065,8,48,1,49,1,49,3,49,1069,8,49,
  	1,50,1,50,3,50,1073,8,50,5,50,1075,8,50,10,50,12,50,1078,9,50,1,50,1,
  	50,1,50,3,50,1083,8,50,5,50,1085,8,50,10,50,12,50,1088,9,50,1,50,1,50,
  	3,50,1092,8,50,1,50,5,50,1095,8,50,10,50,12,50,1098,9,50,1,50,3,50,1101,
  	8,50,1,50,3,50,1104,8,50,1,50,1,50,3,50,1108,8,50,4,50,1110,8,50,11,50,
  	12,50,1111,1,50,1,50,3,50,1116,8,50,1,51,1,51,3,51,1120,8,51,4,51,1122,
  	8,51,11,51,12,51,1123,1,51,1,51,1,52,1,52,3,52,1130,8,52,5,52,1132,8,
  	52,10,52,12,52,1135,9,52,1,52,1,52,3,52,1139,8,52,5,52,1141,8,52,10,52,
  	12,52,1144,9,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,1152,8,53,1,54,1,54,
  	1,54,1,54,3,54,1158,8,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1166,8,55,
  	1,55,1,55,3,55,1170,8,55,1,55,1,55,3,55,1174,8,55,1,55,1,55,3,55,1178,
  	8,55,1,55,1,55,1,55,1,55,1,55,3,55,1185,8,55,1,55,3,55,1188,8,55,1,55,
  	3,55,1191,8,55,1,55,3,55,1194,8,55,1,56,1,56,1,56,1,56,3,56,1200,8,56,
  	1,56,3,56,1203,8,56,1,57,1,57,3,57,1207,8,57,1,57,1,57,3,57,1211,8,57,
  	1,57,1,57,3,57,1215,8,57,1,57,3,57,1218,8,57,1,57,3,57,1221,8,57,1,57,
  	3,57,1224,8,57,1,57,3,57,1227,8,57,1,58,1,58,3,58,1231,8,58,1,58,1,58,
  	3,58,1235,8,58,1,58,1,58,3,58,1239,8,58,1,58,5,58,1242,8,58,10,58,12,
  	58,1245,9,58,1,58,3,58,1248,8,58,1,58,1,58,1,59,1,59,3,59,1254,8,59,1,
  	59,1,59,3,59,1258,8,59,1,59,1,59,3,59,1262,8,59,1,59,5,59,1265,8,59,10,
  	59,12,59,1268,9,59,1,59,3,59,1271,8,59,1,59,1,59,1,59,3,59,1276,8,59,
  	1,60,1,60,3,60,1280,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,3,61,
  	1290,8,61,1,61,1,61,1,62,1,62,3,62,1296,8,62,1,62,1,62,1,62,5,62,1301,
  	8,62,10,62,12,62,1304,9,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
  	63,1,63,3,63,1316,8,63,1,64,1,64,3,64,1320,8,64,1,64,1,64,3,64,1324,8,
  	64,1,64,1,64,3,64,1328,8,64,1,64,5,64,1331,8,64,10,64,12,64,1334,9,64,
  	1,65,1,65,3,65,1338,8,65,1,65,1,65,3,65,1342,8,65,1,65,1,65,1,66,1,66,
  	3,66,1348,8,66,1,66,1,66,3,66,1352,8,66,1,66,1,66,3,66,1356,8,66,1,66,
  	1,66,3,66,1360,8,66,1,66,5,66,1363,8,66,10,66,12,66,1366,9,66,1,67,1,
  	67,1,67,3,67,1371,8,67,1,67,3,67,1374,8,67,1,68,1,68,1,68,1,69,3,69,1380,
  	8,69,1,69,3,69,1383,8,69,1,69,1,69,1,69,1,69,3,69,1389,8,69,1,69,1,69,
  	3,69,1393,8,69,1,69,1,69,3,69,1397,8,69,1,70,1,70,3,70,1401,8,70,1,70,
  	1,70,3,70,1405,8,70,1,70,5,70,1408,8,70,10,70,12,70,1411,9,70,1,70,1,
  	70,3,70,1415,8,70,1,70,1,70,3,70,1419,8,70,1,70,5,70,1422,8,70,10,70,
  	12,70,1425,9,70,3,70,1427,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,
  	1436,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1445,8,72,1,72,5,72,
  	1448,8,72,10,72,12,72,1451,9,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,
  	74,1,75,1,75,3,75,1463,8,75,1,75,3,75,1466,8,75,1,76,1,76,1,76,1,76,1,
  	77,1,77,3,77,1474,8,77,1,77,1,77,3,77,1478,8,77,1,77,5,77,1481,8,77,10,
  	77,12,77,1484,9,77,1,78,1,78,3,78,1488,8,78,1,78,1,78,3,78,1492,8,78,
  	1,78,1,78,1,78,3,78,1497,8,78,1,79,1,79,1,80,1,80,3,80,1503,8,80,1,80,
  	5,80,1506,8,80,10,80,12,80,1509,9,80,1,80,1,80,1,80,1,80,3,80,1515,8,
  	80,1,81,1,81,3,81,1519,8,81,1,81,1,81,3,81,1523,8,81,3,81,1525,8,81,1,
  	81,1,81,3,81,1529,8,81,3,81,1531,8,81,1,81,1,81,3,81,1535,8,81,3,81,1537,
  	8,81,1,81,1,81,1,82,1,82,3,82,1543,8,82,1,82,1,82,1,83,1,83,3,83,1549,
  	8,83,1,83,1,83,3,83,1553,8,83,1,83,3,83,1556,8,83,1,83,3,83,1559,8,83,
  	1,83,1,83,1,83,1,83,3,83,1565,8,83,1,83,3,83,1568,8,83,1,83,3,83,1571,
  	8,83,1,83,1,83,3,83,1575,8,83,1,83,1,83,1,83,1,83,3,83,1581,8,83,1,83,
  	3,83,1584,8,83,1,83,3,83,1587,8,83,1,83,1,83,3,83,1591,8,83,1,84,1,84,
  	3,84,1595,8,84,1,84,1,84,3,84,1599,8,84,3,84,1601,8,84,1,84,1,84,3,84,
  	1605,8,84,3,84,1607,8,84,1,84,1,84,3,84,1611,8,84,3,84,1613,8,84,1,84,
  	1,84,3,84,1617,8,84,3,84,1619,8,84,1,84,1,84,1,85,1,85,3,85,1625,8,85,
  	1,85,1,85,3,85,1629,8,85,1,85,1,85,3,85,1633,8,85,1,85,1,85,3,85,1637,
  	8,85,1,85,1,85,3,85,1641,8,85,1,85,1,85,3,85,1645,8,85,1,85,1,85,3,85,
  	1649,8,85,1,85,1,85,3,85,1653,8,85,5,85,1655,8,85,10,85,12,85,1658,9,
  	85,3,85,1660,8,85,1,85,1,85,1,86,1,86,3,86,1666,8,86,1,86,1,86,3,86,1670,
  	8,86,1,86,1,86,3,86,1674,8,86,1,86,3,86,1677,8,86,1,86,5,86,1680,8,86,
  	10,86,12,86,1683,9,86,1,87,1,87,3,87,1687,8,87,1,87,1,87,3,87,1691,8,
  	87,1,87,3,87,1694,8,87,1,87,3,87,1697,8,87,1,87,3,87,1700,8,87,1,87,5,
  	87,1703,8,87,10,87,12,87,1706,9,87,1,88,1,88,3,88,1710,8,88,1,88,1,88,
  	1,88,1,88,3,88,1716,8,88,1,88,3,88,1719,8,88,1,88,3,88,1722,8,88,1,88,
  	3,88,1725,8,88,1,88,1,88,3,88,1729,8,88,1,88,3,88,1732,8,88,1,88,3,88,
  	1735,8,88,1,88,3,88,1738,8,88,1,88,3,88,1741,8,88,1,89,1,89,3,89,1745,
  	8,89,1,89,1,89,3,89,1749,8,89,1,89,1,89,3,89,1753,8,89,1,89,1,89,3,89,
  	1757,8,89,1,89,1,89,3,89,1761,8,89,1,89,3,89,1764,8,89,1,89,3,89,1767,
  	8,89,1,89,1,89,3,89,1771,8,89,1,89,1,89,3,89,1775,8,89,1,89,1,89,3,89,
  	1779,8,89,1,89,1,89,3,89,1783,8,89,3,89,1785,8,89,1,89,1,89,1,90,1,90,
  	3,90,1791,8,90,1,90,3,90,1794,8,90,1,90,3,90,1797,8,90,1,90,1,90,1,91,
  	1,91,3,91,1803,8,91,1,91,3,91,1806,8,91,1,91,3,91,1809,8,91,1,91,1,91,
  	1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,97,1,97,
  	1,97,5,97,1828,8,97,10,97,12,97,1831,9,97,1,98,1,98,1,98,1,98,1,98,5,
  	98,1838,8,98,10,98,12,98,1841,9,98,1,99,1,99,1,99,1,99,1,99,5,99,1848,
  	8,99,10,99,12,99,1851,9,99,1,100,1,100,3,100,1855,8,100,5,100,1857,8,
  	100,10,100,12,100,1860,9,100,1,100,1,100,1,101,1,101,3,101,1866,8,101,
  	1,101,1,101,3,101,1870,8,101,1,101,1,101,3,101,1874,8,101,1,101,1,101,
  	3,101,1878,8,101,1,101,1,101,3,101,1882,8,101,1,101,1,101,3,101,1886,
  	8,101,1,101,1,101,3,101,1890,8,101,1,101,1,101,4,101,1894,8,101,11,101,
  	12,101,1895,1,101,1,101,3,101,1900,8,101,1,102,1,102,1,103,1,103,3,103,
  	1906,8,103,1,103,1,103,3,103,1910,8,103,1,103,5,103,1913,8,103,10,103,
  	12,103,1916,9,103,1,104,1,104,3,104,1920,8,104,1,104,1,104,3,104,1924,
  	8,104,1,104,5,104,1927,8,104,10,104,12,104,1930,9,104,1,105,1,105,3,105,
  	1934,8,105,1,105,1,105,3,105,1938,8,105,1,105,1,105,5,105,1942,8,105,
  	10,105,12,105,1945,9,105,1,106,1,106,1,107,1,107,3,107,1951,8,107,1,107,
  	1,107,3,107,1955,8,107,1,107,1,107,5,107,1959,8,107,10,107,12,107,1962,
  	9,107,1,108,1,108,1,109,1,109,3,109,1968,8,109,1,109,1,109,3,109,1972,
  	8,109,1,109,1,109,5,109,1976,8,109,10,109,12,109,1979,9,109,1,110,1,110,
  	1,111,1,111,3,111,1985,8,111,1,111,1,111,3,111,1989,8,111,1,111,5,111,
  	1992,8,111,10,111,12,111,1995,9,111,1,112,1,112,3,112,1999,8,112,5,112,
  	2001,8,112,10,112,12,112,2004,9,112,1,112,1,112,3,112,2008,8,112,1,112,
  	3,112,2011,8,112,1,113,1,113,1,113,4,113,2016,8,113,11,113,12,113,2017,
  	1,113,3,113,2021,8,113,1,114,1,114,1,114,3,114,2026,8,114,1,114,1,114,
  	1,114,1,114,1,114,1,114,1,114,3,114,2035,8,114,1,114,1,114,3,114,2039,
  	8,114,1,114,3,114,2042,8,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
  	1,115,1,115,1,115,1,115,3,115,2055,8,115,1,115,3,115,2058,8,115,1,115,
  	1,115,1,116,3,116,2063,8,116,1,116,1,116,1,117,1,117,1,117,1,117,1,117,
  	1,117,1,117,1,117,1,117,1,117,3,117,2077,8,117,1,118,1,118,3,118,2081,
  	8,118,1,118,5,118,2084,8,118,10,118,12,118,2087,9,118,1,119,1,119,1,119,
  	1,119,1,119,1,119,1,119,1,119,1,119,3,119,2098,8,119,1,120,1,120,1,120,
  	1,120,1,120,1,120,3,120,2106,8,120,1,121,1,121,1,122,1,122,3,122,2112,
  	8,122,1,122,1,122,3,122,2116,8,122,1,122,1,122,3,122,2120,8,122,5,122,
  	2122,8,122,10,122,12,122,2125,9,122,3,122,2127,8,122,1,122,1,122,1,123,
  	1,123,3,123,2133,8,123,1,123,3,123,2136,8,123,1,124,1,124,3,124,2140,
  	8,124,1,124,1,124,3,124,2144,8,124,1,124,1,124,3,124,2148,8,124,1,124,
  	1,124,3,124,2152,8,124,5,124,2154,8,124,10,124,12,124,2157,9,124,1,124,
  	1,124,1,125,1,125,3,125,2163,8,125,1,125,3,125,2166,8,125,1,125,1,125,
  	3,125,2170,8,125,1,125,1,125,1,126,1,126,3,126,2176,8,126,1,126,1,126,
  	3,126,2180,8,126,1,126,1,126,1,127,1,127,3,127,2186,8,127,1,127,1,127,
  	3,127,2190,8,127,1,127,1,127,3,127,2194,8,127,1,127,1,127,1,127,3,127,
  	2199,8,127,1,127,1,127,3,127,2203,8,127,1,127,1,127,3,127,2207,8,127,
  	3,127,2209,8,127,1,127,1,127,3,127,2213,8,127,1,127,1,127,3,127,2217,
  	8,127,1,127,1,127,3,127,2221,8,127,5,127,2223,8,127,10,127,12,127,2226,
  	9,127,3,127,2228,8,127,1,127,1,127,3,127,2232,8,127,1,128,1,128,1,129,
  	1,129,3,129,2238,8,129,1,129,1,129,1,129,3,129,2243,8,129,3,129,2245,
  	8,129,1,129,1,129,1,130,1,130,3,130,2251,8,130,1,130,4,130,2254,8,130,
  	11,130,12,130,2255,1,131,1,131,3,131,2260,8,131,1,131,1,131,3,131,2264,
  	8,131,1,131,1,131,3,131,2268,8,131,1,131,1,131,3,131,2272,8,131,1,131,
  	3,131,2275,8,131,1,131,3,131,2278,8,131,1,131,1,131,1,132,1,132,3,132,
  	2284,8,132,1,132,1,132,3,132,2288,8,132,1,132,1,132,3,132,2292,8,132,
  	1,132,1,132,3,132,2296,8,132,1,132,3,132,2299,8,132,1,132,3,132,2302,
  	8,132,1,132,1,132,1,133,1,133,3,133,2308,8,133,1,133,1,133,3,133,2312,
  	8,133,1,134,1,134,3,134,2316,8,134,1,134,4,134,2319,8,134,11,134,12,134,
  	2320,1,134,1,134,3,134,2325,8,134,1,134,1,134,3,134,2329,8,134,1,134,
  	4,134,2332,8,134,11,134,12,134,2333,3,134,2336,8,134,1,134,3,134,2339,
  	8,134,1,134,1,134,3,134,2343,8,134,1,134,3,134,2346,8,134,1,134,3,134,
  	2349,8,134,1,134,1,134,1,135,1,135,3,135,2355,8,135,1,135,1,135,3,135,
  	2359,8,135,1,135,1,135,3,135,2363,8,135,1,135,1,135,1,136,1,136,1,137,
  	1,137,3,137,2371,8,137,1,138,1,138,1,138,3,138,2376,8,138,1,139,1,139,
  	3,139,2380,8,139,1,139,1,139,1,140,1,140,1,141,1,141,1,142,1,142,1,143,
  	1,143,1,144,1,144,1,144,1,144,1,144,3,144,2397,8,144,1,145,1,145,1,146,
  	1,146,1,147,1,147,1,148,1,148,1,148,0,1,72,149,0,2,4,6,8,10,12,14,16,
  	18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
  	64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
  	108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
  	144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
  	180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
  	216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
  	252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
  	288,290,292,294,296,0,11,2,0,62,62,64,64,1,0,109,112,2,0,6,6,14,19,1,
  	0,21,22,2,0,23,23,119,119,2,0,24,25,103,103,1,0,128,129,8,0,50,50,52,
  	52,58,61,72,72,76,76,122,122,130,130,134,134,2,0,15,15,29,32,2,0,17,17,
  	33,36,2,0,37,47,119,119,2730,0,298,1,0,0,0,2,318,1,0,0,0,4,350,1,0,0,
  	0,6,352,1,0,0,0,8,374,1,0,0,0,10,416,1,0,0,0,12,418,1,0,0,0,14,448,1,
  	0,0,0,16,469,1,0,0,0,18,480,1,0,0,0,20,486,1,0,0,0,22,513,1,0,0,0,24,
  	517,1,0,0,0,26,521,1,0,0,0,28,533,1,0,0,0,30,545,1,0,0,0,32,588,1,0,0,
  	0,34,602,1,0,0,0,36,646,1,0,0,0,38,648,1,0,0,0,40,671,1,0,0,0,42,681,
  	1,0,0,0,44,710,1,0,0,0,46,750,1,0,0,0,48,804,1,0,0,0,50,812,1,0,0,0,52,
  	818,1,0,0,0,54,824,1,0,0,0,56,836,1,0,0,0,58,838,1,0,0,0,60,849,1,0,0,
  	0,62,853,1,0,0,0,64,859,1,0,0,0,66,867,1,0,0,0,68,881,1,0,0,0,70,885,
  	1,0,0,0,72,953,1,0,0,0,74,962,1,0,0,0,76,969,1,0,0,0,78,977,1,0,0,0,80,
  	982,1,0,0,0,82,990,1,0,0,0,84,1009,1,0,0,0,86,1013,1,0,0,0,88,1015,1,
  	0,0,0,90,1023,1,0,0,0,92,1027,1,0,0,0,94,1050,1,0,0,0,96,1064,1,0,0,0,
  	98,1068,1,0,0,0,100,1115,1,0,0,0,102,1121,1,0,0,0,104,1133,1,0,0,0,106,
  	1151,1,0,0,0,108,1157,1,0,0,0,110,1159,1,0,0,0,112,1195,1,0,0,0,114,1206,
  	1,0,0,0,116,1228,1,0,0,0,118,1275,1,0,0,0,120,1277,1,0,0,0,122,1287,1,
  	0,0,0,124,1293,1,0,0,0,126,1315,1,0,0,0,128,1317,1,0,0,0,130,1335,1,0,
  	0,0,132,1347,1,0,0,0,134,1367,1,0,0,0,136,1375,1,0,0,0,138,1382,1,0,0,
  	0,140,1426,1,0,0,0,142,1435,1,0,0,0,144,1437,1,0,0,0,146,1452,1,0,0,0,
  	148,1456,1,0,0,0,150,1460,1,0,0,0,152,1467,1,0,0,0,154,1471,1,0,0,0,156,
  	1496,1,0,0,0,158,1498,1,0,0,0,160,1514,1,0,0,0,162,1516,1,0,0,0,164,1540,
  	1,0,0,0,166,1590,1,0,0,0,168,1592,1,0,0,0,170,1622,1,0,0,0,172,1663,1,
  	0,0,0,174,1684,1,0,0,0,176,1707,1,0,0,0,178,1742,1,0,0,0,180,1788,1,0,
  	0,0,182,1800,1,0,0,0,184,1812,1,0,0,0,186,1814,1,0,0,0,188,1816,1,0,0,
  	0,190,1818,1,0,0,0,192,1820,1,0,0,0,194,1822,1,0,0,0,196,1832,1,0,0,0,
  	198,1842,1,0,0,0,200,1858,1,0,0,0,202,1899,1,0,0,0,204,1901,1,0,0,0,206,
  	1903,1,0,0,0,208,1917,1,0,0,0,210,1931,1,0,0,0,212,1946,1,0,0,0,214,1948,
  	1,0,0,0,216,1963,1,0,0,0,218,1965,1,0,0,0,220,1980,1,0,0,0,222,1982,1,
  	0,0,0,224,2002,1,0,0,0,226,2012,1,0,0,0,228,2041,1,0,0,0,230,2054,1,0,
  	0,0,232,2062,1,0,0,0,234,2076,1,0,0,0,236,2078,1,0,0,0,238,2097,1,0,0,
  	0,240,2105,1,0,0,0,242,2107,1,0,0,0,244,2109,1,0,0,0,246,2130,1,0,0,0,
  	248,2137,1,0,0,0,250,2162,1,0,0,0,252,2173,1,0,0,0,254,2231,1,0,0,0,256,
  	2233,1,0,0,0,258,2244,1,0,0,0,260,2248,1,0,0,0,262,2257,1,0,0,0,264,2281,
  	1,0,0,0,266,2305,1,0,0,0,268,2335,1,0,0,0,270,2352,1,0,0,0,272,2366,1,
  	0,0,0,274,2370,1,0,0,0,276,2372,1,0,0,0,278,2377,1,0,0,0,280,2383,1,0,
  	0,0,282,2385,1,0,0,0,284,2387,1,0,0,0,286,2389,1,0,0,0,288,2396,1,0,0,
  	0,290,2398,1,0,0,0,292,2400,1,0,0,0,294,2402,1,0,0,0,296,2404,1,0,0,0,
  	298,309,3,2,1,0,299,301,5,151,0,0,300,299,1,0,0,0,300,301,1,0,0,0,301,
  	302,1,0,0,0,302,304,5,1,0,0,303,305,5,151,0,0,304,303,1,0,0,0,304,305,
  	1,0,0,0,305,306,1,0,0,0,306,308,3,2,1,0,307,300,1,0,0,0,308,311,1,0,0,
  	0,309,307,1,0,0,0,309,310,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,312,
  	314,5,151,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,316,
  	5,0,0,1,316,1,1,0,0,0,317,319,3,78,39,0,318,317,1,0,0,0,318,319,1,0,0,
  	0,319,321,1,0,0,0,320,322,5,151,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,
  	323,1,0,0,0,323,328,3,4,2,0,324,326,5,151,0,0,325,324,1,0,0,0,325,326,
  	1,0,0,0,326,327,1,0,0,0,327,329,5,1,0,0,328,325,1,0,0,0,328,329,1,0,0,
  	0,329,3,1,0,0,0,330,351,3,92,46,0,331,351,3,42,21,0,332,351,3,44,22,0,
  	333,351,3,46,23,0,334,351,3,50,25,0,335,351,3,52,26,0,336,351,3,54,27,
  	0,337,351,3,6,3,0,338,351,3,12,6,0,339,351,3,14,7,0,340,351,3,26,13,0,
  	341,351,3,30,15,0,342,351,3,28,14,0,343,351,3,84,42,0,344,351,3,86,43,
  	0,345,351,3,16,8,0,346,351,3,18,9,0,347,351,3,20,10,0,348,351,3,22,11,
  	0,349,351,3,24,12,0,350,330,1,0,0,0,350,331,1,0,0,0,350,332,1,0,0,0,350,
  	333,1,0,0,0,350,334,1,0,0,0,350,335,1,0,0,0,350,336,1,0,0,0,350,337,1,
  	0,0,0,350,338,1,0,0,0,350,339,1,0,0,0,350,340,1,0,0,0,350,341,1,0,0,0,
  	350,342,1,0,0,0,350,343,1,0,0,0,350,344,1,0,0,0,350,345,1,0,0,0,350,346,
  	1,0,0,0,350,347,1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,0,351,5,1,0,0,0,
  	352,353,5,55,0,0,353,354,5,151,0,0,354,363,3,286,143,0,355,357,5,151,
  	0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,360,3,8,4,0,359,
  	361,5,151,0,0,360,359,1,0,0,0,360,361,1,0,0,0,361,364,1,0,0,0,362,364,
  	5,151,0,0,363,356,1,0,0,0,363,362,1,0,0,0,364,365,1,0,0,0,365,366,5,56,
  	0,0,366,367,5,151,0,0,367,372,3,10,5,0,368,370,5,151,0,0,369,368,1,0,
  	0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,373,3,38,19,0,372,369,1,0,0,0,
  	372,373,1,0,0,0,373,7,1,0,0,0,374,376,5,2,0,0,375,377,5,151,0,0,376,375,
  	1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,389,3,286,143,0,379,381,5,
  	151,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,384,5,3,0,
  	0,383,385,5,151,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,
  	388,3,286,143,0,387,380,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,
  	1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,392,394,5,151,0,0,393,392,1,0,
  	0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,396,5,4,0,0,396,9,1,0,0,0,397,
  	417,3,36,18,0,398,400,5,2,0,0,399,401,5,151,0,0,400,399,1,0,0,0,400,401,
  	1,0,0,0,401,402,1,0,0,0,402,404,3,92,46,0,403,405,5,151,0,0,404,403,1,
  	0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,5,4,0,0,407,417,1,0,0,0,
  	408,417,3,272,136,0,409,410,3,272,136,0,410,412,5,5,0,0,411,413,5,151,
  	0,0,412,411,1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,415,3,286,143,
  	0,415,417,1,0,0,0,416,397,1,0,0,0,416,398,1,0,0,0,416,408,1,0,0,0,416,
  	409,1,0,0,0,417,11,1,0,0,0,418,419,5,55,0,0,419,420,5,151,0,0,420,421,
  	3,286,143,0,421,422,5,151,0,0,422,423,5,56,0,0,423,424,5,151,0,0,424,
  	426,5,2,0,0,425,427,5,151,0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,428,
  	1,0,0,0,428,439,5,137,0,0,429,431,5,151,0,0,430,429,1,0,0,0,430,431,1,
  	0,0,0,431,432,1,0,0,0,432,434,5,3,0,0,433,435,5,151,0,0,434,433,1,0,0,
  	0,434,435,1,0,0,0,435,436,1,0,0,0,436,438,5,137,0,0,437,430,1,0,0,0,438,
  	441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,439,1,
  	0,0,0,442,443,5,4,0,0,443,444,5,151,0,0,444,445,5,106,0,0,445,446,5,151,
  	0,0,446,447,5,57,0,0,447,13,1,0,0,0,448,449,5,55,0,0,449,450,5,151,0,
  	0,450,452,5,2,0,0,451,453,5,151,0,0,452,451,1,0,0,0,452,453,1,0,0,0,453,
  	454,1,0,0,0,454,456,3,92,46,0,455,457,5,151,0,0,456,455,1,0,0,0,456,457,
  	1,0,0,0,457,458,1,0,0,0,458,459,5,4,0,0,459,460,5,151,0,0,460,461,5,73,
  	0,0,461,462,5,151,0,0,462,467,5,137,0,0,463,465,5,151,0,0,464,463,1,0,
  	0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,468,3,38,19,0,467,464,1,0,0,0,
  	467,468,1,0,0,0,468,15,1,0,0,0,469,470,5,58,0,0,470,471,5,151,0,0,471,
  	472,5,60,0,0,472,473,5,151,0,0,473,478,5,137,0,0,474,476,5,151,0,0,475,
  	474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,479,3,38,19,0,478,475,
  	1,0,0,0,478,479,1,0,0,0,479,17,1,0,0,0,480,481,5,59,0,0,481,482,5,151,
  	0,0,482,483,5,60,0,0,483,484,5,151,0,0,484,485,5,137,0,0,485,19,1,0,0,
  	0,486,487,5,48,0,0,487,488,5,151,0,0,488,495,5,137,0,0,489,490,5,151,
  	0,0,490,491,5,104,0,0,491,492,5,151,0,0,492,493,3,286,143,0,493,494,5,
  	151,0,0,494,496,1,0,0,0,495,489,1,0,0,0,495,496,1,0,0,0,496,511,1,0,0,
  	0,497,499,5,151,0,0,498,497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,
  	502,5,2,0,0,501,503,5,151,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,
  	1,0,0,0,504,505,5,49,0,0,505,506,5,151,0,0,506,508,5,137,0,0,507,509,
  	5,151,0,0,508,507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,512,5,4,
  	0,0,511,498,1,0,0,0,511,512,1,0,0,0,512,21,1,0,0,0,513,514,5,98,0,0,514,
  	515,5,151,0,0,515,516,3,286,143,0,516,23,1,0,0,0,517,518,5,50,0,0,518,
  	519,5,151,0,0,519,520,3,286,143,0,520,25,1,0,0,0,521,522,5,51,0,0,522,
  	523,5,151,0,0,523,525,3,288,144,0,524,526,5,151,0,0,525,524,1,0,0,0,525,
  	526,1,0,0,0,526,527,1,0,0,0,527,529,5,6,0,0,528,530,5,151,0,0,529,528,
  	1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,3,192,96,0,532,27,1,0,
  	0,0,533,534,5,52,0,0,534,535,5,151,0,0,535,536,5,96,0,0,536,537,5,151,
  	0,0,537,538,5,62,0,0,538,539,5,151,0,0,539,540,3,286,143,0,540,541,5,
  	151,0,0,541,542,5,126,0,0,542,543,5,151,0,0,543,544,5,137,0,0,544,29,
  	1,0,0,0,545,546,5,94,0,0,546,547,5,151,0,0,547,548,5,53,0,0,548,549,5,
  	151,0,0,549,551,3,256,128,0,550,552,5,151,0,0,551,550,1,0,0,0,551,552,
  	1,0,0,0,552,553,1,0,0,0,553,555,5,2,0,0,554,556,5,151,0,0,555,554,1,0,
  	0,0,555,556,1,0,0,0,556,558,1,0,0,0,557,559,3,32,16,0,558,557,1,0,0,0,
  	558,559,1,0,0,0,559,561,1,0,0,0,560,562,5,151,0,0,561,560,1,0,0,0,561,
  	562,1,0,0,0,562,564,1,0,0,0,563,565,3,34,17,0,564,563,1,0,0,0,564,565,
  	1,0,0,0,565,576,1,0,0,0,566,568,5,151,0,0,567,566,1,0,0,0,567,568,1,0,
  	0,0,568,569,1,0,0,0,569,571,5,3,0,0,570,572,5,151,0,0,571,570,1,0,0,0,
  	571,572,1,0,0,0,572,573,1,0,0,0,573,575,3,34,17,0,574,567,1,0,0,0,575,
  	578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,580,1,0,0,0,578,576,1,
  	0,0,0,579,581,5,151,0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,
  	0,582,583,5,4,0,0,583,584,5,151,0,0,584,585,5,104,0,0,585,586,5,151,0,
  	0,586,587,3,192,96,0,587,31,1,0,0,0,588,599,3,288,144,0,589,591,5,151,
  	0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,594,5,3,0,0,593,
  	595,5,151,0,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,598,
  	3,288,144,0,597,590,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,
  	0,0,0,600,33,1,0,0,0,601,599,1,0,0,0,602,604,3,288,144,0,603,605,5,151,
  	0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,607,5,121,0,0,
  	607,609,5,6,0,0,608,610,5,151,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,
  	611,1,0,0,0,611,612,3,240,120,0,612,35,1,0,0,0,613,615,5,7,0,0,614,616,
  	5,151,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,628,5,137,
  	0,0,618,620,5,151,0,0,619,618,1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,
  	621,623,5,3,0,0,622,624,5,151,0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,
  	625,1,0,0,0,625,627,5,137,0,0,626,619,1,0,0,0,627,630,1,0,0,0,628,626,
  	1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,628,1,0,0,0,631,647,5,8,0,
  	0,632,647,5,137,0,0,633,635,5,54,0,0,634,636,5,151,0,0,635,634,1,0,0,
  	0,635,636,1,0,0,0,636,637,1,0,0,0,637,639,5,2,0,0,638,640,5,151,0,0,639,
  	638,1,0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,643,5,137,0,0,642,644,
  	5,151,0,0,643,642,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,647,5,4,
  	0,0,646,613,1,0,0,0,646,632,1,0,0,0,646,633,1,0,0,0,647,37,1,0,0,0,648,
  	650,5,2,0,0,649,651,5,151,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,
  	1,0,0,0,652,663,3,40,20,0,653,655,5,151,0,0,654,653,1,0,0,0,654,655,1,
  	0,0,0,655,656,1,0,0,0,656,658,5,3,0,0,657,659,5,151,0,0,658,657,1,0,0,
  	0,658,659,1,0,0,0,659,660,1,0,0,0,660,662,3,40,20,0,661,654,1,0,0,0,662,
  	665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,667,1,0,0,0,665,663,1,
  	0,0,0,666,668,5,151,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,
  	0,669,670,5,4,0,0,670,39,1,0,0,0,671,673,3,288,144,0,672,674,5,151,0,
  	0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,677,5,6,0,0,676,
  	678,5,151,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,680,
  	3,240,120,0,680,41,1,0,0,0,681,682,5,94,0,0,682,683,5,151,0,0,683,684,
  	5,61,0,0,684,685,5,151,0,0,685,686,5,62,0,0,686,687,5,151,0,0,687,689,
  	3,286,143,0,688,690,5,151,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,691,
  	1,0,0,0,691,693,5,2,0,0,692,694,5,151,0,0,693,692,1,0,0,0,693,694,1,0,
  	0,0,694,695,1,0,0,0,695,697,3,66,33,0,696,698,5,151,0,0,697,696,1,0,0,
  	0,697,698,1,0,0,0,698,699,1,0,0,0,699,701,5,3,0,0,700,702,5,151,0,0,701,
  	700,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,704,3,70,35,0,704,706,
  	1,0,0,0,705,707,5,151,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,
  	0,0,708,709,5,4,0,0,709,43,1,0,0,0,710,711,5,94,0,0,711,712,5,151,0,0,
  	712,713,5,72,0,0,713,714,5,151,0,0,714,715,5,62,0,0,715,716,5,151,0,0,
  	716,718,3,286,143,0,717,719,5,151,0,0,718,717,1,0,0,0,718,719,1,0,0,0,
  	719,720,1,0,0,0,720,722,5,2,0,0,721,723,5,151,0,0,722,721,1,0,0,0,722,
  	723,1,0,0,0,723,724,1,0,0,0,724,726,3,48,24,0,725,727,5,151,0,0,726,725,
  	1,0,0,0,726,727,1,0,0,0,727,736,1,0,0,0,728,730,5,3,0,0,729,731,5,151,
  	0,0,730,729,1,0,0,0,730,731,1,0,0,0,731,732,1,0,0,0,732,734,3,66,33,0,
  	733,735,5,151,0,0,734,733,1,0,0,0,734,735,1,0,0,0,735,737,1,0,0,0,736,
  	728,1,0,0,0,736,737,1,0,0,0,737,746,1,0,0,0,738,740,5,3,0,0,739,741,5,
  	151,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,1,0,0,0,742,744,3,288,
  	144,0,743,745,5,151,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,
  	0,746,738,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,749,5,4,0,0,749,
  	45,1,0,0,0,750,751,5,94,0,0,751,752,5,151,0,0,752,753,5,72,0,0,753,754,
  	5,151,0,0,754,755,5,62,0,0,755,756,5,151,0,0,756,757,5,63,0,0,757,758,
  	5,151,0,0,758,760,3,286,143,0,759,761,5,151,0,0,760,759,1,0,0,0,760,761,
  	1,0,0,0,761,762,1,0,0,0,762,764,5,2,0,0,763,765,5,151,0,0,764,763,1,0,
  	0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,768,3,48,24,0,767,769,5,151,0,
  	0,768,767,1,0,0,0,768,769,1,0,0,0,769,775,1,0,0,0,770,772,5,3,0,0,771,
  	773,5,151,0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,776,
  	3,48,24,0,775,770,1,0,0,0,776,777,1,0,0,0,777,775,1,0,0,0,777,778,1,0,
  	0,0,778,780,1,0,0,0,779,781,5,151,0,0,780,779,1,0,0,0,780,781,1,0,0,0,
  	781,790,1,0,0,0,782,784,5,3,0,0,783,785,5,151,0,0,784,783,1,0,0,0,784,
  	785,1,0,0,0,785,786,1,0,0,0,786,788,3,66,33,0,787,789,5,151,0,0,788,787,
  	1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,782,1,0,0,0,790,791,1,0,0,
  	0,791,800,1,0,0,0,792,794,5,3,0,0,793,795,5,151,0,0,794,793,1,0,0,0,794,
  	795,1,0,0,0,795,796,1,0,0,0,796,798,3,288,144,0,797,799,5,151,0,0,798,
  	797,1,0,0,0,798,799,1,0,0,0,799,801,1,0,0,0,800,792,1,0,0,0,800,801,1,
  	0,0,0,801,802,1,0,0,0,802,803,5,4,0,0,803,47,1,0,0,0,804,805,5,56,0,0,
  	805,806,5,151,0,0,806,807,3,286,143,0,807,808,5,151,0,0,808,809,5,73,
  	0,0,809,810,5,151,0,0,810,811,3,286,143,0,811,49,1,0,0,0,812,813,5,94,
  	0,0,813,814,5,151,0,0,814,815,5,64,0,0,815,816,5,151,0,0,816,817,3,286,
  	143,0,817,51,1,0,0,0,818,819,5,65,0,0,819,820,5,151,0,0,820,821,7,0,0,
  	0,821,822,5,151,0,0,822,823,3,286,143,0,823,53,1,0,0,0,824,825,5,66,0,
  	0,825,826,5,151,0,0,826,827,5,62,0,0,827,828,5,151,0,0,828,829,3,286,
  	143,0,829,830,5,151,0,0,830,831,3,56,28,0,831,55,1,0,0,0,832,837,3,58,
  	29,0,833,837,3,60,30,0,834,837,3,62,31,0,835,837,3,64,32,0,836,832,1,
  	0,0,0,836,833,1,0,0,0,836,834,1,0,0,0,836,835,1,0,0,0,837,57,1,0,0,0,
  	838,839,5,69,0,0,839,840,5,151,0,0,840,841,3,280,140,0,841,842,5,151,
  	0,0,842,847,3,72,36,0,843,844,5,151,0,0,844,845,5,67,0,0,845,846,5,151,
  	0,0,846,848,3,192,96,0,847,843,1,0,0,0,847,848,1,0,0,0,848,59,1,0,0,0,
  	849,850,5,65,0,0,850,851,5,151,0,0,851,852,3,280,140,0,852,61,1,0,0,0,
  	853,854,5,68,0,0,854,855,5,151,0,0,855,856,5,73,0,0,856,857,5,151,0,0,
  	857,858,3,286,143,0,858,63,1,0,0,0,859,860,5,68,0,0,860,861,5,151,0,0,
  	861,862,3,280,140,0,862,863,5,151,0,0,863,864,5,73,0,0,864,865,5,151,
  	0,0,865,866,3,280,140,0,866,65,1,0,0,0,867,878,3,68,34,0,868,870,5,151,
  	0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,873,5,3,0,0,872,
  	874,5,151,0,0,873,872,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,877,
  	3,68,34,0,876,869,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,
  	0,0,879,67,1,0,0,0,880,878,1,0,0,0,881,882,3,280,140,0,882,883,5,151,
  	0,0,883,884,3,72,36,0,884,69,1,0,0,0,885,886,5,70,0,0,886,887,5,151,0,
  	0,887,889,5,71,0,0,888,890,5,151,0,0,889,888,1,0,0,0,889,890,1,0,0,0,
  	890,891,1,0,0,0,891,893,5,2,0,0,892,894,5,151,0,0,893,892,1,0,0,0,893,
  	894,1,0,0,0,894,895,1,0,0,0,895,897,3,280,140,0,896,898,5,151,0,0,897,
  	896,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,900,5,4,0,0,900,71,1,
  	0,0,0,901,902,6,36,-1,0,902,954,3,288,144,0,903,905,5,87,0,0,904,906,
  	5,151,0,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,907,909,5,2,
  	0,0,908,910,5,151,0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,
  	911,913,3,66,33,0,912,914,5,151,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,
  	915,1,0,0,0,915,916,5,4,0,0,916,954,1,0,0,0,917,919,3,288,144,0,918,920,
  	5,151,0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,923,5,2,
  	0,0,922,924,5,151,0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,1,0,0,0,
  	925,927,3,66,33,0,926,928,5,151,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,
  	929,1,0,0,0,929,930,5,4,0,0,930,954,1,0,0,0,931,933,3,288,144,0,932,934,
  	5,151,0,0,933,932,1,0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,937,5,2,
  	0,0,936,938,5,151,0,0,937,936,1,0,0,0,937,938,1,0,0,0,938,939,1,0,0,0,
  	939,941,3,72,36,0,940,942,5,151,0,0,941,940,1,0,0,0,941,942,1,0,0,0,942,
  	943,1,0,0,0,943,945,5,3,0,0,944,946,5,151,0,0,945,944,1,0,0,0,945,946,
  	1,0,0,0,946,947,1,0,0,0,947,949,3,72,36,0,948,950,5,151,0,0,949,948,1,
  	0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,5,4,0,0,952,954,1,0,0,0,
  	953,901,1,0,0,0,953,903,1,0,0,0,953,917,1,0,0,0,953,931,1,0,0,0,954,959,
  	1,0,0,0,955,956,10,4,0,0,956,958,3,74,37,0,957,955,1,0,0,0,958,961,1,
  	0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,73,1,0,0,0,961,959,1,0,0,0,
  	962,966,3,76,38,0,963,965,3,76,38,0,964,963,1,0,0,0,965,968,1,0,0,0,966,
  	964,1,0,0,0,966,967,1,0,0,0,967,75,1,0,0,0,968,966,1,0,0,0,969,971,5,
  	7,0,0,970,972,3,282,141,0,971,970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,
  	0,0,973,974,5,8,0,0,974,77,1,0,0,0,975,978,3,80,40,0,976,978,3,82,41,
  	0,977,975,1,0,0,0,977,976,1,0,0,0,978,79,1,0,0,0,979,981,5,151,0,0,980,
  	979,1,0,0,0,981,984,1,0,0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,985,1,
  	0,0,0,984,982,1,0,0,0,985,986,5,74,0,0,986,81,1,0,0,0,987,989,5,151,0,
  	0,988,987,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,
  	993,1,0,0,0,992,990,1,0,0,0,993,994,5,75,0,0,994,83,1,0,0,0,995,996,5,
  	76,0,0,996,997,5,151,0,0,997,1010,5,77,0,0,998,999,5,76,0,0,999,1000,
  	5,151,0,0,1000,1001,5,77,0,0,1001,1002,5,151,0,0,1002,1003,5,78,0,0,1003,
  	1004,5,151,0,0,1004,1010,5,79,0,0,1005,1010,5,81,0,0,1006,1010,5,82,0,
  	0,1007,1010,5,83,0,0,1008,1010,5,84,0,0,1009,995,1,0,0,0,1009,998,1,0,
  	0,0,1009,1005,1,0,0,0,1009,1006,1,0,0,0,1009,1007,1,0,0,0,1009,1008,1,
  	0,0,0,1010,85,1,0,0,0,1011,1014,3,88,44,0,1012,1014,3,90,45,0,1013,1011,
  	1,0,0,0,1013,1012,1,0,0,0,1014,87,1,0,0,0,1015,1016,5,89,0,0,1016,1017,
  	5,151,0,0,1017,1018,5,86,0,0,1018,1021,5,151,0,0,1019,1022,5,137,0,0,
  	1020,1022,3,272,136,0,1021,1019,1,0,0,0,1021,1020,1,0,0,0,1022,89,1,0,
  	0,0,1023,1024,5,85,0,0,1024,1025,5,151,0,0,1025,1026,3,272,136,0,1026,
  	91,1,0,0,0,1027,1028,3,94,47,0,1028,93,1,0,0,0,1029,1036,3,98,49,0,1030,
  	1032,5,151,0,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,
  	1033,1035,3,96,48,0,1034,1031,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,
  	0,0,1036,1037,1,0,0,0,1037,1051,1,0,0,0,1038,1036,1,0,0,0,1039,1041,3,
  	136,68,0,1040,1042,5,151,0,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,
  	1044,1,0,0,0,1043,1039,1,0,0,0,1044,1045,1,0,0,0,1045,1043,1,0,0,0,1045,
  	1046,1,0,0,0,1046,1047,1,0,0,0,1047,1048,3,98,49,0,1048,1049,6,47,-1,
  	0,1049,1051,1,0,0,0,1050,1029,1,0,0,0,1050,1043,1,0,0,0,1051,95,1,0,0,
  	0,1052,1053,5,87,0,0,1053,1054,5,151,0,0,1054,1056,5,88,0,0,1055,1057,
  	5,151,0,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,1058,1,0,0,0,1058,
  	1065,3,98,49,0,1059,1061,5,87,0,0,1060,1062,5,151,0,0,1061,1060,1,0,0,
  	0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1065,3,98,49,0,1064,1052,1,
  	0,0,0,1064,1059,1,0,0,0,1065,97,1,0,0,0,1066,1069,3,100,50,0,1067,1069,
  	3,102,51,0,1068,1066,1,0,0,0,1068,1067,1,0,0,0,1069,99,1,0,0,0,1070,1072,
  	3,108,54,0,1071,1073,5,151,0,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,
  	1075,1,0,0,0,1074,1070,1,0,0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,
  	1077,1,0,0,0,1077,1079,1,0,0,0,1078,1076,1,0,0,0,1079,1116,3,136,68,0,
  	1080,1082,3,108,54,0,1081,1083,5,151,0,0,1082,1081,1,0,0,0,1082,1083,
  	1,0,0,0,1083,1085,1,0,0,0,1084,1080,1,0,0,0,1085,1088,1,0,0,0,1086,1084,
  	1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,0,0,1088,1086,1,0,0,0,1089,1096,
  	3,106,53,0,1090,1092,5,151,0,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,
  	1093,1,0,0,0,1093,1095,3,106,53,0,1094,1091,1,0,0,0,1095,1098,1,0,0,0,
  	1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,1103,1,0,0,0,1098,1096,1,0,0,
  	0,1099,1101,5,151,0,0,1100,1099,1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,
  	0,0,0,1102,1104,3,136,68,0,1103,1100,1,0,0,0,1103,1104,1,0,0,0,1104,1116,
  	1,0,0,0,1105,1107,3,108,54,0,1106,1108,5,151,0,0,1107,1106,1,0,0,0,1107,
  	1108,1,0,0,0,1108,1110,1,0,0,0,1109,1105,1,0,0,0,1110,1111,1,0,0,0,1111,
  	1109,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,1113,1114,6,50,-1,0,
  	1114,1116,1,0,0,0,1115,1076,1,0,0,0,1115,1086,1,0,0,0,1115,1109,1,0,0,
  	0,1116,101,1,0,0,0,1117,1119,3,104,52,0,1118,1120,5,151,0,0,1119,1118,
  	1,0,0,0,1119,1120,1,0,0,0,1120,1122,1,0,0,0,1121,1117,1,0,0,0,1122,1123,
  	1,0,0,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,1124,1125,1,0,0,0,1125,1126,
  	3,100,50,0,1126,103,1,0,0,0,1127,1129,3,108,54,0,1128,1130,5,151,0,0,
  	1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,1132,1,0,0,0,1131,1127,1,0,0,
  	0,1132,1135,1,0,0,0,1133,1131,1,0,0,0,1133,1134,1,0,0,0,1134,1142,1,0,
  	0,0,1135,1133,1,0,0,0,1136,1138,3,106,53,0,1137,1139,5,151,0,0,1138,1137,
  	1,0,0,0,1138,1139,1,0,0,0,1139,1141,1,0,0,0,1140,1136,1,0,0,0,1141,1144,
  	1,0,0,0,1142,1140,1,0,0,0,1142,1143,1,0,0,0,1143,1145,1,0,0,0,1144,1142,
  	1,0,0,0,1145,1146,3,134,67,0,1146,105,1,0,0,0,1147,1152,3,122,61,0,1148,
  	1152,3,124,62,0,1149,1152,3,128,64,0,1150,1152,3,132,66,0,1151,1147,1,
  	0,0,0,1151,1148,1,0,0,0,1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,107,
  	1,0,0,0,1153,1158,3,114,57,0,1154,1158,3,120,60,0,1155,1158,3,112,56,
  	0,1156,1158,3,110,55,0,1157,1153,1,0,0,0,1157,1154,1,0,0,0,1157,1155,
  	1,0,0,0,1157,1156,1,0,0,0,1158,109,1,0,0,0,1159,1177,5,89,0,0,1160,1161,
  	5,151,0,0,1161,1162,5,100,0,0,1162,1163,5,151,0,0,1163,1165,5,90,0,0,
  	1164,1166,5,151,0,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,0,
  	0,0,1167,1169,5,2,0,0,1168,1170,5,151,0,0,1169,1168,1,0,0,0,1169,1170,
  	1,0,0,0,1170,1171,1,0,0,0,1171,1173,3,66,33,0,1172,1174,5,151,0,0,1173,
  	1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1176,5,4,0,0,1176,
  	1178,1,0,0,0,1177,1160,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,0,0,0,1179,
  	1180,5,151,0,0,1180,1181,5,56,0,0,1181,1182,5,151,0,0,1182,1187,3,10,
  	5,0,1183,1185,5,151,0,0,1184,1183,1,0,0,0,1184,1185,1,0,0,0,1185,1186,
  	1,0,0,0,1186,1188,3,38,19,0,1187,1184,1,0,0,0,1187,1188,1,0,0,0,1188,
  	1193,1,0,0,0,1189,1191,5,151,0,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,
  	1191,1192,1,0,0,0,1192,1194,3,152,76,0,1193,1190,1,0,0,0,1193,1194,1,
  	0,0,0,1194,111,1,0,0,0,1195,1196,5,51,0,0,1196,1197,5,151,0,0,1197,1202,
  	3,254,127,0,1198,1200,5,151,0,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,
  	1201,1,0,0,0,1201,1203,3,152,76,0,1202,1199,1,0,0,0,1202,1203,1,0,0,0,
  	1203,113,1,0,0,0,1204,1205,5,91,0,0,1205,1207,5,151,0,0,1206,1204,1,0,
  	0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1210,5,92,0,0,1209,1211,
  	5,151,0,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1212,1,0,0,0,1212,
  	1217,3,154,77,0,1213,1215,5,151,0,0,1214,1213,1,0,0,0,1214,1215,1,0,0,
  	0,1215,1216,1,0,0,0,1216,1218,3,116,58,0,1217,1214,1,0,0,0,1217,1218,
  	1,0,0,0,1218,1220,1,0,0,0,1219,1221,5,151,0,0,1220,1219,1,0,0,0,1220,
  	1221,1,0,0,0,1221,1226,1,0,0,0,1222,1224,5,151,0,0,1223,1222,1,0,0,0,
  	1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1227,3,152,76,0,1226,1223,1,
  	0,0,0,1226,1227,1,0,0,0,1227,115,1,0,0,0,1228,1230,5,9,0,0,1229,1231,
  	5,151,0,0,1230,1229,1,0,0,0,1230,1231,1,0,0,0,1231,1232,1,0,0,0,1232,
  	1243,3,118,59,0,1233,1235,5,151,0,0,1234,1233,1,0,0,0,1234,1235,1,0,0,
  	0,1235,1236,1,0,0,0,1236,1238,5,3,0,0,1237,1239,5,151,0,0,1238,1237,1,
  	0,0,0,1238,1239,1,0,0,0,1239,1240,1,0,0,0,1240,1242,3,118,59,0,1241,1234,
  	1,0,0,0,1242,1245,1,0,0,0,1243,1241,1,0,0,0,1243,1244,1,0,0,0,1244,1247,
  	1,0,0,0,1245,1243,1,0,0,0,1246,1248,5,151,0,0,1247,1246,1,0,0,0,1247,
  	1248,1,0,0,0,1248,1249,1,0,0,0,1249,1250,5,9,0,0,1250,117,1,0,0,0,1251,
  	1253,5,2,0,0,1252,1254,5,151,0,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,
  	1254,1255,1,0,0,0,1255,1266,3,288,144,0,1256,1258,5,151,0,0,1257,1256,
  	1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1261,5,3,0,0,1260,1262,
  	5,151,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,
  	1265,3,288,144,0,1264,1257,1,0,0,0,1265,1268,1,0,0,0,1266,1264,1,0,0,
  	0,1266,1267,1,0,0,0,1267,1270,1,0,0,0,1268,1266,1,0,0,0,1269,1271,5,151,
  	0,0,1270,1269,1,0,0,0,1270,1271,1,0,0,0,1271,1272,1,0,0,0,1272,1273,5,
  	4,0,0,1273,1276,1,0,0,0,1274,1276,3,288,144,0,1275,1251,1,0,0,0,1275,
  	1274,1,0,0,0,1276,119,1,0,0,0,1277,1279,5,93,0,0,1278,1280,5,151,0,0,
  	1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,0,0,1281,1282,3,192,
  	96,0,1282,1283,5,151,0,0,1283,1284,5,104,0,0,1284,1285,5,151,0,0,1285,
  	1286,3,272,136,0,1286,121,1,0,0,0,1287,1289,5,94,0,0,1288,1290,5,151,
  	0,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,1291,1,0,0,0,1291,1292,3,
  	154,77,0,1292,123,1,0,0,0,1293,1295,5,95,0,0,1294,1296,5,151,0,0,1295,
  	1294,1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,0,0,1297,1302,3,154,77,0,
  	1298,1299,5,151,0,0,1299,1301,3,126,63,0,1300,1298,1,0,0,0,1301,1304,
  	1,0,0,0,1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,125,1,0,0,0,1304,1302,
  	1,0,0,0,1305,1306,5,96,0,0,1306,1307,5,151,0,0,1307,1308,5,92,0,0,1308,
  	1309,5,151,0,0,1309,1316,3,128,64,0,1310,1311,5,96,0,0,1311,1312,5,151,
  	0,0,1312,1313,5,94,0,0,1313,1314,5,151,0,0,1314,1316,3,128,64,0,1315,
  	1305,1,0,0,0,1315,1310,1,0,0,0,1316,127,1,0,0,0,1317,1319,5,97,0,0,1318,
  	1320,5,151,0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,
  	1321,1332,3,130,65,0,1322,1324,5,151,0,0,1323,1322,1,0,0,0,1323,1324,
  	1,0,0,0,1324,1325,1,0,0,0,1325,1327,5,3,0,0,1326,1328,5,151,0,0,1327,
  	1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,1331,3,130,65,0,
  	1330,1323,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,0,1332,1333,1,0,0,
  	0,1333,129,1,0,0,0,1334,1332,1,0,0,0,1335,1337,3,278,139,0,1336,1338,
  	5,151,0,0,1337,1336,1,0,0,0,1337,1338,1,0,0,0,1338,1339,1,0,0,0,1339,
  	1341,5,6,0,0,1340,1342,5,151,0,0,1341,1340,1,0,0,0,1341,1342,1,0,0,0,
  	1342,1343,1,0,0,0,1343,1344,3,192,96,0,1344,131,1,0,0,0,1345,1346,5,98,
  	0,0,1346,1348,5,151,0,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,1349,
  	1,0,0,0,1349,1351,5,99,0,0,1350,1352,5,151,0,0,1351,1350,1,0,0,0,1351,
  	1352,1,0,0,0,1352,1353,1,0,0,0,1353,1364,3,192,96,0,1354,1356,5,151,0,
  	0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,1357,1,0,0,0,1357,1359,5,3,
  	0,0,1358,1360,5,151,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1361,
  	1,0,0,0,1361,1363,3,192,96,0,1362,1355,1,0,0,0,1363,1366,1,0,0,0,1364,
  	1362,1,0,0,0,1364,1365,1,0,0,0,1365,133,1,0,0,0,1366,1364,1,0,0,0,1367,
  	1368,5,100,0,0,1368,1373,3,138,69,0,1369,1371,5,151,0,0,1370,1369,1,0,
  	0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,1372,1374,3,152,76,0,1373,1370,
  	1,0,0,0,1373,1374,1,0,0,0,1374,135,1,0,0,0,1375,1376,5,101,0,0,1376,1377,
  	3,138,69,0,1377,137,1,0,0,0,1378,1380,5,151,0,0,1379,1378,1,0,0,0,1379,
  	1380,1,0,0,0,1380,1381,1,0,0,0,1381,1383,5,102,0,0,1382,1379,1,0,0,0,
  	1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1385,5,151,0,0,1385,1388,3,140,
  	70,0,1386,1387,5,151,0,0,1387,1389,3,144,72,0,1388,1386,1,0,0,0,1388,
  	1389,1,0,0,0,1389,1392,1,0,0,0,1390,1391,5,151,0,0,1391,1393,3,146,73,
  	0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1396,1,0,0,0,1394,1395,5,151,
  	0,0,1395,1397,3,148,74,0,1396,1394,1,0,0,0,1396,1397,1,0,0,0,1397,139,
  	1,0,0,0,1398,1409,5,103,0,0,1399,1401,5,151,0,0,1400,1399,1,0,0,0,1400,
  	1401,1,0,0,0,1401,1402,1,0,0,0,1402,1404,5,3,0,0,1403,1405,5,151,0,0,
  	1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1406,1,0,0,0,1406,1408,3,142,
  	71,0,1407,1400,1,0,0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1409,1410,
  	1,0,0,0,1410,1427,1,0,0,0,1411,1409,1,0,0,0,1412,1423,3,142,71,0,1413,
  	1415,5,151,0,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,
  	1416,1418,5,3,0,0,1417,1419,5,151,0,0,1418,1417,1,0,0,0,1418,1419,1,0,
  	0,0,1419,1420,1,0,0,0,1420,1422,3,142,71,0,1421,1414,1,0,0,0,1422,1425,
  	1,0,0,0,1423,1421,1,0,0,0,1423,1424,1,0,0,0,1424,1427,1,0,0,0,1425,1423,
  	1,0,0,0,1426,1398,1,0,0,0,1426,1412,1,0,0,0,1427,141,1,0,0,0,1428,1429,
  	3,192,96,0,1429,1430,5,151,0,0,1430,1431,5,104,0,0,1431,1432,5,151,0,
  	0,1432,1433,3,272,136,0,1433,1436,1,0,0,0,1434,1436,3,192,96,0,1435,1428,
  	1,0,0,0,1435,1434,1,0,0,0,1436,143,1,0,0,0,1437,1438,5,105,0,0,1438,1439,
  	5,151,0,0,1439,1440,5,106,0,0,1440,1441,5,151,0,0,1441,1449,3,150,75,
  	0,1442,1444,5,3,0,0,1443,1445,5,151,0,0,1444,1443,1,0,0,0,1444,1445,1,
  	0,0,0,1445,1446,1,0,0,0,1446,1448,3,150,75,0,1447,1442,1,0,0,0,1448,1451,
  	1,0,0,0,1449,1447,1,0,0,0,1449,1450,1,0,0,0,1450,145,1,0,0,0,1451,1449,
  	1,0,0,0,1452,1453,5,107,0,0,1453,1454,5,151,0,0,1454,1455,3,192,96,0,
  	1455,147,1,0,0,0,1456,1457,5,108,0,0,1457,1458,5,151,0,0,1458,1459,3,
  	192,96,0,1459,149,1,0,0,0,1460,1465,3,192,96,0,1461,1463,5,151,0,0,1462,
  	1461,1,0,0,0,1462,1463,1,0,0,0,1463,1464,1,0,0,0,1464,1466,7,1,0,0,1465,
  	1462,1,0,0,0,1465,1466,1,0,0,0,1466,151,1,0,0,0,1467,1468,5,113,0,0,1468,
  	1469,5,151,0,0,1469,1470,3,192,96,0,1470,153,1,0,0,0,1471,1482,3,156,
  	78,0,1472,1474,5,151,0,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,1475,
  	1,0,0,0,1475,1477,5,3,0,0,1476,1478,5,151,0,0,1477,1476,1,0,0,0,1477,
  	1478,1,0,0,0,1478,1479,1,0,0,0,1479,1481,3,156,78,0,1480,1473,1,0,0,0,
  	1481,1484,1,0,0,0,1482,1480,1,0,0,0,1482,1483,1,0,0,0,1483,155,1,0,0,
  	0,1484,1482,1,0,0,0,1485,1487,3,272,136,0,1486,1488,5,151,0,0,1487,1486,
  	1,0,0,0,1487,1488,1,0,0,0,1488,1489,1,0,0,0,1489,1491,5,6,0,0,1490,1492,
  	5,151,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,
  	1494,3,158,79,0,1494,1497,1,0,0,0,1495,1497,3,158,79,0,1496,1485,1,0,
  	0,0,1496,1495,1,0,0,0,1497,157,1,0,0,0,1498,1499,3,160,80,0,1499,159,
  	1,0,0,0,1500,1507,3,162,81,0,1501,1503,5,151,0,0,1502,1501,1,0,0,0,1502,
  	1503,1,0,0,0,1503,1504,1,0,0,0,1504,1506,3,164,82,0,1505,1502,1,0,0,0,
  	1506,1509,1,0,0,0,1507,1505,1,0,0,0,1507,1508,1,0,0,0,1508,1515,1,0,0,
  	0,1509,1507,1,0,0,0,1510,1511,5,2,0,0,1511,1512,3,160,80,0,1512,1513,
  	5,4,0,0,1513,1515,1,0,0,0,1514,1500,1,0,0,0,1514,1510,1,0,0,0,1515,161,
  	1,0,0,0,1516,1518,5,2,0,0,1517,1519,5,151,0,0,1518,1517,1,0,0,0,1518,
  	1519,1,0,0,0,1519,1524,1,0,0,0,1520,1522,3,272,136,0,1521,1523,5,151,
  	0,0,1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,1525,1,0,0,0,1524,1520,1,
  	0,0,0,1524,1525,1,0,0,0,1525,1530,1,0,0,0,1526,1528,3,174,87,0,1527,1529,
  	5,151,0,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,1531,1,0,0,0,1530,
  	1526,1,0,0,0,1530,1531,1,0,0,0,1531,1536,1,0,0,0,1532,1534,3,170,85,0,
  	1533,1535,5,151,0,0,1534,1533,1,0,0,0,1534,1535,1,0,0,0,1535,1537,1,0,
  	0,0,1536,1532,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,1538,1539,5,
  	4,0,0,1539,163,1,0,0,0,1540,1542,3,166,83,0,1541,1543,5,151,0,0,1542,
  	1541,1,0,0,0,1542,1543,1,0,0,0,1543,1544,1,0,0,0,1544,1545,3,162,81,0,
  	1545,165,1,0,0,0,1546,1548,3,292,146,0,1547,1549,5,151,0,0,1548,1547,
  	1,0,0,0,1548,1549,1,0,0,0,1549,1550,1,0,0,0,1550,1552,3,296,148,0,1551,
  	1553,5,151,0,0,1552,1551,1,0,0,0,1552,1553,1,0,0,0,1553,1555,1,0,0,0,
  	1554,1556,3,168,84,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,1558,1,
  	0,0,0,1557,1559,5,151,0,0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,1560,
  	1,0,0,0,1560,1561,3,296,148,0,1561,1591,1,0,0,0,1562,1564,3,296,148,0,
  	1563,1565,5,151,0,0,1564,1563,1,0,0,0,1564,1565,1,0,0,0,1565,1567,1,0,
  	0,0,1566,1568,3,168,84,0,1567,1566,1,0,0,0,1567,1568,1,0,0,0,1568,1570,
  	1,0,0,0,1569,1571,5,151,0,0,1570,1569,1,0,0,0,1570,1571,1,0,0,0,1571,
  	1572,1,0,0,0,1572,1574,3,296,148,0,1573,1575,5,151,0,0,1574,1573,1,0,
  	0,0,1574,1575,1,0,0,0,1575,1576,1,0,0,0,1576,1577,3,294,147,0,1577,1591,
  	1,0,0,0,1578,1580,3,296,148,0,1579,1581,5,151,0,0,1580,1579,1,0,0,0,1580,
  	1581,1,0,0,0,1581,1583,1,0,0,0,1582,1584,3,168,84,0,1583,1582,1,0,0,0,
  	1583,1584,1,0,0,0,1584,1586,1,0,0,0,1585,1587,5,151,0,0,1586,1585,1,0,
  	0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,1589,3,296,148,0,1589,1591,
  	1,0,0,0,1590,1546,1,0,0,0,1590,1562,1,0,0,0,1590,1578,1,0,0,0,1591,167,
  	1,0,0,0,1592,1594,5,7,0,0,1593,1595,5,151,0,0,1594,1593,1,0,0,0,1594,
  	1595,1,0,0,0,1595,1600,1,0,0,0,1596,1598,3,272,136,0,1597,1599,5,151,
  	0,0,1598,1597,1,0,0,0,1598,1599,1,0,0,0,1599,1601,1,0,0,0,1600,1596,1,
  	0,0,0,1600,1601,1,0,0,0,1601,1606,1,0,0,0,1602,1604,3,172,86,0,1603,1605,
  	5,151,0,0,1604,1603,1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,
  	1602,1,0,0,0,1606,1607,1,0,0,0,1607,1612,1,0,0,0,1608,1610,3,176,88,0,
  	1609,1611,5,151,0,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1613,1,0,
  	0,0,1612,1608,1,0,0,0,1612,1613,1,0,0,0,1613,1618,1,0,0,0,1614,1616,3,
  	170,85,0,1615,1617,5,151,0,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,
  	1619,1,0,0,0,1618,1614,1,0,0,0,1618,1619,1,0,0,0,1619,1620,1,0,0,0,1620,
  	1621,5,8,0,0,1621,169,1,0,0,0,1622,1624,5,10,0,0,1623,1625,5,151,0,0,
  	1624,1623,1,0,0,0,1624,1625,1,0,0,0,1625,1659,1,0,0,0,1626,1628,3,280,
  	140,0,1627,1629,5,151,0,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1630,
  	1,0,0,0,1630,1632,5,121,0,0,1631,1633,5,151,0,0,1632,1631,1,0,0,0,1632,
  	1633,1,0,0,0,1633,1634,1,0,0,0,1634,1636,3,192,96,0,1635,1637,5,151,0,
  	0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1656,1,0,0,0,1638,1640,5,3,
  	0,0,1639,1641,5,151,0,0,1640,1639,1,0,0,0,1640,1641,1,0,0,0,1641,1642,
  	1,0,0,0,1642,1644,3,280,140,0,1643,1645,5,151,0,0,1644,1643,1,0,0,0,1644,
  	1645,1,0,0,0,1645,1646,1,0,0,0,1646,1648,5,121,0,0,1647,1649,5,151,0,
  	0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1650,1,0,0,0,1650,1652,3,192,
  	96,0,1651,1653,5,151,0,0,1652,1651,1,0,0,0,1652,1653,1,0,0,0,1653,1655,
  	1,0,0,0,1654,1638,1,0,0,0,1655,1658,1,0,0,0,1656,1654,1,0,0,0,1656,1657,
  	1,0,0,0,1657,1660,1,0,0,0,1658,1656,1,0,0,0,1659,1626,1,0,0,0,1659,1660,
  	1,0,0,0,1660,1661,1,0,0,0,1661,1662,5,11,0,0,1662,171,1,0,0,0,1663,1665,
  	5,121,0,0,1664,1666,5,151,0,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,
  	1667,1,0,0,0,1667,1681,3,190,95,0,1668,1670,5,151,0,0,1669,1668,1,0,0,
  	0,1669,1670,1,0,0,0,1670,1671,1,0,0,0,1671,1673,5,12,0,0,1672,1674,5,
  	121,0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1676,1,0,0,0,1675,1677,
  	5,151,0,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,1678,1,0,0,0,1678,
  	1680,3,190,95,0,1679,1669,1,0,0,0,1680,1683,1,0,0,0,1681,1679,1,0,0,0,
  	1681,1682,1,0,0,0,1682,173,1,0,0,0,1683,1681,1,0,0,0,1684,1686,5,121,
  	0,0,1685,1687,5,151,0,0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,1688,
  	1,0,0,0,1688,1704,3,188,94,0,1689,1691,5,151,0,0,1690,1689,1,0,0,0,1690,
  	1691,1,0,0,0,1691,1693,1,0,0,0,1692,1694,5,12,0,0,1693,1692,1,0,0,0,1693,
  	1694,1,0,0,0,1694,1696,1,0,0,0,1695,1697,5,121,0,0,1696,1695,1,0,0,0,
  	1696,1697,1,0,0,0,1697,1699,1,0,0,0,1698,1700,5,151,0,0,1699,1698,1,0,
  	0,0,1699,1700,1,0,0,0,1700,1701,1,0,0,0,1701,1703,3,188,94,0,1702,1690,
  	1,0,0,0,1703,1706,1,0,0,0,1704,1702,1,0,0,0,1704,1705,1,0,0,0,1705,175,
  	1,0,0,0,1706,1704,1,0,0,0,1707,1709,5,103,0,0,1708,1710,5,151,0,0,1709,
  	1708,1,0,0,0,1709,1710,1,0,0,0,1710,1715,1,0,0,0,1711,1716,5,114,0,0,
  	1712,1713,5,88,0,0,1713,1714,5,151,0,0,1714,1716,5,114,0,0,1715,1711,
  	1,0,0,0,1715,1712,1,0,0,0,1715,1716,1,0,0,0,1716,1718,1,0,0,0,1717,1719,
  	5,151,0,0,1718,1717,1,0,0,0,1718,1719,1,0,0,0,1719,1734,1,0,0,0,1720,
  	1722,3,184,92,0,1721,1720,1,0,0,0,1721,1722,1,0,0,0,1722,1724,1,0,0,0,
  	1723,1725,5,151,0,0,1724,1723,1,0,0,0,1724,1725,1,0,0,0,1725,1726,1,0,
  	0,0,1726,1728,5,13,0,0,1727,1729,5,151,0,0,1728,1727,1,0,0,0,1728,1729,
  	1,0,0,0,1729,1731,1,0,0,0,1730,1732,3,186,93,0,1731,1730,1,0,0,0,1731,
  	1732,1,0,0,0,1732,1735,1,0,0,0,1733,1735,3,282,141,0,1734,1721,1,0,0,
  	0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,1740,1,0,0,0,1736,1738,5,151,
  	0,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1739,1,0,0,0,1739,1741,3,
  	178,89,0,1740,1737,1,0,0,0,1740,1741,1,0,0,0,1741,177,1,0,0,0,1742,1744,
  	5,2,0,0,1743,1745,5,151,0,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,
  	1746,1,0,0,0,1746,1748,3,272,136,0,1747,1749,5,151,0,0,1748,1747,1,0,
  	0,0,1748,1749,1,0,0,0,1749,1750,1,0,0,0,1750,1752,5,3,0,0,1751,1753,5,
  	151,0,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,1754,1,0,0,0,1754,1763,
  	3,272,136,0,1755,1757,5,151,0,0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,
  	1758,1,0,0,0,1758,1760,5,12,0,0,1759,1761,5,151,0,0,1760,1759,1,0,0,0,
  	1760,1761,1,0,0,0,1761,1762,1,0,0,0,1762,1764,3,152,76,0,1763,1756,1,
  	0,0,0,1763,1764,1,0,0,0,1764,1784,1,0,0,0,1765,1767,5,151,0,0,1766,1765,
  	1,0,0,0,1766,1767,1,0,0,0,1767,1768,1,0,0,0,1768,1770,5,12,0,0,1769,1771,
  	5,151,0,0,1770,1769,1,0,0,0,1770,1771,1,0,0,0,1771,1772,1,0,0,0,1772,
  	1774,3,182,91,0,1773,1775,5,151,0,0,1774,1773,1,0,0,0,1774,1775,1,0,0,
  	0,1775,1776,1,0,0,0,1776,1778,5,3,0,0,1777,1779,5,151,0,0,1778,1777,1,
  	0,0,0,1778,1779,1,0,0,0,1779,1780,1,0,0,0,1780,1782,3,180,90,0,1781,1783,
  	5,151,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1785,1,0,0,0,1784,
  	1766,1,0,0,0,1784,1785,1,0,0,0,1785,1786,1,0,0,0,1786,1787,5,4,0,0,1787,
  	179,1,0,0,0,1788,1790,5,10,0,0,1789,1791,5,151,0,0,1790,1789,1,0,0,0,
  	1790,1791,1,0,0,0,1791,1793,1,0,0,0,1792,1794,3,140,70,0,1793,1792,1,
  	0,0,0,1793,1794,1,0,0,0,1794,1796,1,0,0,0,1795,1797,5,151,0,0,1796,1795,
  	1,0,0,0,1796,1797,1,0,0,0,1797,1798,1,0,0,0,1798,1799,5,11,0,0,1799,181,
  	1,0,0,0,1800,1802,5,10,0,0,1801,1803,5,151,0,0,1802,1801,1,0,0,0,1802,
  	1803,1,0,0,0,1803,1805,1,0,0,0,1804,1806,3,140,70,0,1805,1804,1,0,0,0,
  	1805,1806,1,0,0,0,1806,1808,1,0,0,0,1807,1809,5,151,0,0,1808,1807,1,0,
  	0,0,1808,1809,1,0,0,0,1809,1810,1,0,0,0,1810,1811,5,11,0,0,1811,183,1,
  	0,0,0,1812,1813,5,139,0,0,1813,185,1,0,0,0,1814,1815,5,139,0,0,1815,187,
  	1,0,0,0,1816,1817,3,286,143,0,1817,189,1,0,0,0,1818,1819,3,286,143,0,
  	1819,191,1,0,0,0,1820,1821,3,194,97,0,1821,193,1,0,0,0,1822,1829,3,196,
  	98,0,1823,1824,5,151,0,0,1824,1825,5,115,0,0,1825,1826,5,151,0,0,1826,
  	1828,3,196,98,0,1827,1823,1,0,0,0,1828,1831,1,0,0,0,1829,1827,1,0,0,0,
  	1829,1830,1,0,0,0,1830,195,1,0,0,0,1831,1829,1,0,0,0,1832,1839,3,198,
  	99,0,1833,1834,5,151,0,0,1834,1835,5,116,0,0,1835,1836,5,151,0,0,1836,
  	1838,3,198,99,0,1837,1833,1,0,0,0,1838,1841,1,0,0,0,1839,1837,1,0,0,0,
  	1839,1840,1,0,0,0,1840,197,1,0,0,0,1841,1839,1,0,0,0,1842,1849,3,200,
  	100,0,1843,1844,5,151,0,0,1844,1845,5,117,0,0,1845,1846,5,151,0,0,1846,
  	1848,3,200,100,0,1847,1843,1,0,0,0,1848,1851,1,0,0,0,1849,1847,1,0,0,
  	0,1849,1850,1,0,0,0,1850,199,1,0,0,0,1851,1849,1,0,0,0,1852,1854,5,118,
  	0,0,1853,1855,5,151,0,0,1854,1853,1,0,0,0,1854,1855,1,0,0,0,1855,1857,
  	1,0,0,0,1856,1852,1,0,0,0,1857,1860,1,0,0,0,1858,1856,1,0,0,0,1858,1859,
  	1,0,0,0,1859,1861,1,0,0,0,1860,1858,1,0,0,0,1861,1862,3,202,101,0,1862,
  	201,1,0,0,0,1863,1873,3,206,103,0,1864,1866,5,151,0,0,1865,1864,1,0,0,
  	0,1865,1866,1,0,0,0,1866,1867,1,0,0,0,1867,1869,3,204,102,0,1868,1870,
  	5,151,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,1871,1,0,0,0,1871,
  	1872,3,206,103,0,1872,1874,1,0,0,0,1873,1865,1,0,0,0,1873,1874,1,0,0,
  	0,1874,1900,1,0,0,0,1875,1877,3,206,103,0,1876,1878,5,151,0,0,1877,1876,
  	1,0,0,0,1877,1878,1,0,0,0,1878,1879,1,0,0,0,1879,1881,3,204,102,0,1880,
  	1882,5,151,0,0,1881,1880,1,0,0,0,1881,1882,1,0,0,0,1882,1883,1,0,0,0,
  	1883,1893,3,206,103,0,1884,1886,5,151,0,0,1885,1884,1,0,0,0,1885,1886,
  	1,0,0,0,1886,1887,1,0,0,0,1887,1889,3,204,102,0,1888,1890,5,151,0,0,1889,
  	1888,1,0,0,0,1889,1890,1,0,0,0,1890,1891,1,0,0,0,1891,1892,3,206,103,
  	0,1892,1894,1,0,0,0,1893,1885,1,0,0,0,1894,1895,1,0,0,0,1895,1893,1,0,
  	0,0,1895,1896,1,0,0,0,1896,1897,1,0,0,0,1897,1898,6,101,-1,0,1898,1900,
  	1,0,0,0,1899,1863,1,0,0,0,1899,1875,1,0,0,0,1900,203,1,0,0,0,1901,1902,
  	7,2,0,0,1902,205,1,0,0,0,1903,1914,3,208,104,0,1904,1906,5,151,0,0,1905,
  	1904,1,0,0,0,1905,1906,1,0,0,0,1906,1907,1,0,0,0,1907,1909,5,12,0,0,1908,
  	1910,5,151,0,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,
  	1911,1913,3,208,104,0,1912,1905,1,0,0,0,1913,1916,1,0,0,0,1914,1912,1,
  	0,0,0,1914,1915,1,0,0,0,1915,207,1,0,0,0,1916,1914,1,0,0,0,1917,1928,
  	3,210,105,0,1918,1920,5,151,0,0,1919,1918,1,0,0,0,1919,1920,1,0,0,0,1920,
  	1921,1,0,0,0,1921,1923,5,20,0,0,1922,1924,5,151,0,0,1923,1922,1,0,0,0,
  	1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,1927,3,210,105,0,1926,1919,1,
  	0,0,0,1927,1930,1,0,0,0,1928,1926,1,0,0,0,1928,1929,1,0,0,0,1929,209,
  	1,0,0,0,1930,1928,1,0,0,0,1931,1943,3,214,107,0,1932,1934,5,151,0,0,1933,
  	1932,1,0,0,0,1933,1934,1,0,0,0,1934,1935,1,0,0,0,1935,1937,3,212,106,
  	0,1936,1938,5,151,0,0,1937,1936,1,0,0,0,1937,1938,1,0,0,0,1938,1939,1,
  	0,0,0,1939,1940,3,214,107,0,1940,1942,1,0,0,0,1941,1933,1,0,0,0,1942,
  	1945,1,0,0,0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,1944,211,1,0,0,0,1945,
  	1943,1,0,0,0,1946,1947,7,3,0,0,1947,213,1,0,0,0,1948,1960,3,218,109,0,
  	1949,1951,5,151,0,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,1952,1,0,
  	0,0,1952,1954,3,216,108,0,1953,1955,5,151,0,0,1954,1953,1,0,0,0,1954,
  	1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,3,218,109,0,1957,1959,1,0,0,
  	0,1958,1950,1,0,0,0,1959,1962,1,0,0,0,1960,1958,1,0,0,0,1960,1961,1,0,
  	0,0,1961,215,1,0,0,0,1962,1960,1,0,0,0,1963,1964,7,4,0,0,1964,217,1,0,
  	0,0,1965,1977,3,222,111,0,1966,1968,5,151,0,0,1967,1966,1,0,0,0,1967,
  	1968,1,0,0,0,1968,1969,1,0,0,0,1969,1971,3,220,110,0,1970,1972,5,151,
  	0,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,1974,3,
  	222,111,0,1974,1976,1,0,0,0,1975,1967,1,0,0,0,1976,1979,1,0,0,0,1977,
  	1975,1,0,0,0,1977,1978,1,0,0,0,1978,219,1,0,0,0,1979,1977,1,0,0,0,1980,
  	1981,7,5,0,0,1981,221,1,0,0,0,1982,1993,3,224,112,0,1983,1985,5,151,0,
  	0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,1,0,0,0,1986,1988,5,26,
  	0,0,1987,1989,5,151,0,0,1988,1987,1,0,0,0,1988,1989,1,0,0,0,1989,1990,
  	1,0,0,0,1990,1992,3,224,112,0,1991,1984,1,0,0,0,1992,1995,1,0,0,0,1993,
  	1991,1,0,0,0,1993,1994,1,0,0,0,1994,223,1,0,0,0,1995,1993,1,0,0,0,1996,
  	1998,5,119,0,0,1997,1999,5,151,0,0,1998,1997,1,0,0,0,1998,1999,1,0,0,
  	0,1999,2001,1,0,0,0,2000,1996,1,0,0,0,2001,2004,1,0,0,0,2002,2000,1,0,
  	0,0,2002,2003,1,0,0,0,2003,2005,1,0,0,0,2004,2002,1,0,0,0,2005,2010,3,
  	226,113,0,2006,2008,5,151,0,0,2007,2006,1,0,0,0,2007,2008,1,0,0,0,2008,
  	2009,1,0,0,0,2009,2011,5,120,0,0,2010,2007,1,0,0,0,2010,2011,1,0,0,0,
  	2011,225,1,0,0,0,2012,2020,3,236,118,0,2013,2021,3,230,115,0,2014,2016,
  	3,228,114,0,2015,2014,1,0,0,0,2016,2017,1,0,0,0,2017,2015,1,0,0,0,2017,
  	2018,1,0,0,0,2018,2021,1,0,0,0,2019,2021,3,234,117,0,2020,2013,1,0,0,
  	0,2020,2015,1,0,0,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,2021,227,1,0,
  	0,0,2022,2023,5,151,0,0,2023,2025,5,122,0,0,2024,2026,5,151,0,0,2025,
  	2024,1,0,0,0,2025,2026,1,0,0,0,2026,2027,1,0,0,0,2027,2042,3,236,118,
  	0,2028,2029,5,7,0,0,2029,2030,3,192,96,0,2030,2031,5,8,0,0,2031,2042,
  	1,0,0,0,2032,2034,5,7,0,0,2033,2035,3,192,96,0,2034,2033,1,0,0,0,2034,
  	2035,1,0,0,0,2035,2036,1,0,0,0,2036,2038,5,121,0,0,2037,2039,3,192,96,
  	0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,2039,2040,1,0,0,0,2040,2042,5,8,
  	0,0,2041,2022,1,0,0,0,2041,2028,1,0,0,0,2041,2032,1,0,0,0,2042,229,1,
  	0,0,0,2043,2055,3,232,116,0,2044,2045,5,151,0,0,2045,2046,5,123,0,0,2046,
  	2047,5,151,0,0,2047,2055,5,100,0,0,2048,2049,5,151,0,0,2049,2050,5,124,
  	0,0,2050,2051,5,151,0,0,2051,2055,5,100,0,0,2052,2053,5,151,0,0,2053,
  	2055,5,125,0,0,2054,2043,1,0,0,0,2054,2044,1,0,0,0,2054,2048,1,0,0,0,
  	2054,2052,1,0,0,0,2055,2057,1,0,0,0,2056,2058,5,151,0,0,2057,2056,1,0,
  	0,0,2057,2058,1,0,0,0,2058,2059,1,0,0,0,2059,2060,3,236,118,0,2060,231,
  	1,0,0,0,2061,2063,5,151,0,0,2062,2061,1,0,0,0,2062,2063,1,0,0,0,2063,
  	2064,1,0,0,0,2064,2065,5,27,0,0,2065,233,1,0,0,0,2066,2067,5,151,0,0,
  	2067,2068,5,126,0,0,2068,2069,5,151,0,0,2069,2077,5,127,0,0,2070,2071,
  	5,151,0,0,2071,2072,5,126,0,0,2072,2073,5,151,0,0,2073,2074,5,118,0,0,
  	2074,2075,5,151,0,0,2075,2077,5,127,0,0,2076,2066,1,0,0,0,2076,2070,1,
  	0,0,0,2077,235,1,0,0,0,2078,2085,3,238,119,0,2079,2081,5,151,0,0,2080,
  	2079,1,0,0,0,2080,2081,1,0,0,0,2081,2082,1,0,0,0,2082,2084,3,266,133,
  	0,2083,2080,1,0,0,0,2084,2087,1,0,0,0,2085,2083,1,0,0,0,2085,2086,1,0,
  	0,0,2086,237,1,0,0,0,2087,2085,1,0,0,0,2088,2098,3,240,120,0,2089,2098,
  	3,276,138,0,2090,2098,3,268,134,0,2091,2098,3,252,126,0,2092,2098,3,254,
  	127,0,2093,2098,3,260,130,0,2094,2098,3,262,131,0,2095,2098,3,264,132,
  	0,2096,2098,3,272,136,0,2097,2088,1,0,0,0,2097,2089,1,0,0,0,2097,2090,
  	1,0,0,0,2097,2091,1,0,0,0,2097,2092,1,0,0,0,2097,2093,1,0,0,0,2097,2094,
  	1,0,0,0,2097,2095,1,0,0,0,2097,2096,1,0,0,0,2098,239,1,0,0,0,2099,2106,
  	3,274,137,0,2100,2106,5,137,0,0,2101,2106,3,242,121,0,2102,2106,5,127,
  	0,0,2103,2106,3,244,122,0,2104,2106,3,248,124,0,2105,2099,1,0,0,0,2105,
  	2100,1,0,0,0,2105,2101,1,0,0,0,2105,2102,1,0,0,0,2105,2103,1,0,0,0,2105,
  	2104,1,0,0,0,2106,241,1,0,0,0,2107,2108,7,6,0,0,2108,243,1,0,0,0,2109,
  	2111,5,7,0,0,2110,2112,5,151,0,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,
  	2112,2126,1,0,0,0,2113,2115,3,192,96,0,2114,2116,5,151,0,0,2115,2114,
  	1,0,0,0,2115,2116,1,0,0,0,2116,2123,1,0,0,0,2117,2119,3,246,123,0,2118,
  	2120,5,151,0,0,2119,2118,1,0,0,0,2119,2120,1,0,0,0,2120,2122,1,0,0,0,
  	2121,2117,1,0,0,0,2122,2125,1,0,0,0,2123,2121,1,0,0,0,2123,2124,1,0,0,
  	0,2124,2127,1,0,0,0,2125,2123,1,0,0,0,2126,2113,1,0,0,0,2126,2127,1,0,
  	0,0,2127,2128,1,0,0,0,2128,2129,5,8,0,0,2129,245,1,0,0,0,2130,2132,5,
  	3,0,0,2131,2133,5,151,0,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,2135,
  	1,0,0,0,2134,2136,3,192,96,0,2135,2134,1,0,0,0,2135,2136,1,0,0,0,2136,
  	247,1,0,0,0,2137,2139,5,10,0,0,2138,2140,5,151,0,0,2139,2138,1,0,0,0,
  	2139,2140,1,0,0,0,2140,2141,1,0,0,0,2141,2143,3,250,125,0,2142,2144,5,
  	151,0,0,2143,2142,1,0,0,0,2143,2144,1,0,0,0,2144,2155,1,0,0,0,2145,2147,
  	5,3,0,0,2146,2148,5,151,0,0,2147,2146,1,0,0,0,2147,2148,1,0,0,0,2148,
  	2149,1,0,0,0,2149,2151,3,250,125,0,2150,2152,5,151,0,0,2151,2150,1,0,
  	0,0,2151,2152,1,0,0,0,2152,2154,1,0,0,0,2153,2145,1,0,0,0,2154,2157,1,
  	0,0,0,2155,2153,1,0,0,0,2155,2156,1,0,0,0,2156,2158,1,0,0,0,2157,2155,
  	1,0,0,0,2158,2159,5,11,0,0,2159,249,1,0,0,0,2160,2163,3,288,144,0,2161,
  	2163,5,137,0,0,2162,2160,1,0,0,0,2162,2161,1,0,0,0,2163,2165,1,0,0,0,
  	2164,2166,5,151,0,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,
  	0,0,2167,2169,5,121,0,0,2168,2170,5,151,0,0,2169,2168,1,0,0,0,2169,2170,
  	1,0,0,0,2170,2171,1,0,0,0,2171,2172,3,192,96,0,2172,251,1,0,0,0,2173,
  	2175,5,2,0,0,2174,2176,5,151,0,0,2175,2174,1,0,0,0,2175,2176,1,0,0,0,
  	2176,2177,1,0,0,0,2177,2179,3,192,96,0,2178,2180,5,151,0,0,2179,2178,
  	1,0,0,0,2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,2182,5,4,0,0,2182,253,
  	1,0,0,0,2183,2185,5,130,0,0,2184,2186,5,151,0,0,2185,2184,1,0,0,0,2185,
  	2186,1,0,0,0,2186,2187,1,0,0,0,2187,2189,5,2,0,0,2188,2190,5,151,0,0,
  	2189,2188,1,0,0,0,2189,2190,1,0,0,0,2190,2191,1,0,0,0,2191,2193,5,103,
  	0,0,2192,2194,5,151,0,0,2193,2192,1,0,0,0,2193,2194,1,0,0,0,2194,2195,
  	1,0,0,0,2195,2232,5,4,0,0,2196,2198,3,256,128,0,2197,2199,5,151,0,0,2198,
  	2197,1,0,0,0,2198,2199,1,0,0,0,2199,2200,1,0,0,0,2200,2202,5,2,0,0,2201,
  	2203,5,151,0,0,2202,2201,1,0,0,0,2202,2203,1,0,0,0,2203,2208,1,0,0,0,
  	2204,2206,5,102,0,0,2205,2207,5,151,0,0,2206,2205,1,0,0,0,2206,2207,1,
  	0,0,0,2207,2209,1,0,0,0,2208,2204,1,0,0,0,2208,2209,1,0,0,0,2209,2227,
  	1,0,0,0,2210,2212,3,258,129,0,2211,2213,5,151,0,0,2212,2211,1,0,0,0,2212,
  	2213,1,0,0,0,2213,2224,1,0,0,0,2214,2216,5,3,0,0,2215,2217,5,151,0,0,
  	2216,2215,1,0,0,0,2216,2217,1,0,0,0,2217,2218,1,0,0,0,2218,2220,3,258,
  	129,0,2219,2221,5,151,0,0,2220,2219,1,0,0,0,2220,2221,1,0,0,0,2221,2223,
  	1,0,0,0,2222,2214,1,0,0,0,2223,2226,1,0,0,0,2224,2222,1,0,0,0,2224,2225,
  	1,0,0,0,2225,2228,1,0,0,0,2226,2224,1,0,0,0,2227,2210,1,0,0,0,2227,2228,
  	1,0,0,0,2228,2229,1,0,0,0,2229,2230,5,4,0,0,2230,2232,1,0,0,0,2231,2183,
  	1,0,0,0,2231,2196,1,0,0,0,2232,255,1,0,0,0,2233,2234,3,288,144,0,2234,
  	257,1,0,0,0,2235,2237,3,288,144,0,2236,2238,5,151,0,0,2237,2236,1,0,0,
  	0,2237,2238,1,0,0,0,2238,2239,1,0,0,0,2239,2240,5,121,0,0,2240,2242,5,
  	6,0,0,2241,2243,5,151,0,0,2242,2241,1,0,0,0,2242,2243,1,0,0,0,2243,2245,
  	1,0,0,0,2244,2235,1,0,0,0,2244,2245,1,0,0,0,2245,2246,1,0,0,0,2246,2247,
  	3,192,96,0,2247,259,1,0,0,0,2248,2253,3,162,81,0,2249,2251,5,151,0,0,
  	2250,2249,1,0,0,0,2250,2251,1,0,0,0,2251,2252,1,0,0,0,2252,2254,3,164,
  	82,0,2253,2250,1,0,0,0,2254,2255,1,0,0,0,2255,2253,1,0,0,0,2255,2256,
  	1,0,0,0,2256,261,1,0,0,0,2257,2259,5,131,0,0,2258,2260,5,151,0,0,2259,
  	2258,1,0,0,0,2259,2260,1,0,0,0,2260,2261,1,0,0,0,2261,2263,5,10,0,0,2262,
  	2264,5,151,0,0,2263,2262,1,0,0,0,2263,2264,1,0,0,0,2264,2265,1,0,0,0,
  	2265,2267,5,92,0,0,2266,2268,5,151,0,0,2267,2266,1,0,0,0,2267,2268,1,
  	0,0,0,2268,2269,1,0,0,0,2269,2274,3,154,77,0,2270,2272,5,151,0,0,2271,
  	2270,1,0,0,0,2271,2272,1,0,0,0,2272,2273,1,0,0,0,2273,2275,3,152,76,0,
  	2274,2271,1,0,0,0,2274,2275,1,0,0,0,2275,2277,1,0,0,0,2276,2278,5,151,
  	0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,2279,1,0,0,0,2279,2280,5,
  	11,0,0,2280,263,1,0,0,0,2281,2283,5,130,0,0,2282,2284,5,151,0,0,2283,
  	2282,1,0,0,0,2283,2284,1,0,0,0,2284,2285,1,0,0,0,2285,2287,5,10,0,0,2286,
  	2288,5,151,0,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,2288,2289,1,0,0,0,
  	2289,2291,5,92,0,0,2290,2292,5,151,0,0,2291,2290,1,0,0,0,2291,2292,1,
  	0,0,0,2292,2293,1,0,0,0,2293,2298,3,154,77,0,2294,2296,5,151,0,0,2295,
  	2294,1,0,0,0,2295,2296,1,0,0,0,2296,2297,1,0,0,0,2297,2299,3,152,76,0,
  	2298,2295,1,0,0,0,2298,2299,1,0,0,0,2299,2301,1,0,0,0,2300,2302,5,151,
  	0,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2303,1,0,0,0,2303,2304,5,
  	11,0,0,2304,265,1,0,0,0,2305,2307,5,5,0,0,2306,2308,5,151,0,0,2307,2306,
  	1,0,0,0,2307,2308,1,0,0,0,2308,2311,1,0,0,0,2309,2312,3,280,140,0,2310,
  	2312,5,103,0,0,2311,2309,1,0,0,0,2311,2310,1,0,0,0,2312,267,1,0,0,0,2313,
  	2318,5,132,0,0,2314,2316,5,151,0,0,2315,2314,1,0,0,0,2315,2316,1,0,0,
  	0,2316,2317,1,0,0,0,2317,2319,3,270,135,0,2318,2315,1,0,0,0,2319,2320,
  	1,0,0,0,2320,2318,1,0,0,0,2320,2321,1,0,0,0,2321,2336,1,0,0,0,2322,2324,
  	5,132,0,0,2323,2325,5,151,0,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,
  	2326,1,0,0,0,2326,2331,3,192,96,0,2327,2329,5,151,0,0,2328,2327,1,0,0,
  	0,2328,2329,1,0,0,0,2329,2330,1,0,0,0,2330,2332,3,270,135,0,2331,2328,
  	1,0,0,0,2332,2333,1,0,0,0,2333,2331,1,0,0,0,2333,2334,1,0,0,0,2334,2336,
  	1,0,0,0,2335,2313,1,0,0,0,2335,2322,1,0,0,0,2336,2345,1,0,0,0,2337,2339,
  	5,151,0,0,2338,2337,1,0,0,0,2338,2339,1,0,0,0,2339,2340,1,0,0,0,2340,
  	2342,5,133,0,0,2341,2343,5,151,0,0,2342,2341,1,0,0,0,2342,2343,1,0,0,
  	0,2343,2344,1,0,0,0,2344,2346,3,192,96,0,2345,2338,1,0,0,0,2345,2346,
  	1,0,0,0,2346,2348,1,0,0,0,2347,2349,5,151,0,0,2348,2347,1,0,0,0,2348,
  	2349,1,0,0,0,2349,2350,1,0,0,0,2350,2351,5,134,0,0,2351,269,1,0,0,0,2352,
  	2354,5,135,0,0,2353,2355,5,151,0,0,2354,2353,1,0,0,0,2354,2355,1,0,0,
  	0,2355,2356,1,0,0,0,2356,2358,3,192,96,0,2357,2359,5,151,0,0,2358,2357,
  	1,0,0,0,2358,2359,1,0,0,0,2359,2360,1,0,0,0,2360,2362,5,136,0,0,2361,
  	2363,5,151,0,0,2362,2361,1,0,0,0,2362,2363,1,0,0,0,2363,2364,1,0,0,0,
  	2364,2365,3,192,96,0,2365,271,1,0,0,0,2366,2367,3,288,144,0,2367,273,
  	1,0,0,0,2368,2371,3,284,142,0,2369,2371,3,282,141,0,2370,2368,1,0,0,0,
  	2370,2369,1,0,0,0,2371,275,1,0,0,0,2372,2375,5,28,0,0,2373,2376,3,288,
  	144,0,2374,2376,5,139,0,0,2375,2373,1,0,0,0,2375,2374,1,0,0,0,2376,277,
  	1,0,0,0,2377,2379,3,238,119,0,2378,2380,5,151,0,0,2379,2378,1,0,0,0,2379,
  	2380,1,0,0,0,2380,2381,1,0,0,0,2381,2382,3,266,133,0,2382,279,1,0,0,0,
  	2383,2384,3,286,143,0,2384,281,1,0,0,0,2385,2386,5,139,0,0,2386,283,1,
  	0,0,0,2387,2388,5,146,0,0,2388,285,1,0,0,0,2389,2390,3,288,144,0,2390,
  	287,1,0,0,0,2391,2397,5,147,0,0,2392,2393,5,150,0,0,2393,2397,6,144,-1,
  	0,2394,2397,5,140,0,0,2395,2397,3,290,145,0,2396,2391,1,0,0,0,2396,2392,
  	1,0,0,0,2396,2394,1,0,0,0,2396,2395,1,0,0,0,2397,289,1,0,0,0,2398,2399,
  	7,7,0,0,2399,291,1,0,0,0,2400,2401,7,8,0,0,2401,293,1,0,0,0,2402,2403,
  	7,9,0,0,2403,295,1,0,0,0,2404,2405,7,10,0,0,2405,297,1,0,0,0,418,300,
  	304,309,313,318,321,325,328,350,356,360,363,369,372,376,380,384,389,393,
  	400,404,412,416,426,430,434,439,452,456,464,467,475,478,495,498,502,508,
  	511,525,529,551,555,558,561,564,567,571,576,580,590,594,599,604,609,615,
  	619,623,628,635,639,643,646,650,654,658,663,667,673,677,689,693,697,701,
  	706,718,722,726,730,734,736,740,744,746,760,764,768,772,777,780,784,788,
  	790,794,798,800,836,847,869,873,878,889,893,897,905,909,913,919,923,927,
  	933,937,941,945,949,953,959,966,971,977,982,990,1009,1013,1021,1031,1036,
  	1041,1045,1050,1056,1061,1064,1068,1072,1076,1082,1086,1091,1096,1100,
  	1103,1107,1111,1115,1119,1123,1129,1133,1138,1142,1151,1157,1165,1169,
  	1173,1177,1184,1187,1190,1193,1199,1202,1206,1210,1214,1217,1220,1223,
  	1226,1230,1234,1238,1243,1247,1253,1257,1261,1266,1270,1275,1279,1289,
  	1295,1302,1315,1319,1323,1327,1332,1337,1341,1347,1351,1355,1359,1364,
  	1370,1373,1379,1382,1388,1392,1396,1400,1404,1409,1414,1418,1423,1426,
  	1435,1444,1449,1462,1465,1473,1477,1482,1487,1491,1496,1502,1507,1514,
  	1518,1522,1524,1528,1530,1534,1536,1542,1548,1552,1555,1558,1564,1567,
  	1570,1574,1580,1583,1586,1590,1594,1598,1600,1604,1606,1610,1612,1616,
  	1618,1624,1628,1632,1636,1640,1644,1648,1652,1656,1659,1665,1669,1673,
  	1676,1681,1686,1690,1693,1696,1699,1704,1709,1715,1718,1721,1724,1728,
  	1731,1734,1737,1740,1744,1748,1752,1756,1760,1763,1766,1770,1774,1778,
  	1782,1784,1790,1793,1796,1802,1805,1808,1829,1839,1849,1854,1858,1865,
  	1869,1873,1877,1881,1885,1889,1895,1899,1905,1909,1914,1919,1923,1928,
  	1933,1937,1943,1950,1954,1960,1967,1971,1977,1984,1988,1993,1998,2002,
  	2007,2010,2017,2020,2025,2034,2038,2041,2054,2057,2062,2076,2080,2085,
  	2097,2105,2111,2115,2119,2123,2126,2132,2135,2139,2143,2147,2151,2155,
  	2162,2165,2169,2175,2179,2185,2189,2193,2198,2202,2206,2208,2212,2216,
  	2220,2224,2227,2231,2237,2242,2244,2250,2255,2259,2263,2267,2271,2274,
  	2277,2283,2287,2291,2295,2298,2301,2307,2311,2315,2320,2324,2328,2333,
  	2335,2338,2342,2345,2348,2354,2358,2362,2370,2375,2379,2396
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(298);
    oC_Cypher();
    setState(309);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(300);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(299);
          match(CypherParser::SP);
        }
        setState(302);
        match(CypherParser::T__0);
        setState(304);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(303);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(306);
        oC_Cypher(); 
      }
      setState(311);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(313);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(312);
      match(CypherParser::SP);
    }
    setState(315);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(318);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(317);
      oC_AnyCypherOption();
      break;
    }

    default:
      break;
    }
    setState(321);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(320);
      match(CypherParser::SP);
    }

    setState(323);
    oC_Statement();
    setState(328);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(325);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(324);
        match(CypherParser::SP);
      }
      setState(327);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::OC_StatementContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::OC_StatementContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_DropTableContext* CypherParser::OC_StatementContext::kU_DropTable() {
  return getRuleContext<CypherParser::KU_DropTableContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(350);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(330);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(331);
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(332);
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(333);
      kU_CreateRelTableGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(334);
      kU_CreateRdfGraph();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(335);
      kU_DropTable();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(336);
      kU_AlterTable();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(337);
      kU_CopyFrom();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(338);
      kU_CopyFromByColumn();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(339);
      kU_CopyTO();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(340);
      kU_StandaloneCall();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(341);
      kU_CreateMacro();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(342);
      kU_CommentOn();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(343);
      kU_Transaction();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(344);
      kU_Extension();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(345);
      kU_ExportDatabase();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(346);
      kU_ImportDatabase();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(347);
      kU_AttachDatabase();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(348);
      kU_DetachDatabase();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(349);
      kU_UseDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(352);
    match(CypherParser::COPY);
    setState(353);
    match(CypherParser::SP);
    setState(354);
    oC_SchemaName();
    setState(363);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(356);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(355);
        match(CypherParser::SP);
      }
      setState(358);
      kU_ColumnNames();
      setState(360);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(359);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(362);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(365);
    match(CypherParser::FROM);
    setState(366);
    match(CypherParser::SP);
    setState(367);
    kU_ScanSource();
    setState(372);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(369);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(368);
        match(CypherParser::SP);
      }
      setState(371);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(374);
    match(CypherParser::T__1);
    setState(376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(375);
      match(CypherParser::SP);
    }
    setState(378);
    oC_SchemaName();
    setState(389);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(380);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(379);
          match(CypherParser::SP);
        }
        setState(382);
        match(CypherParser::T__2);
        setState(384);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(383);
          match(CypherParser::SP);
        }
        setState(386);
        oC_SchemaName(); 
      }
      setState(391);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(393);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(392);
      match(CypherParser::SP);
    }
    setState(395);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(416);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(397);
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(398);
      match(CypherParser::T__1);
      setState(400);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(399);
        match(CypherParser::SP);
      }
      setState(402);
      oC_Query();
      setState(404);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(403);
        match(CypherParser::SP);
      }
      setState(406);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(408);
      oC_Variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(409);
      oC_Variable();
      setState(410);
      match(CypherParser::T__4);
      setState(412);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(411);
        match(CypherParser::SP);
      }
      setState(414);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(418);
    match(CypherParser::COPY);
    setState(419);
    match(CypherParser::SP);
    setState(420);
    oC_SchemaName();
    setState(421);
    match(CypherParser::SP);
    setState(422);
    match(CypherParser::FROM);
    setState(423);
    match(CypherParser::SP);
    setState(424);
    match(CypherParser::T__1);
    setState(426);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(425);
      match(CypherParser::SP);
    }
    setState(428);
    match(CypherParser::StringLiteral);
    setState(439);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(430);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(429);
        match(CypherParser::SP);
      }
      setState(432);
      match(CypherParser::T__2);
      setState(434);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(433);
        match(CypherParser::SP);
      }
      setState(436);
      match(CypherParser::StringLiteral);
      setState(441);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(442);
    match(CypherParser::T__3);
    setState(443);
    match(CypherParser::SP);
    setState(444);
    match(CypherParser::BY);
    setState(445);
    match(CypherParser::SP);
    setState(446);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(448);
    match(CypherParser::COPY);
    setState(449);
    match(CypherParser::SP);
    setState(450);
    match(CypherParser::T__1);
    setState(452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(451);
      match(CypherParser::SP);
    }
    setState(454);
    oC_Query();
    setState(456);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(455);
      match(CypherParser::SP);
    }
    setState(458);
    match(CypherParser::T__3);
    setState(459);
    match(CypherParser::SP);
    setState(460);
    match(CypherParser::TO);
    setState(461);
    match(CypherParser::SP);
    setState(462);
    match(CypherParser::StringLiteral);
    setState(467);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(464);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(463);
        match(CypherParser::SP);
      }
      setState(466);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_ExportDatabaseContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(469);
    match(CypherParser::EXPORT);
    setState(470);
    match(CypherParser::SP);
    setState(471);
    match(CypherParser::DATABASE);
    setState(472);
    match(CypherParser::SP);
    setState(473);
    match(CypherParser::StringLiteral);
    setState(478);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(474);
        match(CypherParser::SP);
      }
      setState(477);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(480);
    match(CypherParser::IMPORT);
    setState(481);
    match(CypherParser::SP);
    setState(482);
    match(CypherParser::DATABASE);
    setState(483);
    match(CypherParser::SP);
    setState(484);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(486);
    match(CypherParser::ATTACH);
    setState(487);
    match(CypherParser::SP);
    setState(488);
    match(CypherParser::StringLiteral);
    setState(495);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(489);
      match(CypherParser::SP);
      setState(490);
      match(CypherParser::AS);
      setState(491);
      match(CypherParser::SP);
      setState(492);
      oC_SchemaName();
      setState(493);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(511);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(498);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(497);
        match(CypherParser::SP);
      }
      setState(500);
      match(CypherParser::T__1);
      setState(502);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(501);
        match(CypherParser::SP);
      }
      setState(504);
      match(CypherParser::DBTYPE);
      setState(505);
      match(CypherParser::SP);
      setState(506);
      match(CypherParser::StringLiteral);
      setState(508);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(507);
        match(CypherParser::SP);
      }
      setState(510);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(513);
    match(CypherParser::DETACH);
    setState(514);
    match(CypherParser::SP);
    setState(515);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(517);
    match(CypherParser::USE);
    setState(518);
    match(CypherParser::SP);
    setState(519);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(521);
    match(CypherParser::CALL);
    setState(522);
    match(CypherParser::SP);
    setState(523);
    oC_SymbolicName();
    setState(525);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(524);
      match(CypherParser::SP);
    }
    setState(527);
    match(CypherParser::T__5);
    setState(529);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(528);
      match(CypherParser::SP);
    }
    setState(531);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(533);
    match(CypherParser::COMMENT_);
    setState(534);
    match(CypherParser::SP);
    setState(535);
    match(CypherParser::ON);
    setState(536);
    match(CypherParser::SP);
    setState(537);
    match(CypherParser::TABLE);
    setState(538);
    match(CypherParser::SP);
    setState(539);
    oC_SchemaName();
    setState(540);
    match(CypherParser::SP);
    setState(541);
    match(CypherParser::IS);
    setState(542);
    match(CypherParser::SP);
    setState(543);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(545);
    match(CypherParser::CREATE);
    setState(546);
    match(CypherParser::SP);
    setState(547);
    match(CypherParser::MACRO);
    setState(548);
    match(CypherParser::SP);
    setState(549);
    oC_FunctionName();
    setState(551);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(550);
      match(CypherParser::SP);
    }
    setState(553);
    match(CypherParser::T__1);
    setState(555);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(554);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(558);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(557);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(561);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(560);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(564);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 71307013) != 0) || ((((_la - 122) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 122)) & 302256385) != 0)) {
      setState(563);
      kU_DefaultArg();
    }
    setState(576);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(567);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(566);
          match(CypherParser::SP);
        }
        setState(569);
        match(CypherParser::T__2);
        setState(571);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(570);
          match(CypherParser::SP);
        }
        setState(573);
        kU_DefaultArg(); 
      }
      setState(578);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    }
    setState(580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(579);
      match(CypherParser::SP);
    }
    setState(582);
    match(CypherParser::T__3);
    setState(583);
    match(CypherParser::SP);
    setState(584);
    match(CypherParser::AS);
    setState(585);
    match(CypherParser::SP);
    setState(586);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(588);
    oC_SymbolicName();
    setState(599);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(590);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(589);
          match(CypherParser::SP);
        }
        setState(592);
        match(CypherParser::T__2);
        setState(594);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(593);
          match(CypherParser::SP);
        }
        setState(596);
        oC_SymbolicName(); 
      }
      setState(601);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    oC_SymbolicName();
    setState(604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(603);
      match(CypherParser::SP);
    }
    setState(606);
    match(CypherParser::COLON);
    setState(607);
    match(CypherParser::T__5);
    setState(609);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(608);
      match(CypherParser::SP);
    }
    setState(611);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(646);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(613);
        match(CypherParser::T__6);
        setState(615);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(614);
          match(CypherParser::SP);
        }
        setState(617);
        match(CypherParser::StringLiteral);
        setState(628);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
          setState(619);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(618);
            match(CypherParser::SP);
          }
          setState(621);
          match(CypherParser::T__2);
          setState(623);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(622);
            match(CypherParser::SP);
          }
          setState(625);
          match(CypherParser::StringLiteral);
          setState(630);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(631);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(632);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(633);
        match(CypherParser::GLOB);
        setState(635);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(634);
          match(CypherParser::SP);
        }
        setState(637);
        match(CypherParser::T__1);
        setState(639);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(638);
          match(CypherParser::SP);
        }
        setState(641);
        match(CypherParser::StringLiteral);
        setState(643);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(642);
          match(CypherParser::SP);
        }
        setState(645);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ParsingOptionContext *> CypherParser::KU_ParsingOptionsContext::kU_ParsingOption() {
  return getRuleContexts<CypherParser::KU_ParsingOptionContext>();
}

CypherParser::KU_ParsingOptionContext* CypherParser::KU_ParsingOptionsContext::kU_ParsingOption(size_t i) {
  return getRuleContext<CypherParser::KU_ParsingOptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(648);
    match(CypherParser::T__1);
    setState(650);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(649);
      match(CypherParser::SP);
    }
    setState(652);
    kU_ParsingOption();
    setState(663);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(654);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(653);
          match(CypherParser::SP);
        }
        setState(656);
        match(CypherParser::T__2);
        setState(658);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(657);
          match(CypherParser::SP);
        }
        setState(660);
        kU_ParsingOption(); 
      }
      setState(665);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    }
    setState(667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(666);
      match(CypherParser::SP);
    }
    setState(669);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionContext::KU_ParsingOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_ParsingOptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_ParsingOptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOption;
}


CypherParser::KU_ParsingOptionContext* CypherParser::kU_ParsingOption() {
  KU_ParsingOptionContext *_localctx = _tracker.createInstance<KU_ParsingOptionContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_ParsingOption);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(671);
    oC_SymbolicName();
    setState(673);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(672);
      match(CypherParser::SP);
    }
    setState(675);
    match(CypherParser::T__5);
    setState(677);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(676);
      match(CypherParser::SP);
    }
    setState(679);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(681);
    match(CypherParser::CREATE);
    setState(682);
    match(CypherParser::SP);
    setState(683);
    match(CypherParser::NODE);
    setState(684);
    match(CypherParser::SP);
    setState(685);
    match(CypherParser::TABLE);
    setState(686);
    match(CypherParser::SP);
    setState(687);
    oC_SchemaName();
    setState(689);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(688);
      match(CypherParser::SP);
    }
    setState(691);
    match(CypherParser::T__1);
    setState(693);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(692);
      match(CypherParser::SP);
    }
    setState(695);
    kU_PropertyDefinitions();
    setState(697);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(696);
      match(CypherParser::SP);
    }

    setState(699);
    match(CypherParser::T__2);
    setState(701);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(700);
      match(CypherParser::SP);
    }
    setState(703);
    kU_CreateNodeConstraint();
    setState(706);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(705);
      match(CypherParser::SP);
    }
    setState(708);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(710);
    match(CypherParser::CREATE);
    setState(711);
    match(CypherParser::SP);
    setState(712);
    match(CypherParser::REL);
    setState(713);
    match(CypherParser::SP);
    setState(714);
    match(CypherParser::TABLE);
    setState(715);
    match(CypherParser::SP);
    setState(716);
    oC_SchemaName();
    setState(718);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(717);
      match(CypherParser::SP);
    }
    setState(720);
    match(CypherParser::T__1);
    setState(722);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(721);
      match(CypherParser::SP);
    }
    setState(724);
    kU_RelTableConnection();
    setState(726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(725);
      match(CypherParser::SP);
    }
    setState(736);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      setState(728);
      match(CypherParser::T__2);
      setState(730);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(729);
        match(CypherParser::SP);
      }
      setState(732);
      kU_PropertyDefinitions();
      setState(734);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(733);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(746);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(738);
      match(CypherParser::T__2);
      setState(740);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(739);
        match(CypherParser::SP);
      }
      setState(742);
      oC_SymbolicName();
      setState(744);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(743);
        match(CypherParser::SP);
      }
    }
    setState(748);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(750);
    match(CypherParser::CREATE);
    setState(751);
    match(CypherParser::SP);
    setState(752);
    match(CypherParser::REL);
    setState(753);
    match(CypherParser::SP);
    setState(754);
    match(CypherParser::TABLE);
    setState(755);
    match(CypherParser::SP);
    setState(756);
    match(CypherParser::GROUP);
    setState(757);
    match(CypherParser::SP);
    setState(758);
    oC_SchemaName();
    setState(760);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(759);
      match(CypherParser::SP);
    }
    setState(762);
    match(CypherParser::T__1);
    setState(764);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(763);
      match(CypherParser::SP);
    }
    setState(766);
    kU_RelTableConnection();
    setState(768);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(767);
      match(CypherParser::SP);
    }
    setState(775); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(770);
              match(CypherParser::T__2);
              setState(772);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(771);
                match(CypherParser::SP);
              }
              setState(774);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(777); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(780);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(779);
      match(CypherParser::SP);
    }
    setState(790);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      setState(782);
      match(CypherParser::T__2);
      setState(784);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(783);
        match(CypherParser::SP);
      }
      setState(786);
      kU_PropertyDefinitions();
      setState(788);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(787);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(800);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(792);
      match(CypherParser::T__2);
      setState(794);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(793);
        match(CypherParser::SP);
      }
      setState(796);
      oC_SymbolicName();
      setState(798);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(797);
        match(CypherParser::SP);
      }
    }
    setState(802);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(804);
    match(CypherParser::FROM);
    setState(805);
    match(CypherParser::SP);
    setState(806);
    oC_SchemaName();
    setState(807);
    match(CypherParser::SP);
    setState(808);
    match(CypherParser::TO);
    setState(809);
    match(CypherParser::SP);
    setState(810);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(812);
    match(CypherParser::CREATE);
    setState(813);
    match(CypherParser::SP);
    setState(814);
    match(CypherParser::RDFGRAPH);
    setState(815);
    match(CypherParser::SP);
    setState(816);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropTableContext ------------------------------------------------------------------

CypherParser::KU_DropTableContext::KU_DropTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropTableContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}


size_t CypherParser::KU_DropTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropTable;
}


CypherParser::KU_DropTableContext* CypherParser::kU_DropTable() {
  KU_DropTableContext *_localctx = _tracker.createInstance<KU_DropTableContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_DropTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(818);
    match(CypherParser::DROP);
    setState(819);
    match(CypherParser::SP);
    setState(820);
    _la = _input->LA(1);
    if (!(_la == CypherParser::TABLE

    || _la == CypherParser::RDFGRAPH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(821);
    match(CypherParser::SP);
    setState(822);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(824);
    match(CypherParser::ALTER);
    setState(825);
    match(CypherParser::SP);
    setState(826);
    match(CypherParser::TABLE);
    setState(827);
    match(CypherParser::SP);
    setState(828);
    oC_SchemaName();
    setState(829);
    match(CypherParser::SP);
    setState(830);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(836);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(832);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(833);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(834);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(835);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_AddPropertyContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(838);
    match(CypherParser::ADD);
    setState(839);
    match(CypherParser::SP);
    setState(840);
    oC_PropertyKeyName();
    setState(841);
    match(CypherParser::SP);
    setState(842);
    kU_DataType(0);
    setState(847);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      setState(843);
      match(CypherParser::SP);
      setState(844);
      match(CypherParser::DEFAULT);
      setState(845);
      match(CypherParser::SP);
      setState(846);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(849);
    match(CypherParser::DROP);
    setState(850);
    match(CypherParser::SP);
    setState(851);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(853);
    match(CypherParser::RENAME);
    setState(854);
    match(CypherParser::SP);
    setState(855);
    match(CypherParser::TO);
    setState(856);
    match(CypherParser::SP);
    setState(857);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(859);
    match(CypherParser::RENAME);
    setState(860);
    match(CypherParser::SP);
    setState(861);
    oC_PropertyKeyName();
    setState(862);
    match(CypherParser::SP);
    setState(863);
    match(CypherParser::TO);
    setState(864);
    match(CypherParser::SP);
    setState(865);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(867);
    kU_PropertyDefinition();
    setState(878);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(869);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(868);
          match(CypherParser::SP);
        }
        setState(871);
        match(CypherParser::T__2);
        setState(873);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(872);
          match(CypherParser::SP);
        }
        setState(875);
        kU_PropertyDefinition(); 
      }
      setState(880);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(881);
    oC_PropertyKeyName();
    setState(882);
    match(CypherParser::SP);
    setState(883);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(885);
    match(CypherParser::PRIMARY);
    setState(886);
    match(CypherParser::SP);
    setState(887);
    match(CypherParser::KEY);
    setState(889);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(888);
      match(CypherParser::SP);
    }
    setState(891);
    match(CypherParser::T__1);
    setState(893);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(892);
      match(CypherParser::SP);
    }
    setState(895);
    oC_PropertyKeyName();
    setState(897);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(896);
      match(CypherParser::SP);
    }
    setState(899);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 72;
  enterRecursionRule(_localctx, 72, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(953);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(902);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(903);
      match(CypherParser::UNION);
      setState(905);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(904);
        match(CypherParser::SP);
      }
      setState(907);
      match(CypherParser::T__1);
      setState(909);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(908);
        match(CypherParser::SP);
      }
      setState(911);
      kU_PropertyDefinitions();
      setState(913);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(912);
        match(CypherParser::SP);
      }
      setState(915);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      setState(917);
      oC_SymbolicName();
      setState(919);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(918);
        match(CypherParser::SP);
      }
      setState(921);
      match(CypherParser::T__1);
      setState(923);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(922);
        match(CypherParser::SP);
      }
      setState(925);
      kU_PropertyDefinitions();
      setState(927);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(926);
        match(CypherParser::SP);
      }
      setState(929);
      match(CypherParser::T__3);
      break;
    }

    case 4: {
      setState(931);
      oC_SymbolicName();
      setState(933);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(932);
        match(CypherParser::SP);
      }
      setState(935);
      match(CypherParser::T__1);
      setState(937);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(936);
        match(CypherParser::SP);
      }
      setState(939);
      kU_DataType(0);
      setState(941);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(940);
        match(CypherParser::SP);
      }
      setState(943);
      match(CypherParser::T__2);
      setState(945);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(944);
        match(CypherParser::SP);
      }
      setState(947);
      kU_DataType(0);
      setState(949);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(948);
        match(CypherParser::SP);
      }
      setState(951);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(959);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(955);

        if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
        setState(956);
        kU_ListIdentifiers(); 
      }
      setState(961);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(962);
    kU_ListIdentifier();
    setState(966);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(963);
        kU_ListIdentifier(); 
      }
      setState(968);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(969);
    match(CypherParser::T__6);
    setState(971);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(970);
      oC_IntegerLiteral();
    }
    setState(973);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(977);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(975);
      oC_Explain();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(976);
      oC_Profile();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExplainContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExplainContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleOC_Explain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::SP) {
      setState(979);
      match(CypherParser::SP);
      setState(984);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(985);
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProfileContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProfileContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleOC_Profile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::SP) {
      setState(987);
      match(CypherParser::SP);
      setState(992);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(993);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1009);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(995);
      match(CypherParser::BEGIN);
      setState(996);
      match(CypherParser::SP);
      setState(997);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(998);
      match(CypherParser::BEGIN);
      setState(999);
      match(CypherParser::SP);
      setState(1000);
      match(CypherParser::TRANSACTION);
      setState(1001);
      match(CypherParser::SP);
      setState(1002);
      match(CypherParser::READ);
      setState(1003);
      match(CypherParser::SP);
      setState(1004);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1005);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1006);
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1007);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1008);
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1013);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(1011);
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(1012);
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1015);
    match(CypherParser::LOAD);
    setState(1016);
    match(CypherParser::SP);
    setState(1017);
    match(CypherParser::EXTENSION);
    setState(1018);
    match(CypherParser::SP);
    setState(1021);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1019);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1020);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1023);
    match(CypherParser::INSTALL);
    setState(1024);
    match(CypherParser::SP);
    setState(1025);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1027);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1050);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1029);
      oC_SingleQuery();
      setState(1036);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1031);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1030);
            match(CypherParser::SP);
          }
          setState(1033);
          oC_Union(); 
        }
        setState(1038);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1043); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1039);
                oC_Return();
                setState(1041);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1040);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1045); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1047);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1064);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1052);
      match(CypherParser::UNION);
      setState(1053);
      match(CypherParser::SP);
      setState(1054);
      match(CypherParser::ALL);
      setState(1056);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1055);
        match(CypherParser::SP);
      }
      setState(1058);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1059);
      match(CypherParser::UNION);
      setState(1061);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1060);
        match(CypherParser::SP);
      }
      setState(1063);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1068);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1066);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1067);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1115);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1076);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 7971459301377) != 0)) {
        setState(1070);
        oC_ReadingClause();
        setState(1072);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1071);
          match(CypherParser::SP);
        }
        setState(1078);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1079);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1086);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 7971459301377) != 0)) {
        setState(1080);
        oC_ReadingClause();
        setState(1082);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1081);
          match(CypherParser::SP);
        }
        setState(1088);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1089);
      oC_UpdatingClause();
      setState(1096);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1091);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1090);
            match(CypherParser::SP);
          }
          setState(1093);
          oC_UpdatingClause(); 
        }
        setState(1098);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
      }
      setState(1103);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
      case 1: {
        setState(1100);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1099);
          match(CypherParser::SP);
        }
        setState(1102);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1109); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1105);
        oC_ReadingClause();
        setState(1107);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
        case 1: {
          setState(1106);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1111); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 7971459301377) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1121); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1117);
              kU_QueryPart();
              setState(1119);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1118);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1123); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1125);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1133);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 7971459301377) != 0)) {
      setState(1127);
      oC_ReadingClause();
      setState(1129);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1128);
        match(CypherParser::SP);
      }
      setState(1135);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1142);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 94) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 94)) & 59) != 0)) {
      setState(1136);
      oC_UpdatingClause();
      setState(1138);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1137);
        match(CypherParser::SP);
      }
      setState(1144);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1145);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1151);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1147);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1148);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1149);
        oC_Set();
        break;
      }

      case CypherParser::DETACH:
      case CypherParser::DELETE: {
        enterOuterAlt(_localctx, 4);
        setState(1150);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1157);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(1153);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1154);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(1155);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1156);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1159);
    match(CypherParser::LOAD);
    setState(1177);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
    case 1: {
      setState(1160);
      match(CypherParser::SP);
      setState(1161);
      match(CypherParser::WITH);
      setState(1162);
      match(CypherParser::SP);
      setState(1163);
      match(CypherParser::HEADERS);
      setState(1165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1164);
        match(CypherParser::SP);
      }
      setState(1167);
      match(CypherParser::T__1);
      setState(1169);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1168);
        match(CypherParser::SP);
      }
      setState(1171);
      kU_PropertyDefinitions();
      setState(1173);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1172);
        match(CypherParser::SP);
      }
      setState(1175);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    setState(1179);
    match(CypherParser::SP);
    setState(1180);
    match(CypherParser::FROM);
    setState(1181);
    match(CypherParser::SP);
    setState(1182);
    kU_ScanSource();
    setState(1187);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      setState(1184);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1183);
        match(CypherParser::SP);
      }
      setState(1186);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
    setState(1193);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      setState(1190);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1189);
        match(CypherParser::SP);
      }
      setState(1192);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1195);
    match(CypherParser::CALL);
    setState(1196);
    match(CypherParser::SP);
    setState(1197);
    oC_FunctionInvocation();
    setState(1202);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      setState(1199);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1198);
        match(CypherParser::SP);
      }
      setState(1201);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_HintContext* CypherParser::OC_MatchContext::oC_Hint() {
  return getRuleContext<CypherParser::OC_HintContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1206);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1204);
      match(CypherParser::OPTIONAL);
      setState(1205);
      match(CypherParser::SP);
    }
    setState(1208);
    match(CypherParser::MATCH);
    setState(1210);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1209);
      match(CypherParser::SP);
    }
    setState(1212);
    oC_Pattern();
    setState(1217);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      setState(1214);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1213);
        match(CypherParser::SP);
      }
      setState(1216);
      oC_Hint();
      break;
    }

    default:
      break;
    }

    setState(1220);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      setState(1219);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1226);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      setState(1223);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1222);
        match(CypherParser::SP);
      }
      setState(1225);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_HintContext ------------------------------------------------------------------

CypherParser::OC_HintContext::OC_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_Hint_PartContext *> CypherParser::OC_HintContext::oC_Hint_Part() {
  return getRuleContexts<CypherParser::OC_Hint_PartContext>();
}

CypherParser::OC_Hint_PartContext* CypherParser::OC_HintContext::oC_Hint_Part(size_t i) {
  return getRuleContext<CypherParser::OC_Hint_PartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_HintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_HintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_HintContext::getRuleIndex() const {
  return CypherParser::RuleOC_Hint;
}


CypherParser::OC_HintContext* CypherParser::oC_Hint() {
  OC_HintContext *_localctx = _tracker.createInstance<OC_HintContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_Hint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1228);
    match(CypherParser::T__8);
    setState(1230);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1229);
      match(CypherParser::SP);
    }
    setState(1232);
    oC_Hint_Part();
    setState(1243);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1234);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1233);
          match(CypherParser::SP);
        }
        setState(1236);
        match(CypherParser::T__2);
        setState(1238);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1237);
          match(CypherParser::SP);
        }
        setState(1240);
        oC_Hint_Part(); 
      }
      setState(1245);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    }
    setState(1247);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1246);
      match(CypherParser::SP);
    }
    setState(1249);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_Hint_PartContext ------------------------------------------------------------------

CypherParser::OC_Hint_PartContext::OC_Hint_PartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::OC_Hint_PartContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_Hint_PartContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_Hint_PartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_Hint_PartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_Hint_PartContext::getRuleIndex() const {
  return CypherParser::RuleOC_Hint_Part;
}


CypherParser::OC_Hint_PartContext* CypherParser::oC_Hint_Part() {
  OC_Hint_PartContext *_localctx = _tracker.createInstance<OC_Hint_PartContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_Hint_Part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1275);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 1);
        setState(1251);
        match(CypherParser::T__1);
        setState(1253);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1252);
          match(CypherParser::SP);
        }
        setState(1255);
        oC_SymbolicName();
        setState(1266);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1257);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1256);
              match(CypherParser::SP);
            }
            setState(1259);
            match(CypherParser::T__2);
            setState(1261);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1260);
              match(CypherParser::SP);
            }
            setState(1263);
            oC_SymbolicName(); 
          }
          setState(1268);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
        }
        setState(1270);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1269);
          match(CypherParser::SP);
        }
        setState(1272);
        match(CypherParser::T__3);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1274);
        oC_SymbolicName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1277);
    match(CypherParser::UNWIND);
    setState(1279);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1278);
      match(CypherParser::SP);
    }
    setState(1281);
    oC_Expression();
    setState(1282);
    match(CypherParser::SP);
    setState(1283);
    match(CypherParser::AS);
    setState(1284);
    match(CypherParser::SP);
    setState(1285);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1287);
    match(CypherParser::CREATE);
    setState(1289);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1288);
      match(CypherParser::SP);
    }
    setState(1291);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1293);
    match(CypherParser::MERGE);
    setState(1295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1294);
      match(CypherParser::SP);
    }
    setState(1297);
    oC_Pattern();
    setState(1302);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1298);
        match(CypherParser::SP);
        setState(1299);
        oC_MergeAction(); 
      }
      setState(1304);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1315);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1305);
      match(CypherParser::ON);
      setState(1306);
      match(CypherParser::SP);
      setState(1307);
      match(CypherParser::MATCH);
      setState(1308);
      match(CypherParser::SP);
      setState(1309);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1310);
      match(CypherParser::ON);
      setState(1311);
      match(CypherParser::SP);
      setState(1312);
      match(CypherParser::CREATE);
      setState(1313);
      match(CypherParser::SP);
      setState(1314);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1317);
    match(CypherParser::SET);
    setState(1319);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1318);
      match(CypherParser::SP);
    }
    setState(1321);
    oC_SetItem();
    setState(1332);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1323);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1322);
          match(CypherParser::SP);
        }
        setState(1325);
        match(CypherParser::T__2);
        setState(1327);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1326);
          match(CypherParser::SP);
        }
        setState(1329);
        oC_SetItem(); 
      }
      setState(1334);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1335);
    oC_PropertyExpression();
    setState(1337);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1336);
      match(CypherParser::SP);
    }
    setState(1339);
    match(CypherParser::T__5);
    setState(1341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1340);
      match(CypherParser::SP);
    }
    setState(1343);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1345);
      match(CypherParser::DETACH);
      setState(1346);
      match(CypherParser::SP);
    }
    setState(1349);
    match(CypherParser::DELETE);
    setState(1351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1350);
      match(CypherParser::SP);
    }
    setState(1353);
    oC_Expression();
    setState(1364);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1355);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1354);
          match(CypherParser::SP);
        }
        setState(1357);
        match(CypherParser::T__2);
        setState(1359);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1358);
          match(CypherParser::SP);
        }
        setState(1361);
        oC_Expression(); 
      }
      setState(1366);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1367);
    match(CypherParser::WITH);
    setState(1368);
    oC_ProjectionBody();
    setState(1373);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      setState(1370);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1369);
        match(CypherParser::SP);
      }
      setState(1372);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1375);
    match(CypherParser::RETURN);
    setState(1376);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1382);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1379);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1378);
        match(CypherParser::SP);
      }
      setState(1381);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1384);
    match(CypherParser::SP);
    setState(1385);
    oC_ProjectionItems();
    setState(1388);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      setState(1386);
      match(CypherParser::SP);
      setState(1387);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1392);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      setState(1390);
      match(CypherParser::SP);
      setState(1391);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1396);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      setState(1394);
      match(CypherParser::SP);
      setState(1395);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1426);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1398);
        match(CypherParser::STAR);
        setState(1409);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1400);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1399);
              match(CypherParser::SP);
            }
            setState(1402);
            match(CypherParser::T__2);
            setState(1404);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1403);
              match(CypherParser::SP);
            }
            setState(1406);
            oC_ProjectionItem(); 
          }
          setState(1411);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__9:
      case CypherParser::T__27:
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::NOT:
      case CypherParser::MINUS:
      case CypherParser::IN:
      case CypherParser::NULL_:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::COUNT:
      case CypherParser::EXISTS:
      case CypherParser::CASE:
      case CypherParser::END:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1412);
        oC_ProjectionItem();
        setState(1423);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1414);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1413);
              match(CypherParser::SP);
            }
            setState(1416);
            match(CypherParser::T__2);
            setState(1418);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1417);
              match(CypherParser::SP);
            }
            setState(1420);
            oC_ProjectionItem(); 
          }
          setState(1425);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1435);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1428);
      oC_Expression();
      setState(1429);
      match(CypherParser::SP);
      setState(1430);
      match(CypherParser::AS);
      setState(1431);
      match(CypherParser::SP);
      setState(1432);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1434);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1437);
    match(CypherParser::ORDER);
    setState(1438);
    match(CypherParser::SP);
    setState(1439);
    match(CypherParser::BY);
    setState(1440);
    match(CypherParser::SP);
    setState(1441);
    oC_SortItem();
    setState(1449);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1442);
      match(CypherParser::T__2);
      setState(1444);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1443);
        match(CypherParser::SP);
      }
      setState(1446);
      oC_SortItem();
      setState(1451);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1452);
    match(CypherParser::L_SKIP);
    setState(1453);
    match(CypherParser::SP);
    setState(1454);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1456);
    match(CypherParser::LIMIT);
    setState(1457);
    match(CypherParser::SP);
    setState(1458);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1460);
    oC_Expression();
    setState(1465);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      setState(1462);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1461);
        match(CypherParser::SP);
      }
      setState(1464);
      _la = _input->LA(1);
      if (!(((((_la - 109) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 109)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1467);
    match(CypherParser::WHERE);
    setState(1468);
    match(CypherParser::SP);
    setState(1469);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1471);
    oC_PatternPart();
    setState(1482);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1473);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1472);
          match(CypherParser::SP);
        }
        setState(1475);
        match(CypherParser::T__2);
        setState(1477);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1476);
          match(CypherParser::SP);
        }
        setState(1479);
        oC_PatternPart(); 
      }
      setState(1484);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1496);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1485);
        oC_Variable();
        setState(1487);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1486);
          match(CypherParser::SP);
        }
        setState(1489);
        match(CypherParser::T__5);
        setState(1491);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1490);
          match(CypherParser::SP);
        }
        setState(1493);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1495);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1498);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1514);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1500);
      oC_NodePattern();
      setState(1507);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1502);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1501);
            match(CypherParser::SP);
          }
          setState(1504);
          oC_PatternElementChain(); 
        }
        setState(1509);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1510);
      match(CypherParser::T__1);
      setState(1511);
      oC_PatternElement();
      setState(1512);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1516);
    match(CypherParser::T__1);
    setState(1518);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1517);
      match(CypherParser::SP);
    }
    setState(1524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 71307013) != 0) || ((((_la - 122) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 122)) & 302256385) != 0)) {
      setState(1520);
      oC_Variable();
      setState(1522);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1521);
        match(CypherParser::SP);
      }
    }
    setState(1530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1526);
      oC_NodeLabels();
      setState(1528);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1527);
        match(CypherParser::SP);
      }
    }
    setState(1536);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__9) {
      setState(1532);
      kU_Properties();
      setState(1534);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1533);
        match(CypherParser::SP);
      }
    }
    setState(1538);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1540);
    oC_RelationshipPattern();
    setState(1542);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1541);
      match(CypherParser::SP);
    }
    setState(1544);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1590);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1546);
      oC_LeftArrowHead();
      setState(1548);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1547);
        match(CypherParser::SP);
      }
      setState(1550);
      oC_Dash();
      setState(1552);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
      case 1: {
        setState(1551);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1555);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1554);
        oC_RelationshipDetail();
      }
      setState(1558);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1557);
        match(CypherParser::SP);
      }
      setState(1560);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1562);
      oC_Dash();
      setState(1564);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
      case 1: {
        setState(1563);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1567);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1566);
        oC_RelationshipDetail();
      }
      setState(1570);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1569);
        match(CypherParser::SP);
      }
      setState(1572);
      oC_Dash();
      setState(1574);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1573);
        match(CypherParser::SP);
      }
      setState(1576);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1578);
      oC_Dash();
      setState(1580);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
      case 1: {
        setState(1579);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1583);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1582);
        oC_RelationshipDetail();
      }
      setState(1586);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1585);
        match(CypherParser::SP);
      }
      setState(1588);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1592);
    match(CypherParser::T__6);
    setState(1594);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1593);
      match(CypherParser::SP);
    }
    setState(1600);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 71307013) != 0) || ((((_la - 122) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 122)) & 302256385) != 0)) {
      setState(1596);
      oC_Variable();
      setState(1598);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1597);
        match(CypherParser::SP);
      }
    }
    setState(1606);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1602);
      oC_RelationshipTypes();
      setState(1604);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1603);
        match(CypherParser::SP);
      }
    }
    setState(1612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1608);
      oC_RangeLiteral();
      setState(1610);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1609);
        match(CypherParser::SP);
      }
    }
    setState(1618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__9) {
      setState(1614);
      kU_Properties();
      setState(1616);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1615);
        match(CypherParser::SP);
      }
    }
    setState(1620);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1622);
    match(CypherParser::T__9);
    setState(1624);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1623);
      match(CypherParser::SP);
    }
    setState(1659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 71307013) != 0) || ((((_la - 122) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 122)) & 302256385) != 0)) {
      setState(1626);
      oC_PropertyKeyName();
      setState(1628);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1627);
        match(CypherParser::SP);
      }
      setState(1630);
      match(CypherParser::COLON);
      setState(1632);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1631);
        match(CypherParser::SP);
      }
      setState(1634);
      oC_Expression();
      setState(1636);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1635);
        match(CypherParser::SP);
      }
      setState(1656);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1638);
        match(CypherParser::T__2);
        setState(1640);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1639);
          match(CypherParser::SP);
        }
        setState(1642);
        oC_PropertyKeyName();
        setState(1644);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1643);
          match(CypherParser::SP);
        }
        setState(1646);
        match(CypherParser::COLON);
        setState(1648);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1647);
          match(CypherParser::SP);
        }
        setState(1650);
        oC_Expression();
        setState(1652);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1651);
          match(CypherParser::SP);
        }
        setState(1658);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1661);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1663);
    match(CypherParser::COLON);
    setState(1665);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1664);
      match(CypherParser::SP);
    }
    setState(1667);
    oC_RelTypeName();
    setState(1681);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1669);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1668);
          match(CypherParser::SP);
        }
        setState(1671);
        match(CypherParser::T__11);
        setState(1673);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(1672);
          match(CypherParser::COLON);
        }
        setState(1676);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1675);
          match(CypherParser::SP);
        }
        setState(1678);
        oC_RelTypeName(); 
      }
      setState(1683);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_LabelNameContext *> CypherParser::OC_NodeLabelsContext::oC_LabelName() {
  return getRuleContexts<CypherParser::OC_LabelNameContext>();
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelsContext::oC_LabelName(size_t i) {
  return getRuleContext<CypherParser::OC_LabelNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1684);
    match(CypherParser::COLON);
    setState(1686);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1685);
      match(CypherParser::SP);
    }
    setState(1688);
    oC_LabelName();
    setState(1704);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1690);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx)) {
        case 1: {
          setState(1689);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1693);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::T__11) {
          setState(1692);
          match(CypherParser::T__11);
        }
        setState(1696);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(1695);
          match(CypherParser::COLON);
        }
        setState(1699);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1698);
          match(CypherParser::SP);
        }
        setState(1701);
        oC_LabelName(); 
      }
      setState(1706);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1707);
    match(CypherParser::STAR);
    setState(1709);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      setState(1708);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1715);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1711);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(1712);
        match(CypherParser::ALL);
        setState(1713);
        match(CypherParser::SP);
        setState(1714);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__9:
      case CypherParser::T__12:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(1718);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
    case 1: {
      setState(1717);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1734);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      setState(1721);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1720);
        oC_LowerBound();
      }
      setState(1724);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1723);
        match(CypherParser::SP);
      }
      setState(1726);
      match(CypherParser::T__12);
      setState(1728);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
      case 1: {
        setState(1727);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1731);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1730);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(1733);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(1740);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      setState(1737);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1736);
        match(CypherParser::SP);
      }
      setState(1739);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1742);
    match(CypherParser::T__1);
    setState(1744);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1743);
      match(CypherParser::SP);
    }
    setState(1746);
    oC_Variable();
    setState(1748);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1747);
      match(CypherParser::SP);
    }
    setState(1750);
    match(CypherParser::T__2);
    setState(1752);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1751);
      match(CypherParser::SP);
    }
    setState(1754);
    oC_Variable();
    setState(1763);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
    case 1: {
      setState(1756);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1755);
        match(CypherParser::SP);
      }
      setState(1758);
      match(CypherParser::T__11);
      setState(1760);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1759);
        match(CypherParser::SP);
      }
      setState(1762);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1784);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__11 || _la == CypherParser::SP) {
      setState(1766);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1765);
        match(CypherParser::SP);
      }
      setState(1768);
      match(CypherParser::T__11);
      setState(1770);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1769);
        match(CypherParser::SP);
      }
      setState(1772);
      kU_IntermediateRelProjectionItems();
      setState(1774);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1773);
        match(CypherParser::SP);
      }
      setState(1776);
      match(CypherParser::T__2);
      setState(1778);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1777);
        match(CypherParser::SP);
      }
      setState(1780);
      kU_IntermediateNodeProjectionItems();
      setState(1782);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1781);
        match(CypherParser::SP);
      }
    }
    setState(1786);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1788);
    match(CypherParser::T__9);
    setState(1790);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
    case 1: {
      setState(1789);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1793);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 6882837238908977169) != 0) || ((((_la - 137) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 137)) & 9741) != 0)) {
      setState(1792);
      oC_ProjectionItems();
    }
    setState(1796);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1795);
      match(CypherParser::SP);
    }
    setState(1798);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1800);
    match(CypherParser::T__9);
    setState(1802);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
    case 1: {
      setState(1801);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1805);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 6882837238908977169) != 0) || ((((_la - 137) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 137)) & 9741) != 0)) {
      setState(1804);
      oC_ProjectionItems();
    }
    setState(1808);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1807);
      match(CypherParser::SP);
    }
    setState(1810);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1812);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1814);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1816);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1818);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1820);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1822);
    oC_XorExpression();
    setState(1829);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1823);
        match(CypherParser::SP);
        setState(1824);
        match(CypherParser::OR);
        setState(1825);
        match(CypherParser::SP);
        setState(1826);
        oC_XorExpression(); 
      }
      setState(1831);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1832);
    oC_AndExpression();
    setState(1839);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1833);
        match(CypherParser::SP);
        setState(1834);
        match(CypherParser::XOR);
        setState(1835);
        match(CypherParser::SP);
        setState(1836);
        oC_AndExpression(); 
      }
      setState(1841);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1842);
    oC_NotExpression();
    setState(1849);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1843);
        match(CypherParser::SP);
        setState(1844);
        match(CypherParser::AND);
        setState(1845);
        match(CypherParser::SP);
        setState(1846);
        oC_NotExpression(); 
      }
      setState(1851);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1858);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(1852);
      match(CypherParser::NOT);
      setState(1854);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1853);
        match(CypherParser::SP);
      }
      setState(1860);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1861);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1899);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1863);
      kU_BitwiseOrOperatorExpression();
      setState(1873);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx)) {
      case 1: {
        setState(1865);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1864);
          match(CypherParser::SP);
        }
        setState(1867);
        kU_ComparisonOperator();
        setState(1869);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1868);
          match(CypherParser::SP);
        }
        setState(1871);
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1875);
      kU_BitwiseOrOperatorExpression();
      setState(1877);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1876);
        match(CypherParser::SP);
      }
      setState(1879);
      kU_ComparisonOperator();
      setState(1881);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1880);
        match(CypherParser::SP);
      }
      setState(1883);
      kU_BitwiseOrOperatorExpression();
      setState(1893); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1885);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1884);
                  match(CypherParser::SP);
                }
                setState(1887);
                kU_ComparisonOperator();
                setState(1889);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1888);
                  match(CypherParser::SP);
                }
                setState(1891);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1895); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1901);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1032256) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1903);
    kU_BitwiseAndOperatorExpression();
    setState(1914);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1905);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1904);
          match(CypherParser::SP);
        }
        setState(1907);
        match(CypherParser::T__11);
        setState(1909);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1908);
          match(CypherParser::SP);
        }
        setState(1911);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(1916);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1917);
    kU_BitShiftOperatorExpression();
    setState(1928);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1919);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1918);
          match(CypherParser::SP);
        }
        setState(1921);
        match(CypherParser::T__19);
        setState(1923);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1922);
          match(CypherParser::SP);
        }
        setState(1925);
        kU_BitShiftOperatorExpression(); 
      }
      setState(1930);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1931);
    oC_AddOrSubtractExpression();
    setState(1943);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1933);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1932);
          match(CypherParser::SP);
        }
        setState(1935);
        kU_BitShiftOperator();
        setState(1937);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1936);
          match(CypherParser::SP);
        }
        setState(1939);
        oC_AddOrSubtractExpression(); 
      }
      setState(1945);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1946);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20

    || _la == CypherParser::T__21)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1948);
    oC_MultiplyDivideModuloExpression();
    setState(1960);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1950);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1949);
          match(CypherParser::SP);
        }
        setState(1952);
        kU_AddOrSubtractOperator();
        setState(1954);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1953);
          match(CypherParser::SP);
        }
        setState(1956);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(1962);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1963);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__22 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1965);
    oC_PowerOfExpression();
    setState(1977);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1967);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1966);
          match(CypherParser::SP);
        }
        setState(1969);
        kU_MultiplyDivideModuloOperator();
        setState(1971);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1970);
          match(CypherParser::SP);
        }
        setState(1973);
        oC_PowerOfExpression(); 
      }
      setState(1979);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1980);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__23

    || _la == CypherParser::T__24 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1982);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(1993);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1984);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1983);
          match(CypherParser::SP);
        }
        setState(1986);
        match(CypherParser::T__25);
        setState(1988);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1987);
          match(CypherParser::SP);
        }
        setState(1990);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(1995);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2002);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(1996);
      match(CypherParser::MINUS);
      setState(1998);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1997);
        match(CypherParser::SP);
      }
      setState(2004);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2005);
    oC_StringListNullOperatorExpression();
    setState(2010);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
    case 1: {
      setState(2007);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2006);
        match(CypherParser::SP);
      }
      setState(2009);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2012);
    oC_PropertyOrLabelsExpression();
    setState(2020);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
    case 1: {
      setState(2013);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(2015); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2014);
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2017); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      setState(2019);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2041);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2022);
      match(CypherParser::SP);
      setState(2023);
      match(CypherParser::IN);
      setState(2025);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2024);
        match(CypherParser::SP);
      }
      setState(2027);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2028);
      match(CypherParser::T__6);
      setState(2029);
      oC_Expression();
      setState(2030);
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2032);
      match(CypherParser::T__6);
      setState(2034);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 72)) & 6882837236761493521) != 0) || ((((_la - 137) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 137)) & 9741) != 0)) {
        setState(2033);
        oC_Expression();
      }
      setState(2036);
      match(CypherParser::COLON);
      setState(2038);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 72)) & 6882837236761493521) != 0) || ((((_la - 137) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 137)) & 9741) != 0)) {
        setState(2037);
        oC_Expression();
      }
      setState(2040);
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2054);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
    case 1: {
      setState(2043);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(2044);
      match(CypherParser::SP);
      setState(2045);
      match(CypherParser::STARTS);
      setState(2046);
      match(CypherParser::SP);
      setState(2047);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(2048);
      match(CypherParser::SP);
      setState(2049);
      match(CypherParser::ENDS);
      setState(2050);
      match(CypherParser::SP);
      setState(2051);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(2052);
      match(CypherParser::SP);
      setState(2053);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(2057);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2056);
      match(CypherParser::SP);
    }
    setState(2059);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2062);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2061);
      match(CypherParser::SP);
    }
    setState(2064);
    match(CypherParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2076);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2066);
      match(CypherParser::SP);
      setState(2067);
      match(CypherParser::IS);
      setState(2068);
      match(CypherParser::SP);
      setState(2069);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2070);
      match(CypherParser::SP);
      setState(2071);
      match(CypherParser::IS);
      setState(2072);
      match(CypherParser::SP);
      setState(2073);
      match(CypherParser::NOT);
      setState(2074);
      match(CypherParser::SP);
      setState(2075);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2078);
    oC_Atom();
    setState(2085);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2080);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2079);
          match(CypherParser::SP);
        }
        setState(2082);
        oC_PropertyLookup(); 
      }
      setState(2087);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2097);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2088);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2089);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2090);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2091);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2092);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2093);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2094);
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2095);
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2096);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2105);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2099);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(2100);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::TRUE:
      case CypherParser::FALSE: {
        enterOuterAlt(_localctx, 3);
        setState(2101);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(2102);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(2103);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__9: {
        enterOuterAlt(_localctx, 6);
        setState(2104);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2107);
    _la = _input->LA(1);
    if (!(_la == CypherParser::TRUE

    || _la == CypherParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2109);
    match(CypherParser::T__6);
    setState(2111);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2110);
      match(CypherParser::SP);
    }
    setState(2126);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 6882837236761493521) != 0) || ((((_la - 137) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 137)) & 9741) != 0)) {
      setState(2113);
      oC_Expression();
      setState(2115);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2114);
        match(CypherParser::SP);
      }
      setState(2123);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2117);
        kU_ListEntry();
        setState(2119);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2118);
          match(CypherParser::SP);
        }
        setState(2125);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2128);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2130);
    match(CypherParser::T__2);
    setState(2132);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx)) {
    case 1: {
      setState(2131);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2135);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 6882837236761493521) != 0) || ((((_la - 137) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 137)) & 9741) != 0)) {
      setState(2134);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2137);
    match(CypherParser::T__9);
    setState(2139);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2138);
      match(CypherParser::SP);
    }
    setState(2141);
    kU_StructField();
    setState(2143);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2142);
      match(CypherParser::SP);
    }
    setState(2155);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2145);
      match(CypherParser::T__2);
      setState(2147);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2146);
        match(CypherParser::SP);
      }
      setState(2149);
      kU_StructField();
      setState(2151);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2150);
        match(CypherParser::SP);
      }
      setState(2157);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2158);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2162);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2160);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2161);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2165);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2164);
      match(CypherParser::SP);
    }
    setState(2167);
    match(CypherParser::COLON);
    setState(2169);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2168);
      match(CypherParser::SP);
    }
    setState(2171);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2173);
    match(CypherParser::T__1);
    setState(2175);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2174);
      match(CypherParser::SP);
    }
    setState(2177);
    oC_Expression();
    setState(2179);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2178);
      match(CypherParser::SP);
    }
    setState(2181);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2231);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2183);
      match(CypherParser::COUNT);
      setState(2185);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2184);
        match(CypherParser::SP);
      }
      setState(2187);
      match(CypherParser::T__1);
      setState(2189);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2188);
        match(CypherParser::SP);
      }
      setState(2191);
      match(CypherParser::STAR);
      setState(2193);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2192);
        match(CypherParser::SP);
      }
      setState(2195);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2196);
      oC_FunctionName();
      setState(2198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2197);
        match(CypherParser::SP);
      }
      setState(2200);
      match(CypherParser::T__1);
      setState(2202);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2201);
        match(CypherParser::SP);
      }
      setState(2208);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2204);
        match(CypherParser::DISTINCT);
        setState(2206);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2205);
          match(CypherParser::SP);
        }
      }
      setState(2227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4329085142078325892) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 72)) & 6882837236761493521) != 0) || ((((_la - 137) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 137)) & 9741) != 0)) {
        setState(2210);
        kU_FunctionParameter();
        setState(2212);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2211);
          match(CypherParser::SP);
        }
        setState(2224);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2214);
          match(CypherParser::T__2);
          setState(2216);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2215);
            match(CypherParser::SP);
          }
          setState(2218);
          kU_FunctionParameter();
          setState(2220);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2219);
            match(CypherParser::SP);
          }
          setState(2226);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2229);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2233);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2244);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      setState(2235);
      oC_SymbolicName();
      setState(2237);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2236);
        match(CypherParser::SP);
      }
      setState(2239);
      match(CypherParser::COLON);
      setState(2240);
      match(CypherParser::T__5);
      setState(2242);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2241);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(2246);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2248);
    oC_NodePattern();
    setState(2253); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2250);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2249);
                match(CypherParser::SP);
              }
              setState(2252);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2255); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2257);
    match(CypherParser::EXISTS);
    setState(2259);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2258);
      match(CypherParser::SP);
    }
    setState(2261);
    match(CypherParser::T__9);
    setState(2263);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2262);
      match(CypherParser::SP);
    }
    setState(2265);
    match(CypherParser::MATCH);
    setState(2267);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2266);
      match(CypherParser::SP);
    }
    setState(2269);
    oC_Pattern();
    setState(2274);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
    case 1: {
      setState(2271);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2270);
        match(CypherParser::SP);
      }
      setState(2273);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2277);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2276);
      match(CypherParser::SP);
    }
    setState(2279);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2281);
    match(CypherParser::COUNT);
    setState(2283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2282);
      match(CypherParser::SP);
    }
    setState(2285);
    match(CypherParser::T__9);
    setState(2287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2286);
      match(CypherParser::SP);
    }
    setState(2289);
    match(CypherParser::MATCH);
    setState(2291);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2290);
      match(CypherParser::SP);
    }
    setState(2293);
    oC_Pattern();
    setState(2298);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 397, _ctx)) {
    case 1: {
      setState(2295);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2294);
        match(CypherParser::SP);
      }
      setState(2297);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2301);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2300);
      match(CypherParser::SP);
    }
    setState(2303);
    match(CypherParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2305);
    match(CypherParser::T__4);
    setState(2307);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2306);
      match(CypherParser::SP);
    }
    setState(2311);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2309);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2310);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2335);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 406, _ctx)) {
    case 1: {
      setState(2313);
      match(CypherParser::CASE);
      setState(2318); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2315);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2314);
                  match(CypherParser::SP);
                }
                setState(2317);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2320); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2322);
      match(CypherParser::CASE);
      setState(2324);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2323);
        match(CypherParser::SP);
      }
      setState(2326);
      oC_Expression();
      setState(2331); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2328);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2327);
                  match(CypherParser::SP);
                }
                setState(2330);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2333); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2345);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 409, _ctx)) {
    case 1: {
      setState(2338);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2337);
        match(CypherParser::SP);
      }
      setState(2340);
      match(CypherParser::ELSE);
      setState(2342);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2341);
        match(CypherParser::SP);
      }
      setState(2344);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2348);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2347);
      match(CypherParser::SP);
    }
    setState(2350);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2352);
    match(CypherParser::WHEN);
    setState(2354);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2353);
      match(CypherParser::SP);
    }
    setState(2356);
    oC_Expression();
    setState(2358);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2357);
      match(CypherParser::SP);
    }
    setState(2360);
    match(CypherParser::THEN);
    setState(2362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2361);
      match(CypherParser::SP);
    }
    setState(2364);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2366);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2370);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2368);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2369);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2372);
    match(CypherParser::T__27);
    setState(2375);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2373);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2374);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2377);
    oC_Atom();
    setState(2379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2378);
      match(CypherParser::SP);
    }
    setState(2381);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2383);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2385);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2387);
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2389);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2396);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2391);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2392);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2394);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END: {
        enterOuterAlt(_localctx, 4);
        setState(2395);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IN() {
  return getToken(CypherParser::IN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2398);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4329085141809889280) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 4901042294485942289) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 292, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2400);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8053096448) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 294, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2402);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 128849149952) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 296, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2404);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281337537757184) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 36: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
